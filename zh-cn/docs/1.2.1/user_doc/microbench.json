{
  "filename": "microbench.md",
  "__html": "<h4>DolphinSchedulerMicroBench 微基准测试</h4>\n<p>所有的优化必须建立在数据印证的基础上，拒绝盲目优化。基于此，我们提供了MicroBench模块。</p>\n<p>MicroBench模块是基于OpenJDK JMH构件的（HotSpot的推荐基准测试方案）。当你开始基准测试时，你不需要额外的依赖。</p>\n<p>JMH，即Java MicroBenchmark Harness，是专门用于代码微基准测试的工具套件。何谓Micro Benchmark呢？简单的来说就是基于方法层面的基准测试，精度可以达到微秒级。当你定位到热点方法，希望进一步优化方法性能的时候，就可以使用JMH对优化的结果进行量化的分析。</p>\n<h5>Java基准测试需要注意的几个点：</h5>\n<ul>\n<li>\n<p>防止无用代码进入测试方法中。</p>\n</li>\n<li>\n<p>并发测试。</p>\n</li>\n<li>\n<p>测试结果呈现。</p>\n</li>\n</ul>\n<h5>JMH比较典型的应用场景有：</h5>\n<ul>\n<li>\n<p>1:定量分析某个热点函数的优化效果</p>\n</li>\n<li>\n<p>2:想定量地知道某个函数需要执行多长时间，以及执行时间和输入变量的相关性</p>\n</li>\n<li>\n<p>3:对比一个函数的多种实现方式</p>\n</li>\n</ul>\n<p>DolphinScheduler-MicroBench提供了AbstractBaseBenchmark,你可以在其基础上继承，编写你的基准测试代码，AbstractMicroBenchmark能保证以JUnit的方式运行。</p>\n<h5>定制运行参数</h5>\n<p>默认的AbstractMicrobenchmark配置是</p>\n<p>Warmup次数 10（warmupIterations）</p>\n<p>测试次数 10（measureIterations）</p>\n<p>Fork数量 2 （forkCount）</p>\n<p>你可以在启动的时候指定这些参数，-DmeasureIterations、-DperfReportDir（输出基准测试结果文件目录）、-DwarmupIterations、-DforkCount</p>\n<h5>DolphinScheduler-MicroBench 介绍</h5>\n<p>通常并不建议跑测试时，用较少的循环次数，但是较少的次数有助于确认基准测试时工作的，在确认结束后，再运行大量的基准测试。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Warmup(iterations = 2, time = 1)</span>\n<span class=\"hljs-meta\">@Measurement(iterations = 4, time = 1)</span>\n<span class=\"hljs-meta\">@State(Scope.Benchmark)</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">EnumBenchMark</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AbstractBaseBenchmark</span> </span>{\n\n}\n</code></pre>\n<p>这可以以方法级别或者类级别来运行基准测试，命令行的参数会覆盖annotation上的参数。</p>\n<pre><code class=\"language-java\">    <span class=\"hljs-meta\">@Benchmark</span> <span class=\"hljs-comment\">//方法注解，表示该方法是需要进行 benchmark 的对象。</span>\n    <span class=\"hljs-meta\">@BenchmarkMode(Mode.AverageTime)</span> <span class=\"hljs-comment\">//可选基准测试模式通过枚举Mode得到</span>\n    <span class=\"hljs-meta\">@OutputTimeUnit(TimeUnit.MICROSECONDS)</span> <span class=\"hljs-comment\">// 输出的时间单位</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">enumStaticMapTest</span><span class=\"hljs-params\">()</span> </span>{\n        TestTypeEnum.newGetNameByType(testNum);\n    }\n</code></pre>\n<p>当你的基准测试编写完成后，你可以运行它查看具体的测试情况：（实际结果取决于你的系统配置情况）</p>\n<p>首先它会对我们的代码进行预热，</p>\n<pre><code># Warmup Iteration   1: 0.007 us/op\n# Warmup Iteration   2: 0.008 us/op\nIteration   1: 0.004 us/op\nIteration   2: 0.004 us/op\nIteration   3: 0.004 us/op\nIteration   4: 0.004 us/op\n</code></pre>\n<p>在经过预热后，我们通常会得到如下结果</p>\n<pre><code class=\"language-java\">Benchmark                        (testNum)   Mode  Cnt          Score           Error  Units\nEnumBenchMark.simpleTest               <span class=\"hljs-number\">101</span>  thrpt    <span class=\"hljs-number\">8</span>  <span class=\"hljs-number\">428750972.826</span> ±  <span class=\"hljs-number\">66511362.350</span>  ops/s\nEnumBenchMark.simpleTest               <span class=\"hljs-number\">108</span>  thrpt    <span class=\"hljs-number\">8</span>  <span class=\"hljs-number\">299615240.337</span> ± <span class=\"hljs-number\">290089561.671</span>  ops/s\nEnumBenchMark.simpleTest               <span class=\"hljs-number\">103</span>  thrpt    <span class=\"hljs-number\">8</span>  <span class=\"hljs-number\">288423221.721</span> ± <span class=\"hljs-number\">130542990.747</span>  ops/s\nEnumBenchMark.simpleTest               <span class=\"hljs-number\">104</span>  thrpt    <span class=\"hljs-number\">8</span>  <span class=\"hljs-number\">236811792.152</span> ± <span class=\"hljs-number\">155355935.479</span>  ops/s\nEnumBenchMark.simpleTest               <span class=\"hljs-number\">105</span>  thrpt    <span class=\"hljs-number\">8</span>  <span class=\"hljs-number\">472247775.246</span> ±  <span class=\"hljs-number\">45769877.951</span>  ops/s\nEnumBenchMark.simpleTest               <span class=\"hljs-number\">103</span>  thrpt    <span class=\"hljs-number\">8</span>  <span class=\"hljs-number\">455473025.252</span> ±  <span class=\"hljs-number\">61212956.944</span>  ops/s\nEnumBenchMark.enumStaticMapTest        <span class=\"hljs-number\">101</span>   avgt    <span class=\"hljs-number\">8</span>          <span class=\"hljs-number\">0.006</span> ±         <span class=\"hljs-number\">0.003</span>  us/op\nEnumBenchMark.enumStaticMapTest        <span class=\"hljs-number\">108</span>   avgt    <span class=\"hljs-number\">8</span>          <span class=\"hljs-number\">0.005</span> ±         <span class=\"hljs-number\">0.002</span>  us/op\nEnumBenchMark.enumStaticMapTest        <span class=\"hljs-number\">103</span>   avgt    <span class=\"hljs-number\">8</span>          <span class=\"hljs-number\">0.006</span> ±         <span class=\"hljs-number\">0.005</span>  us/op\nEnumBenchMark.enumStaticMapTest        <span class=\"hljs-number\">104</span>   avgt    <span class=\"hljs-number\">8</span>          <span class=\"hljs-number\">0.006</span> ±         <span class=\"hljs-number\">0.004</span>  us/op\nEnumBenchMark.enumStaticMapTest        <span class=\"hljs-number\">105</span>   avgt    <span class=\"hljs-number\">8</span>          <span class=\"hljs-number\">0.004</span> ±         <span class=\"hljs-number\">0.001</span>  us/op\nEnumBenchMark.enumStaticMapTest        <span class=\"hljs-number\">103</span>   avgt    <span class=\"hljs-number\">8</span>          <span class=\"hljs-number\">0.004</span> ±         <span class=\"hljs-number\">0.001</span>  us/op\nEnumBenchMark.enumValuesTest           <span class=\"hljs-number\">101</span>   avgt    <span class=\"hljs-number\">8</span>          <span class=\"hljs-number\">0.011</span> ±         <span class=\"hljs-number\">0.004</span>  us/op\nEnumBenchMark.enumValuesTest           <span class=\"hljs-number\">108</span>   avgt    <span class=\"hljs-number\">8</span>          <span class=\"hljs-number\">0.025</span> ±         <span class=\"hljs-number\">0.016</span>  us/op\nEnumBenchMark.enumValuesTest           <span class=\"hljs-number\">103</span>   avgt    <span class=\"hljs-number\">8</span>          <span class=\"hljs-number\">0.019</span> ±         <span class=\"hljs-number\">0.010</span>  us/op\nEnumBenchMark.enumValuesTest           <span class=\"hljs-number\">104</span>   avgt    <span class=\"hljs-number\">8</span>          <span class=\"hljs-number\">0.018</span> ±         <span class=\"hljs-number\">0.018</span>  us/op\nEnumBenchMark.enumValuesTest           <span class=\"hljs-number\">105</span>   avgt    <span class=\"hljs-number\">8</span>          <span class=\"hljs-number\">0.014</span> ±         <span class=\"hljs-number\">0.012</span>  us/op\nEnumBenchMark.enumValuesTest           <span class=\"hljs-number\">103</span>   avgt    <span class=\"hljs-number\">8</span>          <span class=\"hljs-number\">0.012</span> ±         <span class=\"hljs-number\">0.009</span>  us/op\n</code></pre>\n<p>OpenJDK官方给了很多样例代码，有兴趣的同学可以自己查询并学习JMH：<a href=\"http://hg.openjdk.java.net/code-tools/jmh/file/tip/jmh-samples/src/main/java/org/openjdk/jmh/samples/\">OpenJDK-JMH-Example</a></p>\n",
  "link": "/dist/zh-cn/docs/1.2.1/user_doc/microbench.html",
  "meta": {}
}