{
  "filename": "code-conduct.md",
  "__html": "<h1>行为准则</h1>\n<p>以下行为准则以完全遵循<a href=\"https://www.apache.org/foundation/policies/conduct.html\">Apache软件基金会行为准则</a>为前提。</p>\n<h2>开发理念</h2>\n<ul>\n<li><strong>一致</strong> 代码风格、命名以及使用方式保持一致。</li>\n<li><strong>易读</strong> 代码无歧义，易于阅读和理解而非调试手段才知晓代码意图。</li>\n<li><strong>整洁</strong> 认同《重构》和《代码整洁之道》的理念，追求整洁优雅代码。</li>\n<li><strong>抽象</strong> 层次划分清晰，概念提炼合理。保持方法、类、包以及模块处于同一抽象层级。</li>\n<li><strong>用心</strong> 保持责任心，持续以工匠精神雕琢。</li>\n</ul>\n<h2>开发规范</h2>\n<ul>\n<li>执行<code>mvn -U clean package -Prelease</code>可以编译和测试通过全部测试用例。</li>\n<li>测试覆盖率工具检查不低于dev分支覆盖率。</li>\n<li>请使用Checkstyle检查代码，违反验证规则的需要有特殊理由。模板位置在根目录下ds_check_style.xml。</li>\n<li>遵守编码规范。</li>\n</ul>\n<h2>编码规范</h2>\n<ul>\n<li>使用linux换行符。</li>\n<li>缩进（包含空行）和上一行保持一致。</li>\n<li>类声明后与下面的变量或方法之间需要空一行。</li>\n<li>不应有无意义的空行。</li>\n<li>类、方法和变量的命名要做到顾名思义，避免使用缩写。</li>\n<li>返回值变量使用<code>result</code>命名；循环中使用<code>each</code>命名循环变量；map中使用<code>entry</code>代替<code>each</code>。</li>\n<li>捕获的异常名称命名为<code>e</code>；捕获异常且不做任何事情，异常名称命名为<code>ignored</code>。</li>\n<li>配置文件使用驼峰命名，文件名首字母小写。</li>\n<li>需要注释解释的代码尽量提成小方法，用方法名称解释。</li>\n<li><code>equals</code>和<code>==</code>条件表达式中，常量在左，变量在右；大于小于等条件表达式中，变量在左，常量在右。</li>\n<li>除了用于继承的抽象类之外，尽量将类设计为<code>final</code>。</li>\n<li>嵌套循环尽量提成方法。</li>\n<li>成员变量定义顺序以及参数传递顺序在各个类和方法中保持一致。</li>\n<li>优先使用卫语句。</li>\n<li>类和方法的访问权限控制为最小。</li>\n<li>方法所用到的私有方法应紧跟该方法，如果有多个私有方法，书写私有方法应与私有方法在原方法的出现顺序相同。</li>\n<li>方法入参和返回值不允许为<code>null</code>。</li>\n<li>优先使用三目运算符代替if else的返回和赋值语句。</li>\n<li>优先考虑使用<code>LinkedList</code>，只有在需要通过下标获取集合中元素值时再使用<code>ArrayList</code>。</li>\n<li><code>ArrayList</code>，<code>HashMap</code>等可能产生扩容的集合类型必须指定集合初始大小，避免扩容。</li>\n<li>日志与注释一律使用英文。</li>\n<li>注释只能包含javadoc，todo和fixme。</li>\n<li>公开的类和方法必须有javadoc，其他类和方法以及覆盖自父类的方法无需javadoc。</li>\n</ul>\n<h2>单元测试规范</h2>\n<ul>\n<li>\n<p>测试代码和生产代码需遵守相同代码规范。</p>\n</li>\n<li>\n<p>单元测试需遵循AIR（Automatic, Independent, Repeatable）设计理念。</p>\n<ul>\n<li>自动化（Automatic）：单元测试应全自动执行，而非交互式。禁止人工检查输出结果，不允许使用<code>System.out</code>，<code>log</code>等，必须使用断言进行验证。</li>\n<li>独立性（Independent）：禁止单元测试用例间的互相调用，禁止依赖执行的先后次序。每个单元测试均可独立运行。</li>\n<li>可重复执行（Repeatable）：单元测试不能受到外界环境的影响，可以重复执行。</li>\n</ul>\n</li>\n<li>\n<p>单元测试需遵循BCDE（Border, Correct, Design, Error）设计原则。</p>\n<ul>\n<li>边界值测试（Border）：通过循环边界、特殊数值、数据顺序等边界的输入，得到预期结果。</li>\n<li>正确性测试（Correct）：通过正确的输入，得到预期结果。</li>\n<li>合理性设计（Design）：与生产代码设计相结合，设计高质量的单元测试。</li>\n<li>容错性测试（Error）：通过非法数据、异常流程等错误的输入，得到预期结果。</li>\n</ul>\n</li>\n<li>\n<p>如无特殊理由，测试需全覆盖。</p>\n</li>\n<li>\n<p>每个测试用例需精确断言。</p>\n</li>\n<li>\n<p>准备环境的代码和测试代码分离。</p>\n</li>\n<li>\n<p>只有junit <code>Assert</code>，hamcrest <code>CoreMatchers</code>，Mockito相关可以使用static import。</p>\n</li>\n<li>\n<p>单数据断言，应使用<code>assertTrue</code>，<code>assertFalse</code>，<code>assertNull</code>和<code>assertNotNull</code>。</p>\n</li>\n<li>\n<p>多数据断言，应使用<code>assertThat</code>。</p>\n</li>\n<li>\n<p>精确断言，尽量不使用<code>not</code>，<code>containsString</code>断言。</p>\n</li>\n<li>\n<p>测试用例的真实值应名为为actualXXX，期望值应命名为expectedXXX。</p>\n</li>\n<li>\n<p>测试类和<code>@Test</code>标注的方法无需javadoc。</p>\n</li>\n<li>\n<p>公共规范</p>\n<ul>\n<li>每行长度不超过<code>200</code>个字符，保证每一行语义完整以便于理解。</li>\n</ul>\n</li>\n</ul>\n",
  "link": "/dist/zh-cn/docs/3.0.1/user_doc/contribute/join/code-conduct.html",
  "meta": {}
}