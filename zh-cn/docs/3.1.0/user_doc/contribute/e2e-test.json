{
  "filename": "e2e-test.md",
  "__html": "<h1>DolphinScheduler — E2E 自动化测试</h1>\n<h2>一、前置知识：</h2>\n<h3>1、E2E 测试与单元测试的区别</h3>\n<p>E2E，是“End to End”的缩写，可以翻译成“端到端”测试。它模仿用户，从某个入口开始，逐步执行操作，直到完成某项工作。与单元测试不同，后者通常需要测试参数、参数类型、参数值、参数数量、返回值、抛出错误等，目的在于保证特定函数能够在任何情况下都稳定可靠完成工作。单元测试假定只要所有函数都正常工作，那么整个产品就能正常工作。</p>\n<p>相对来说，E2E 测试并没有那么强调要覆盖全部使用场景，它关注的<strong>一个完整的操作链是否能够完成</strong>。对于 Web 前端来说，还关注<strong>界面布局、内容信息是否符合预期</strong>。</p>\n<p>比如，登陆界面的 E2E 测试，关注用户是否能够正常输入，正常登录；登陆失败的话，是否能够正确显示错误信息。至于输入不合法的内容是否处理，并不是所关注的重点。</p>\n<h3>2、Selenium 测试框架</h3>\n<p><a href=\"https://www.selenium.dev\">Selenium</a> 是一种开源测试工具，用于在 Web 浏览器上执行自动化测试。该框架使用 WebDriver 通过浏览器的原生组件，转化 Web Service 的命令为浏览器 native 的调用来完成操作。简单来说，就是模拟浏览器，对于页面的元素进行选择操作。</p>\n<p>WebDriver 是一个 API 和协议，它定义了一个语言中立的接口，用于控制 web 浏览器的行为。 每个浏览器都有一个特定的 WebDriver 实现，称为驱动程序。驱动程序是负责委派给浏览器的组件，并处理与 Selenium 和浏览器之间的通信。</p>\n<p>Selenium 框架通过一个面向用户的界面将所有这些部分连接在一起， 该界面允许透明地使用不同的浏览器后端， 从而实现跨浏览器和跨平台自动化。</p>\n<h2>二、E2E 测试</h2>\n<h3>1、E2E-Pages</h3>\n<p>DolphinScheduler 的 E2E 测试使用 docker-compose 部署，当前测试的为单机模式，主要用于检验一些例如“增删改查”基本功能，后期如需做集群验证，例如不同服务之间的协作，或者各个服务之间的通讯机制，可参考 <code>deploy/docker/docker-compose.yml</code>来配置。</p>\n<p>对于 E2E 测试（前端这一块），使用 <a href=\"https://www.selenium.dev/documentation/guidelines/page_object_models/\">页面模型</a> 的形式，主要为每一个页面建立一个对应的模型。下面以登录页为例：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> org.apache.dolphinscheduler.e2e.pages;\n\n<span class=\"hljs-keyword\">import</span> org.apache.dolphinscheduler.e2e.pages.common.NavBarPage;\n<span class=\"hljs-keyword\">import</span> org.apache.dolphinscheduler.e2e.pages.security.TenantPage;\n\n<span class=\"hljs-keyword\">import</span> org.openqa.selenium.WebElement;\n<span class=\"hljs-keyword\">import</span> org.openqa.selenium.remote.RemoteWebDriver;\n<span class=\"hljs-keyword\">import</span> org.openqa.selenium.support.FindBy;\n<span class=\"hljs-keyword\">import</span> org.openqa.selenium.support.ui.ExpectedConditions;\n<span class=\"hljs-keyword\">import</span> org.openqa.selenium.support.ui.WebDriverWait;\n\n<span class=\"hljs-keyword\">import</span> lombok.Getter;\n<span class=\"hljs-keyword\">import</span> lombok.SneakyThrows;\n\n<span class=\"hljs-meta\">@Getter</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LoginPage</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">NavBarPage</span> </span>{\n    <span class=\"hljs-meta\">@FindBy(id = &quot;inputUsername&quot;)</span>\n    <span class=\"hljs-keyword\">private</span> WebElement inputUsername;\n\n    <span class=\"hljs-meta\">@FindBy(id = &quot;inputPassword&quot;)</span>\n    <span class=\"hljs-keyword\">private</span> WebElement inputPassword;\n\n    <span class=\"hljs-meta\">@FindBy(id = &quot;btnLogin&quot;)</span>\n    <span class=\"hljs-keyword\">private</span> WebElement buttonLogin;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">LoginPage</span><span class=\"hljs-params\">(RemoteWebDriver driver)</span> </span>{\n        <span class=\"hljs-keyword\">super</span>(driver);\n    }\n\n    <span class=\"hljs-meta\">@SneakyThrows</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> TenantPage <span class=\"hljs-title\">login</span><span class=\"hljs-params\">(String username, String password)</span> </span>{\n        inputUsername().sendKeys(username);\n        inputPassword().sendKeys(password);\n        buttonLogin().click();\n\n        <span class=\"hljs-keyword\">new</span> WebDriverWait(driver, <span class=\"hljs-number\">10</span>)\n            .until(ExpectedConditions.urlContains(<span class=\"hljs-string\">&quot;/#/security&quot;</span>));\n\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> TenantPage(driver);\n    }\n}\n</code></pre>\n<p>在测试过程中，我们只针对所需要关注的元素进行测试，而非页面中的所有元素，所以在登陆页面只对用户名、密码和登录按钮这些元素进行声明。通过 Selenium 测试框架所提供的 FindBy 接口来查找 Vue 文件中对应的 id 或 class。</p>\n<p>此外，在测试过程中，并不会直接去操作元素，一般选择封装对应的方法，以达到复用的效果。例如想要登录的话，直接传入用户名和密码，通过 <code>public TenantPage login()</code> 方法去操作所传入的元素，从而达到实现登录的效果，即当用户完成登录之后，跳转到安全中心（默认进入到租户管理页面）。</p>\n<p>在安全中心页面（SecurityPage）提供了 goToTab 方法，用于测试对应侧栏的跳转，主要包括：租户管理（TenantPage）、用户管理（UserPage）、工作组管理（WorkerGroupPage）和队列管理（QueuePage）。这些页面的实现方式同理，主要测试表单的输入、增加和删除按钮是否能够返回出对应的页面。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> &lt;T extends SecurityPage.Tab&gt; <span class=\"hljs-function\">T <span class=\"hljs-title\">goToTab</span><span class=\"hljs-params\">(Class&lt;T&gt; tab)</span> </span>{\n       <span class=\"hljs-keyword\">if</span> (tab == TenantPage.class) {\n           WebElement menuTenantManageElement = <span class=\"hljs-keyword\">new</span> WebDriverWait(driver, <span class=\"hljs-number\">60</span>)\n                   .until(ExpectedConditions.elementToBeClickable(menuTenantManage));\n           ((JavascriptExecutor)driver).executeScript(<span class=\"hljs-string\">&quot;arguments[0].click();&quot;</span>, menuTenantManageElement);\n           <span class=\"hljs-keyword\">return</span> tab.cast(<span class=\"hljs-keyword\">new</span> TenantPage(driver));\n       }\n       <span class=\"hljs-keyword\">if</span> (tab == UserPage.class) {\n           WebElement menUserManageElement = <span class=\"hljs-keyword\">new</span> WebDriverWait(driver, <span class=\"hljs-number\">60</span>)\n                   .until(ExpectedConditions.elementToBeClickable(menUserManage));\n           ((JavascriptExecutor)driver).executeScript(<span class=\"hljs-string\">&quot;arguments[0].click();&quot;</span>, menUserManageElement);\n           <span class=\"hljs-keyword\">return</span> tab.cast(<span class=\"hljs-keyword\">new</span> UserPage(driver));\n       }\n       <span class=\"hljs-keyword\">if</span> (tab == WorkerGroupPage.class) {\n           WebElement menWorkerGroupManageElement = <span class=\"hljs-keyword\">new</span> WebDriverWait(driver, <span class=\"hljs-number\">60</span>)\n                   .until(ExpectedConditions.elementToBeClickable(menWorkerGroupManage));\n           ((JavascriptExecutor)driver).executeScript(<span class=\"hljs-string\">&quot;arguments[0].click();&quot;</span>, menWorkerGroupManageElement);\n           <span class=\"hljs-keyword\">return</span> tab.cast(<span class=\"hljs-keyword\">new</span> WorkerGroupPage(driver));\n       }\n       <span class=\"hljs-keyword\">if</span> (tab == QueuePage.class) {\n           menuQueueManage().click();\n           <span class=\"hljs-keyword\">return</span> tab.cast(<span class=\"hljs-keyword\">new</span> QueuePage(driver));\n       }\n       <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> UnsupportedOperationException(<span class=\"hljs-string\">&quot;Unknown tab: &quot;</span> + tab.getName());\n   }\n</code></pre>\n<p><img src=\"/img/e2e-test/SecurityPage.png\" alt=\"SecurityPage\"></p>\n<p>对于导航栏选项的跳转，在<code>org/apache/dolphinscheduler/e2e/pages/common/NavBarPage.java</code> 中提供了 goToNav 的方法。当前支持的页面为：项目管理（ProjectPage）、安全中心（SecurityPage）和资源中心（ResourcePage）。</p>\n<pre><code class=\"language-java\">    <span class=\"hljs-keyword\">public</span> &lt;T extends NavBarItem&gt; <span class=\"hljs-function\">T <span class=\"hljs-title\">goToNav</span><span class=\"hljs-params\">(Class&lt;T&gt; nav)</span> </span>{\n        <span class=\"hljs-keyword\">if</span> (nav == ProjectPage.class) {\n            WebElement projectTabElement = <span class=\"hljs-keyword\">new</span> WebDriverWait(driver, <span class=\"hljs-number\">60</span>)\n                .until(ExpectedConditions.elementToBeClickable(projectTab));\n            ((JavascriptExecutor)driver).executeScript(<span class=\"hljs-string\">&quot;arguments[0].click();&quot;</span>, projectTabElement);\n            <span class=\"hljs-keyword\">return</span> nav.cast(<span class=\"hljs-keyword\">new</span> ProjectPage(driver));\n        }\n\n        <span class=\"hljs-keyword\">if</span> (nav == SecurityPage.class) {\n            WebElement securityTabElement = <span class=\"hljs-keyword\">new</span> WebDriverWait(driver, <span class=\"hljs-number\">60</span>)\n                .until(ExpectedConditions.elementToBeClickable(securityTab));\n            ((JavascriptExecutor)driver).executeScript(<span class=\"hljs-string\">&quot;arguments[0].click();&quot;</span>, securityTabElement);\n            <span class=\"hljs-keyword\">return</span> nav.cast(<span class=\"hljs-keyword\">new</span> SecurityPage(driver));\n        }\n\n        <span class=\"hljs-keyword\">if</span> (nav == ResourcePage.class) {\n            WebElement resourceTabElement = <span class=\"hljs-keyword\">new</span> WebDriverWait(driver, <span class=\"hljs-number\">60</span>)\n                .until(ExpectedConditions.elementToBeClickable(resourceTab));\n            ((JavascriptExecutor)driver).executeScript(<span class=\"hljs-string\">&quot;arguments[0].click();&quot;</span>, resourceTabElement);\n            <span class=\"hljs-keyword\">return</span> nav.cast(<span class=\"hljs-keyword\">new</span> ResourcePage(driver));\n        }\n\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> UnsupportedOperationException(<span class=\"hljs-string\">&quot;Unknown nav bar&quot;</span>);\n    }\n</code></pre>\n<h3>2、E2E-Cases</h3>\n<p>当前所支持的 E2E 测试案例，主要包括：文件管理、项目管理、队列管理、租户管理、用户管理、Worker 分组管理和工作流测试。</p>\n<p><img src=\"/img/e2e-test/E2E_Cases.png\" alt=\"E2E_Cases\"></p>\n<p>下面以租户管理测试为例，前文已经说明，我们使用 docker-compose 进行部署，所以每个测试案例，都需要以注解的形式引入对应的文件。</p>\n<p>使用 Selenium 所提供的 RemoteWebDriver 来加载浏览器。在每个测试案例开始之前都需要进行一些准备工作。比如：登录用户、跳转到对应的页面（根据具体的测试案例而定）。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@BeforeAll</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setup</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">new</span> LoginPage(browser)\n            .login(<span class=\"hljs-string\">&quot;admin&quot;</span>, <span class=\"hljs-string\">&quot;dolphinscheduler123&quot;</span>) <span class=\"hljs-comment\">// 登录进入租户界面</span>\n            .goToNav(SecurityPage.class) <span class=\"hljs-comment\">// 安全中心</span>\n            .goToTab(TenantPage.class)\n    ;\n}\n</code></pre>\n<p>在完成准备工作之后，就是正式的测试案例编写。我们使用 @Order() 注解的形式，用于模块化，确认测试顺序。在进行测试之后，使用断言来判断测试是否成功，如果断言返回 true，则表示创建租户成功。可参考创建租户的测试代码：</p>\n<pre><code class=\"language-java\">    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-meta\">@Order(10)</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">testCreateTenant</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">final</span> TenantPage page = <span class=\"hljs-keyword\">new</span> TenantPage(browser);\n        page.create(tenant);\n\n        await().untilAsserted(() -&gt; assertThat(page.tenantList())\n                .as(<span class=\"hljs-string\">&quot;Tenant list should contain newly-created tenant&quot;</span>)\n                .extracting(WebElement::getText)\n                .anyMatch(it -&gt; it.contains(tenant)));\n    }\n</code></pre>\n<p>其余的都是类似的情况，可参考具体的源码来理解。</p>\n<p><a href=\"https://github.com/apache/dolphinscheduler/tree/dev/dolphinscheduler-e2e/dolphinscheduler-e2e-case/src/test/java/org/apache/dolphinscheduler/e2e/cases\">https://github.com/apache/dolphinscheduler/tree/dev/dolphinscheduler-e2e/dolphinscheduler-e2e-case/src/test/java/org/apache/dolphinscheduler/e2e/cases</a></p>\n<h2>三、补充</h2>\n<p>在本地运行的时候，首先需要启动相应的本地服务，可以参考该页面: <a href=\"./development-environment-setup.md\">环境搭建</a></p>\n<p>在本地运行 E2E 测试的时候，可以配置 <code>-Dlocal=true</code> 参数，用于连接本地，方便对于 UI 界面的更改。</p>\n<p>如果是<code>M1</code>芯片的机器，可以使用<code>-Dm1_chip=true</code> 参数,用于配置使用<code>ARM64</code>支持的容器。</p>\n<p><img src=\"/img/e2e-test/Dlocal.png\" alt=\"Dlocal\"></p>\n<p>在本地运行过程中，如果出现连接超时，可增大加载时间，建议 30 及其以上。</p>\n<p><img src=\"/img/e2e-test/timeout.png\" alt=\"timeout\"></p>\n<p>测试的运行过程将会以 MP4 的文件格式存在。</p>\n<p><img src=\"/img/e2e-test/MP4.png\" alt=\"MP4\"></p>\n",
  "link": "/dist/zh-cn/docs/3.1.0/user_doc/contribute/e2e-test.html",
  "meta": {}
}