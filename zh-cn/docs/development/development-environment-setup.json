{
  "filename": "development-environment-setup.md",
  "__html": "<h4>准备工作</h4>\n<ol>\n<li>\n<p>首先从远端仓库fork <a href=\"https://github.com/apache/incubator-dolphinscheduler\">dolphinscheduler</a> 一份代码到自己的仓库中</p>\n</li>\n<li>\n<p>在开发环境中安装好MySQL/PostgreSQL、JDK、MAVEN</p>\n</li>\n<li>\n<p>把自己仓库clone到本地</p>\n<p><code>git clone https://github.com/apache/incubator-dolphinscheduler.git</code></p>\n</li>\n<li>\n<p>git clone项目后，进入项目目录，执行以下命令。</p>\n</li>\n</ol>\n<pre><code>1. git branch -a    #查看分支\n2. git checkout dev #切换到dev分支\n3. git pull #同步分支\n4. mvn -U clean package -Prelease -Dmaven.test.skip=true   #由于项目使用了gRPC，所以需要先编译项目生成需要的类。\n</code></pre>\n<h4>安装node</h4>\n<ol>\n<li>安装nvm<br>\ncurl -o- <a href=\"https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh\">https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh</a> | bash</li>\n<li>刷新环境变量<br>\nsource ~/.bash_profile</li>\n<li>安装node<br>\nnvm install v12.12.0<br>\n备注:mac用户还可以通过brew安装npm:brew install npm</li>\n<li>验证node安装成功<br>\nnode --version</li>\n</ol>\n<h4>安装zookeeper</h4>\n<ol>\n<li>下载zookeeper<br>\n<a href=\"http://apache.mirrors.hoobly.com/zookeeper/zookeeper-3.6.1/apache-zookeeper-3.6.1-bin.tar.gz\">http://apache.mirrors.hoobly.com/zookeeper/zookeeper-3.6.1/apache-zookeeper-3.6.1-bin.tar.gz</a></li>\n<li>复制配置文件<br>\ncp conf/zoo_sample.cfg conf/zoo.cfg</li>\n<li>修改配置<br>\nvi conf/zoo.cfg<br>\ndataDir=./tmp/zookeeper</li>\n<li>启动/停止zookeeper<br>\n./bin/zkServer.sh start\n./bin/zkServer.sh stop</li>\n</ol>\n<h4>创建数据库</h4>\n<ol>\n<li>创建用户名为ds_user,密码为dolphinscheduler的用户</li>\n</ol>\n<pre><code>mysql&gt; CREATE DATABASE dolphinscheduler DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;\nmysql&gt; GRANT ALL PRIVILEGES ON dolphinscheduler.* TO 'ds_user'@'%' IDENTIFIED BY 'dolphinscheduler';\nmysql&gt; GRANT ALL PRIVILEGES ON dolphinscheduler.* TO 'ds_user'@'localhost' IDENTIFIED BY 'dolphinscheduler';\nmysql&gt; flush privileges;\n\n</code></pre>\n<h4>搭建前端</h4>\n<ol>\n<li>进入dolphinscheduler-ui的目录<br>\ncd dolphinscheduler-ui</li>\n<li>执行npm install</li>\n</ol>\n<h4>搭建后端</h4>\n<ol>\n<li>\n<p>将项目导入到idea中<br>\nfile--&gt;open</p>\n</li>\n<li>\n<p>修改dao模块resource目录下datasource.properties文件中的数据库配置信息</p>\n<pre><code>    spring.datasource.driver-class-name=com.mysql.jdbc.Driver\n    spring.datasource.url=jdbc:mysql://localhost:3306/dolphinscheduler\n    spring.datasource.username=ds_user\n    spring.datasource.password=dolphinscheduler  \n</code></pre>\n</li>\n<li>\n<p>修改根项目中pom.xml，将mysql-connector-java依赖的scope修改为compile</p>\n</li>\n<li>\n<p>刷新dao模块，运行org.apache.dolphinscheduler.dao.upgrade.shell.CreateDolphinScheduler的main方法，自动插入项目所需的表和数据</p>\n</li>\n<li>\n<p>修改service模块zookeeper.properties中链接信息(zookeeper.quorum)<br>\nzookeeper.quorum=localhost:2181</p>\n</li>\n<li>\n<p>修改dolphinscheduler-ui模块的.env文件</p>\n</li>\n</ol>\n<pre><code>API_BASE = http://localhost:12345\nDEV_HOST = localhost\n</code></pre>\n<h4>启动项目</h4>\n<ol>\n<li>\n<p>启动zookeeper<br>\n./bin/zkServer.sh start</p>\n</li>\n<li>\n<p>启动MasterServer，执行org.apache.dolphinscheduler.server.master.MasterServer的main方法,需要设置VM Options:</p>\n<pre><code>    -Dlogging.config=classpath:logback-master.xml -Ddruid.mysql.usePingMethod=false\n</code></pre>\n</li>\n<li>\n<p>启动WorkerServer，执行org.apache.dolphinscheduler.server.worker.WorkerServer的main方法,需要设置VM Options:</p>\n<pre><code>    -Dlogging.config=classpath:logback-worker.xml -Ddruid.mysql.usePingMethod=false\n</code></pre>\n</li>\n<li>\n<p>启动ApiApplicationServer，执行org.apache.dolphinscheduler.api.ApiApplicationServer的main方法,需要设置VM Options:</p>\n<pre><code>    -Dlogging.config=classpath:logback-api.xml -Dspring.profiles.active=api\n</code></pre>\n</li>\n<li>\n<p>,这里暂时不启动其它模块，如果启动其它模块，那么去查询script/dolphinscheduler-daemon.sh文件,设置相应的VM Options</p>\n<pre><code>    if [ &quot;$command&quot; = &quot;api-server&quot; ]; then\n      LOG_FILE=&quot;-Dlogging.config=classpath:logback-api.xml -Dspring.profiles.active=api&quot;\n      CLASS=org.apache.dolphinscheduler.api.ApiApplicationServer\n    elif [ &quot;$command&quot; = &quot;master-server&quot; ]; then\n      LOG_FILE=&quot;-Dlogging.config=classpath:logback-master.xml -Ddruid.mysql.usePingMethod=false&quot;\n      CLASS=org.apache.dolphinscheduler.server.master.MasterServer\n    elif [ &quot;$command&quot; = &quot;worker-server&quot; ]; then\n      LOG_FILE=&quot;-Dlogging.config=classpath:logback-worker.xml -Ddruid.mysql.usePingMethod=false&quot;\n      CLASS=org.apache.dolphinscheduler.server.worker.WorkerServer\n    elif [ &quot;$command&quot; = &quot;alert-server&quot; ]; then\n      LOG_FILE=&quot;-Dlogback.configurationFile=conf/logback-alert.xml&quot;\n      CLASS=org.apache.dolphinscheduler.alert.AlertServer\n    elif [ &quot;$command&quot; = &quot;logger-server&quot; ]; then\n      CLASS=org.apache.dolphinscheduler.server.log.LoggerServer\n    else\n      echo &quot;Error: No command named \\`$command' was found.&quot;\n      exit 1\n    fi\n</code></pre>\n</li>\n<li>\n<p>启动前端ui模块<br>\ncd dolphinscheduler-ui目录，执行npm run start</p>\n</li>\n</ol>\n<h4>访问项目</h4>\n<ol>\n<li>访问http://localhost:8888<br>\n输入管理员账户admin,密码dolphinscheduler123进行登陆</li>\n</ol>\n",
  "link": "\\zh-cn\\docs\\development\\development-environment-setup.html",
  "meta": {}
}