{
  "filename": "cluster-deployment.md",
  "__html": "<h1>集群部署(Cluster)</h1>\n<h1>1、基础软件安装(必装项请自行安装)</h1>\n<ul>\n<li>PostgreSQL (8.2.15+) or MySQL (5.7系列)  :  两者任选其一即可</li>\n<li><a href=\"https://www.oracle.com/technetwork/java/javase/downloads/index.html\">JDK</a> (1.8+) :  必装，请安装好后在/etc/profile下配置 JAVA_HOME 及 PATH 变量</li>\n<li>ZooKeeper (3.4.6+) ：必装</li>\n<li>Hadoop (2.6+) or MinIO ：选装，如果需要用到资源上传功能，可以选择上传到Hadoop or MinIO上</li>\n</ul>\n<pre><code class=\"language-markdown\"> 注意：DolphinScheduler本身不依赖Hadoop、Hive、Spark,仅是会调用他们的Client，用于对应任务的提交。\n</code></pre>\n<h1>2、下载二进制tar.gz包</h1>\n<ul>\n<li>请下载最新版本的后端安装包至服务器部署目录,比如创建 /opt/dolphinscheduler 做为安装部署目录，下载地址： <a href=\"https://dolphinscheduler.apache.org/zh-cn/docs/release/download.html\">下载</a>，下载后上传tar包到该目录中，并进行解压</li>\n</ul>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 创建部署目录,部署目录请不要创建在/root、/home等高权限目录 </span>\nmkdir -p /opt/dolphinscheduler;\ncd /opt/dolphinscheduler;\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> 解压缩</span>\ntar -zxvf apache-dolphinscheduler-incubating-1.3.4-dolphinscheduler-bin.tar.gz -C /opt/dolphinscheduler;\n\nmv apache-dolphinscheduler-incubating-1.3.4-dolphinscheduler-bin  dolphinscheduler-bin\n</code></pre>\n<h1>3、创建部署用户和hosts映射</h1>\n<ul>\n<li>在<strong>所有</strong>部署调度的机器上创建部署用户，并且一定要配置sudo免密。假如我们计划在ds1,ds2,ds3,ds4这4台机器上部署调度，首先需要在每台机器上都创建部署用户</li>\n</ul>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 创建用户需使用root登录，设置部署用户名，请自行修改，后面以dolphinscheduler为例</span>\nuseradd dolphinscheduler;\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 设置用户密码，请自行修改，后面以dolphinscheduler123为例</span>\necho \"dolphinscheduler123\" | passwd --stdin dolphinscheduler\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 配置sudo免密</span>\necho 'dolphinscheduler  ALL=(ALL)  NOPASSWD: NOPASSWD: ALL' &gt;&gt; /etc/sudoers\nsed -i 's/Defaults    requirett/#Defaults    requirett/g' /etc/sudoers\n\n</code></pre>\n<pre><code> 注意：\n - 因为是以 sudo -u {linux-user} 切换不同linux用户的方式来实现多租户运行作业，所以部署用户需要有 sudo 权限，而且是免密的。\n - 如果发现/etc/sudoers文件中有&quot;Default requiretty&quot;这行，也请注释掉\n - 如果用到资源上传的话，还需要在`HDFS或者MinIO`上给该部署用户分配读写的权限\n</code></pre>\n<h1>4、配置hosts映射和ssh打通及修改目录权限</h1>\n<ul>\n<li>\n<p>以第一台机器(hostname为ds1)作为部署机，在ds1上配置所有待部署机器的hosts, 在ds1以root登录</p>\n<pre><code class=\"language-shell\">vi /etc/hosts\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\">add ip hostname</span>\n192.168.xxx.xxx ds1\n192.168.xxx.xxx ds2\n192.168.xxx.xxx ds3\n192.168.xxx.xxx ds4\n</code></pre>\n<p><em>注意：请删掉或者注释掉127.0.0.1这行</em></p>\n</li>\n<li>\n<p>同步ds1上的/etc/hosts到所有部署机器</p>\n<pre><code class=\"language-shell\">for ip in ds2 ds3;     #请将此处ds2 ds3替换为自己要部署的机器的hostname\ndo\n    sudo scp -r /etc/hosts  $ip:/etc/          #在运行中需要输入root密码\ndone\n</code></pre>\n<p><em>备注：当然 通过<code>sshpass -p xxx sudo scp -r /etc/hosts $ip:/etc/</code>就可以省去输入密码了</em></p>\n<blockquote>\n<p>centos下sshpass的安装：</p>\n<ol>\n<li>\n<p>先安装epel</p>\n<p>yum install -y epel-release</p>\n<p>yum repolist</p>\n</li>\n<li>\n<p>安装完成epel之后，就可以按照sshpass了</p>\n<p>yum install -y sshpass</p>\n</li>\n</ol>\n</blockquote>\n</li>\n<li>\n<p>在ds1上，切换到部署用户并配置ssh本机免密登录</p>\n<pre><code class=\"language-shell\"> su dolphinscheduler;\n\nssh-keygen -t rsa -P '' -f ~/.ssh/id_rsa\ncat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys\nchmod 600 ~/.ssh/authorized_keys\n</code></pre>\n</li>\n</ul>\n<p>​      注意：<em>正常设置后，dolphinscheduler用户在执行命令<code>ssh localhost</code> 是不需要再输入密码的</em></p>\n<ul>\n<li>\n<p>在ds1上，配置部署用户dolphinscheduler ssh打通到其他待部署的机器</p>\n<pre><code class=\"language-shell\">su dolphinscheduler;\nfor ip in ds2 ds3;     #请将此处ds2 ds3替换为自己要部署的机器的hostname\ndo\n    ssh-copy-id  $ip   #该操作执行过程中需要手动输入dolphinscheduler用户的密码\ndone\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> 当然 通过 sshpass -p xxx ssh-copy-id <span class=\"hljs-variable\">$ip</span> 就可以省去输入密码了</span>\n</code></pre>\n</li>\n<li>\n<p>在ds1上，修改目录权限，使得部署用户对dolphinscheduler-bin目录有操作权限</p>\n<pre><code class=\"language-shell\">sudo chown -R dolphinscheduler:dolphinscheduler dolphinscheduler-bin\n</code></pre>\n</li>\n</ul>\n<h1>5、数据库初始化</h1>\n<ul>\n<li>进入数据库，默认数据库是PostgreSQL，如选择MySQL的话，后续需要添加mysql-connector-java驱动包到DolphinScheduler的lib目录下，这里以MySQL为例</li>\n</ul>\n<pre><code>mysql -h192.168.xx.xx -P3306 -uroot -p\n</code></pre>\n<ul>\n<li>进入数据库命令行窗口后，执行数据库初始化命令，设置访问账号和密码。<strong>注: {user} 和 {password} 需要替换为具体的数据库用户名和密码</strong></li>\n</ul>\n<pre><code class=\"language-mysql\">   mysql&gt; CREATE DATABASE dolphinscheduler DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;\n   mysql&gt; GRANT ALL PRIVILEGES ON dolphinscheduler.* TO '{user}'@'%' IDENTIFIED BY '{password}';\n   mysql&gt; GRANT ALL PRIVILEGES ON dolphinscheduler.* TO '{user}'@'localhost' IDENTIFIED BY '{password}';\n   mysql&gt; flush privileges;\n</code></pre>\n<ul>\n<li>\n<p>创建表和导入基础数据</p>\n<ul>\n<li>修改 conf 目录下 datasource.properties 中的下列配置</li>\n</ul>\n<pre><code class=\"language-shell\">  vi conf/datasource.properties\n</code></pre>\n<ul>\n<li>如果选择 MySQL，请注释掉 PostgreSQL 相关配置(反之同理), 还需要手动添加 [<a href=\"https://downloads.mysql.com/archives/c-j/\"> mysql-connector-java 驱动 jar </a>] 包到 lib 目录下，这里下载的是mysql-connector-java-5.1.47.jar，然后正确配置数据库连接相关信息</li>\n</ul>\n<pre><code class=\"language-properties\"><span class=\"hljs-comment\">  #postgre</span>\n<span class=\"hljs-comment\">  #spring.datasource.driver-class-name=org.postgresql.Driver</span>\n<span class=\"hljs-comment\">  #spring.datasource.url=jdbc:postgresql://localhost:5432/dolphinscheduler</span>\n<span class=\"hljs-comment\">  # mysql</span>\n  <span class=\"hljs-meta\">spring.datasource.driver-class-name</span>=<span class=\"hljs-string\">com.mysql.jdbc.Driver</span>\n  <span class=\"hljs-meta\">spring.datasource.url</span>=<span class=\"hljs-string\">jdbc:mysql://xxx:3306/dolphinscheduler?useUnicode=true&amp;characterEncoding=UTF-8&amp;allowMultiQueries=true     需要修改ip</span>\n  <span class=\"hljs-meta\">spring.datasource.username</span>=<span class=\"hljs-string\">xxx\t\t\t\t\t\t需要修改为上面的{user}值</span>\n  <span class=\"hljs-meta\">spring.datasource.password</span>=<span class=\"hljs-string\">xxx\t\t\t\t\t\t需要修改为上面的{password}值</span>\n</code></pre>\n<ul>\n<li>修改并保存完后，执行 script 目录下的创建表及导入基础数据脚本</li>\n</ul>\n<pre><code class=\"language-shell\">sh script/create-dolphinscheduler.sh\n</code></pre>\n</li>\n</ul>\n<p>​       <em>注意: 如果执行上述脚本报 ”/bin/java: No such file or directory“ 错误，请在/etc/profile下配置  JAVA_HOME 及 PATH 变量</em></p>\n<h1>6、修改运行参数</h1>\n<ul>\n<li>\n<p>修改 conf/env 目录下的 <code>dolphinscheduler_env.sh</code> 环境变量(以相关用到的软件都安装在/opt/soft下为例)</p>\n<pre><code class=\"language-shell\">    export HADOOP_HOME=/opt/soft/hadoop\n    export HADOOP_CONF_DIR=/opt/soft/hadoop/etc/hadoop\n    #export SPARK_HOME1=/opt/soft/spark1\n    export SPARK_HOME2=/opt/soft/spark2\n    export PYTHON_HOME=/opt/soft/python\n    export JAVA_HOME=/opt/soft/java\n    export HIVE_HOME=/opt/soft/hive\n    export FLINK_HOME=/opt/soft/flink\n    export DATAX_HOME=/opt/soft/datax/bin/datax.py\n    export PATH=$HADOOP_HOME/bin:$SPARK_HOME2/bin:$PYTHON_HOME:$JAVA_HOME/bin:$HIVE_HOME/bin:$PATH:$FLINK_HOME/bin:$DATAX_HOME:$PATH\n\n    ```\n\n `注: 这一步非常重要,例如 JAVA_HOME 和 PATH 是必须要配置的，没有用到的可以忽略或者注释掉`\n\n\n\n</code></pre>\n</li>\n<li>\n<p>将jdk软链到/usr/bin/java下(仍以 JAVA_HOME=/opt/soft/java 为例)</p>\n<pre><code class=\"language-shell\">sudo ln -s /opt/soft/java/bin/java /usr/bin/java\n</code></pre>\n</li>\n<li>\n<p>修改一键部署配置文件 <code>conf/config/install_config.conf</code>中的各参数，特别注意以下参数的配置</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 这里填 mysql or postgresql</span>\ndbtype=\"mysql\"\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 数据库连接地址</span>\ndbhost=\"192.168.xx.xx:3306\"\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 数据库名</span>\ndbname=\"dolphinscheduler\"\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 数据库用户名，此处需要修改为上面设置的{user}具体值</span>\nusername=\"xxx\"\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 数据库密码, 如果有特殊字符，请使用\\转义，需要修改为上面设置的{password}具体值</span>\npassword=\"xxx\"\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\">Zookeeper地址</span>\nzkQuorum=\"192.168.xx.xx:2181,192.168.xx.xx:2181,192.168.xx.xx:2181\"\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\">将DS安装到哪个目录，如: /opt/soft/dolphinscheduler，不同于现在的目录</span>\ninstallPath=\"/opt/soft/dolphinscheduler\"\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\">使用哪个用户部署，使用第3节创建的用户</span>\ndeployUser=\"dolphinscheduler\"\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 邮件配置，以qq邮箱为例</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> 邮件协议</span>\nmailProtocol=\"SMTP\"\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 邮件服务地址</span>\nmailServerHost=\"smtp.qq.com\"\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 邮件服务端口</span>\nmailServerPort=\"25\"\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> mailSender和mailUser配置成一样即可</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> 发送者</span>\nmailSender=\"xxx@qq.com\"\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 发送用户</span>\nmailUser=\"xxx@qq.com\"\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 邮箱密码</span>\nmailPassword=\"xxx\"\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> TLS协议的邮箱设置为<span class=\"hljs-literal\">true</span>，否则设置为<span class=\"hljs-literal\">false</span></span>\nstarttlsEnable=\"true\"\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 开启SSL协议的邮箱配置为<span class=\"hljs-literal\">true</span>，否则为<span class=\"hljs-literal\">false</span>。注意: starttlsEnable和sslEnable不能同时为<span class=\"hljs-literal\">true</span></span>\nsslEnable=\"false\"\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 邮件服务地址值，参考上面 mailServerHost</span>\nsslTrust=\"smtp.qq.com\"\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 业务用到的比如sql等资源文件上传到哪里，可以设置：HDFS,S3,NONE，单机如果想使用本地文件系统，请配置为HDFS，因为HDFS支持本地文件系统；如果不需要资源上传功能请选择NONE。强调一点：使用本地文件系统不需要部署hadoop</span>\nresourceStorageType=\"HDFS\"\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\">如果上传资源保存想保存在hadoop上，hadoop集群的NameNode启用了HA的话，需要将hadoop的配置文件core-site.xml和hdfs-site.xml放到安装路径的conf目录下，本例即是放到/opt/soft/dolphinscheduler/conf下面，并配置namenode cluster名称；如果NameNode不是HA,则只需要将mycluster修改为具体的ip或者主机名即可</span>\ndefaultFS=\"hdfs://mycluster:8020\"\n<span class=\"hljs-meta\">\n\n#</span><span class=\"bash\"> 如果没有使用到Yarn,保持以下默认值即可;如果ResourceManager是HA，则配置为ResourceManager节点的主备ip或者hostname,比如<span class=\"hljs-string\">\"192.168.xx.xx,192.168.xx.xx\"</span>;如果是单ResourceManager请配置yarnHaIps=<span class=\"hljs-string\">\"\"</span>即可</span>\nyarnHaIps=\"192.168.xx.xx,192.168.xx.xx\"\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 如果ResourceManager是HA或者没有使用到Yarn保持默认值即可；如果是单ResourceManager，请配置真实的ResourceManager主机名或者ip</span>\nsingleYarnIp=\"yarnIp1\"\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 资源上传根路径,主持HDFS和S3,由于hdfs支持本地文件系统，需要确保本地文件夹存在且有读写权限</span>\nresourceUploadPath=\"/data/dolphinscheduler\"\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 具备权限创建resourceUploadPath的用户</span>\nhdfsRootUser=\"hdfs\"\n<span class=\"hljs-meta\">\n\n\n#</span><span class=\"bash\">在哪些机器上部署DS服务，本机选localhost</span>\nips=\"ds1,ds2,ds3,ds4\"\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\">ssh端口,默认22</span>\nsshPort=\"22\"\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\">master服务部署在哪台机器上</span>\nmasters=\"ds1,ds2\"\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\">worker服务部署在哪台机器上,并指定此worker属于哪一个worker组,下面示例的default即为组名</span>\nworkers=\"ds3:default,ds4:default\"\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\">报警服务部署在哪台机器上</span>\nalertServer=\"ds2\"\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\">后端api服务部署在在哪台机器上</span>\napiServers=\"ds1\"\n\n</code></pre>\n<p><em>特别注意：</em></p>\n<ul>\n<li>如果需要用资源上传到Hadoop集群功能， 并且Hadoop集群的NameNode 配置了 HA的话 ，需要开启 HDFS类型的资源上传，同时需要将Hadoop集群下的core-site.xml和hdfs-site.xml复制到/opt/dolphinscheduler/conf，非NameNode HA跳过次步骤</li>\n</ul>\n</li>\n</ul>\n<h1>7、一键部署</h1>\n<ul>\n<li>\n<p>切换到部署用户dolphinscheduler，然后执行一键部署脚本</p>\n<p><code>sh install.sh</code></p>\n<pre><code>注意：\n第一次部署的话，在运行中第3步`3,stop server`出现5次以下信息，此信息可以忽略\nsh: bin/dolphinscheduler-daemon.sh: No such file or directory\n</code></pre>\n</li>\n<li>\n<p>脚本完成后，会启动以下5个服务，使用<code>jps</code>命令查看服务是否启动(<code>jps</code>为<code>java JDK</code>自带)</p>\n</li>\n</ul>\n<pre><code class=\"language-aidl\">    MasterServer         ----- master服务\n    WorkerServer         ----- worker服务\n    LoggerServer         ----- logger服务\n    ApiApplicationServer ----- api服务\n    AlertServer          ----- alert服务\n</code></pre>\n<p>如果以上服务都正常启动，说明自动部署成功</p>\n<p>部署成功后，可以进行日志查看，日志统一存放于logs文件夹内</p>\n<pre><code class=\"language-日志路径\"> logs/\n    ├── dolphinscheduler-alert-server.log\n    ├── dolphinscheduler-master-server.log\n    |—— dolphinscheduler-worker-server.log\n    |—— dolphinscheduler-api-server.log\n    |—— dolphinscheduler-logger-server.log\n</code></pre>\n<h1>8、登录系统</h1>\n<ul>\n<li>\n<p>访问前端页面地址,接口ip(自行修改)\n<a href=\"http://192.168.xx.xx:12345/dolphinscheduler\">http://192.168.xx.xx:12345/dolphinscheduler</a></p>\n <p align=\"center\">\n   <img src=\"/img/login.png\" width=\"60%\" />\n </p>\n</li>\n</ul>\n<h1>9、启停服务</h1>\n<ul>\n<li>\n<p>一键停止集群所有服务</p>\n<p><code>sh ./bin/stop-all.sh</code></p>\n</li>\n<li>\n<p>一键开启集群所有服务</p>\n<p><code>sh ./bin/start-all.sh</code></p>\n</li>\n<li>\n<p>启停Master</p>\n</li>\n</ul>\n<pre><code class=\"language-shell\">sh ./bin/dolphinscheduler-daemon.sh start master-server\nsh ./bin/dolphinscheduler-daemon.sh stop master-server\n</code></pre>\n<ul>\n<li>启停Worker</li>\n</ul>\n<pre><code class=\"language-shell\">sh ./bin/dolphinscheduler-daemon.sh start worker-server\nsh ./bin/dolphinscheduler-daemon.sh stop worker-server\n</code></pre>\n<ul>\n<li>启停Api</li>\n</ul>\n<pre><code class=\"language-shell\">sh ./bin/dolphinscheduler-daemon.sh start api-server\nsh ./bin/dolphinscheduler-daemon.sh stop api-server\n</code></pre>\n<ul>\n<li>启停Logger</li>\n</ul>\n<pre><code class=\"language-shell\">sh ./bin/dolphinscheduler-daemon.sh start logger-server\nsh ./bin/dolphinscheduler-daemon.sh stop logger-server\n</code></pre>\n<ul>\n<li>启停Alert</li>\n</ul>\n<pre><code class=\"language-shell\">sh ./bin/dolphinscheduler-daemon.sh start alert-server\nsh ./bin/dolphinscheduler-daemon.sh stop alert-server\n</code></pre>\n<p><code>注：服务用途请具体参见《系统架构设计》小节</code></p>\n<hr>\n<h3>附录：</h3>\n<ul>\n<li>\n<p>如果您需要使用到企业微信进行告警，请在安装完成后，修改 alert.properties 文件，然后重启 alert 服务即可：</p>\n<pre><code># 设置企业微信告警功能是否开启：开启为 true，否则为 false。\nenterprise.wechat.enable=&quot;true&quot;\n</code></pre>\n<pre><code># 设置 corpid，每个企业都拥有唯一的 corpid，获取此信息可在管理后台“我的企业”－“企业信息”下查看“企业 ID”（需要有管理员权限）\nenterprise.wechat.corp.id=&quot;xxx&quot;\n</code></pre>\n <p align=\"center\">\n   <img src=\"/img/alert/corpid.png\" width=\"60%\" />\n </p>\n<pre><code># 设置 secret，secret 是企业应用里面用于保障数据安全的“钥匙”，每一个应用都有一个独立的访问密钥。\nenterprise.wechat.secret=&quot;xxx&quot;\n</code></pre>\n <p align=\"center\">\n  <img src=\"/img/alert/secret.png\" width=\"60%\" />\n </p>\n<pre><code># 设置 agentid，每个应用都有唯一的 agentid。在管理后台-&gt;“应用与小程序”-&gt;“应用”，点进某个应用，即可看到 agentid。\nenterprise.wechat.agent.id=&quot;xxxx&quot;\n</code></pre>\n<p align=\"center\">\n <img src=\"/img/alert/agentid.png\" width=\"60%\" />\n</p>\n<pre><code># 设置 userid，多个用逗号分隔。每个成员都有唯一的 userid，即所谓“帐号”。在管理后台-&gt;“通讯录”-&gt;点进某个成员的详情页，可以看到。\nenterprise.wechat.users=zhangsan,lisi\n</code></pre>\n   <p align=\"center\">\n    <img src=\"/img/alert/userid.png\" width=\"60%\" />\n   </p>\n<pre><code># 获取 access_token 的地址，使用如下例子无需修改。\nenterprise.wechat.token.url=https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid={corpId}&amp;corpsecret={secret}\n\n# 发送应用消息地址，使用如下例子无需改动。\nenterprise.wechat.push.url=https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token={token}\n\n#发送消息格式，无需改动\nenterprise.wechat.user.send.msg={\\&quot;touser\\&quot;:\\&quot;{toUser}\\&quot;,\\&quot;agentid\\&quot;:\\&quot;{agentId}\\&quot;,\\&quot;msgtype\\&quot;:\\&quot;markdown\\&quot;,\\&quot;markdown\\&quot;:{\\&quot;content\\&quot;:\\&quot;{msg}\\&quot;}}\n</code></pre>\n</li>\n<li>\n<p>关于dolphinscheduler 在运行过程中，网卡使用说明：</p>\n<blockquote>\n<p>master服务，worker服务在zookeeper注册时，会以ip:port的形式创建相关信息。</p>\n</blockquote>\n<p>在明确通信网卡情况下，可以指定网卡名称的方式获取ip地址，配置方式是在<code>common.properties</code>中修改配置：</p>\n<pre><code>dolphin.scheduler.network.interface.preferred=eth0\n</code></pre>\n<p>如linux系统通过<code>ifconfig</code>命令查看网络信息,以下图为例，配置eth0就是使用图中eth0的网卡作为通信网卡：</p>\n   <p align=\"center\">\n        <img src=\"/img/network/network_config.png\" width=\"60%\" />\n   </p>\n<p>还可以使用dolphinscheduler提供的三种策略，获取可用ip：</p>\n<ol>\n<li>default: 优先获取内网网卡获取ip地址，其次获取外网网卡获取ip地址，在前两项失效情况下，使用第一块可用网卡的地址。</li>\n<li>inner: 使用内网网卡获取ip地址，如果获取失败抛出异常信息。</li>\n<li>outter: 使用外网网卡获取ip地址，如果获取失败抛出异常信息。</li>\n</ol>\n<p>配置方式是在<code>common.properties</code>中修改相关配置：</p>\n<pre><code> # Network IP gets priority, default inner outer\n #dolphin.scheduler.network.priority.strategy=default\n</code></pre>\n<p>以上配置修改后重启服务生效。</p>\n</li>\n</ul>\n",
  "link": "/zh-cn/docs/1.3.4/user_doc/cluster-deployment.html",
  "meta": {}
}