{
  "filename": "system-manual.md",
  "__html": "<h1>系统使用手册</h1>\n<h2>快速上手</h2>\n<blockquote>\n<p>请参照<a href=\"quick-start.html\">快速上手</a></p>\n</blockquote>\n<h2>操作指南</h2>\n<h3>创建项目</h3>\n<ul>\n<li>点击“项目管理-&gt;创建项目”，输入项目名称，项目描述，点击“提交”，创建新的项目。</li>\n<li>点击项目名称，进入项目首页。</li>\n</ul>\n<p align=\"center\">\n   <img src=\"/img/project.png\" width=\"60%\" />\n </p>\n<blockquote>\n<p>项目首页其中包含任务状态统计，流程状态统计、工作流定义统计</p>\n</blockquote>\n<ul>\n<li>任务状态统计：是指在指定时间范围内，统计任务实例中的待运行、失败、运行中、完成、成功的个数</li>\n<li>流程状态统计：是指在指定时间范围内，统计工作流实例中的待运行、失败、运行中、完成、成功的个数</li>\n<li>工作流定义统计：是统计该用户创建的工作流定义及管理员授予该用户的工作流定义</li>\n</ul>\n<h3>创建工作流定义</h3>\n<ul>\n<li>进入项目首页，点击“工作流定义”，进入工作流定义列表页。</li>\n<li>点击“创建工作流”,创建新的工作流定义。</li>\n<li>拖拽“SHELL&quot;节点到画布，新增一个Shell任务。</li>\n<li>填写”节点名称“，”描述“，”脚本“字段。</li>\n<li>选择“任务优先级”，级别高的任务在执行队列中会优先执行，相同优先级的任务按照先进先出的顺序执行。</li>\n<li>超时告警， 填写”超时时长“，当任务执行时间超过<strong>超时时长</strong>可以告警并且超时失败。</li>\n<li>填写&quot;自定义参数&quot;,参考<a href=\"#%E7%94%A8%E6%88%B7%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8F%82%E6%95%B0\">自定义参数</a></li>\n</ul>\n<p align=\"center\">\n   <img src=\"/img/dag1.png\" width=\"60%\" />\n </p>\n<ul>\n<li>增加节点之间执行的先后顺序： 点击”线条连接“；如图示，任务1和任务3并行执行，当任务1执行完，任务2、3会同时执行。</li>\n</ul>\n<p align=\"center\">\n   <img src=\"/img/dag2.png\" width=\"60%\" />\n </p>\n<ul>\n<li>删除依赖关系： 点击箭头图标”拖动节点和选中项“，选中连接线，点击删除图标，删除节点间依赖关系。</li>\n</ul>\n<p align=\"center\">\n   <img src=\"/img/dag3.png\" width=\"60%\" />\n </p>\n<ul>\n<li>点击”保存“，输入工作流定义名称，工作流定义描述，设置全局参数,参考<a href=\"#%E7%94%A8%E6%88%B7%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8F%82%E6%95%B0\">自定义参数</a>。</li>\n</ul>\n<p align=\"center\">\n   <img src=\"/img/dag4.png\" width=\"60%\" />\n </p>\n<ul>\n<li>其他类型节点，请参考 <a href=\"#%E4%BB%BB%E5%8A%A1%E8%8A%82%E7%82%B9%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%8F%82%E6%95%B0%E8%AE%BE%E7%BD%AE\">任务节点类型和参数设置</a></li>\n</ul>\n<h3>执行工作流定义</h3>\n<ul>\n<li><strong>未上线状态的工作流定义可以编辑，但是不可以运行</strong>，所以先上线工作流</li>\n</ul>\n<blockquote>\n<p>点击工作流定义，返回工作流定义列表，点击”上线“图标，上线工作流定义。</p>\n</blockquote>\n<blockquote>\n<p>下线工作流定义的时候，要先将定时管理中的定时任务下线，这样才能成功下线工作流定义</p>\n</blockquote>\n<ul>\n<li>点击”运行“，执行工作流。运行参数说明：\n<ul>\n<li>失败策略：<strong>当某一个任务节点执行失败时，其他并行的任务节点需要执行的策略</strong>。”继续“表示：其他任务节点正常执行，”结束“表示：终止所有正在执行的任务，并终止整个流程。</li>\n<li>通知策略：当流程结束，根据流程状态发送流程执行信息通知邮件。</li>\n<li>流程优先级：流程运行的优先级，分五个等级：最高（HIGHEST），高(HIGH),中（MEDIUM）,低（LOW），最低（LOWEST）。级别高的流程在执行队列中会优先执行，相同优先级的流程按照先进先出的顺序执行。</li>\n<li>worker分组： 这个流程只能在指定的机器组里执行。默认是Default，可以在任一worker上执行。</li>\n<li>通知组： 当流程结束，或者发生容错时，会发送流程信息邮件到通知组里所有成员。</li>\n<li>收件人：输入邮箱后按回车键保存。当流程结束、发生容错时，会发送告警邮件到收件人列表。</li>\n<li>抄送人：输入邮箱后按回车键保存。当流程结束、发生容错时，会抄送告警邮件到抄送人列表。</li>\n</ul>\n</li>\n</ul>\n  <p align=\"center\">\n   <img src=\"/img/run-work.png\" width=\"60%\" />\n </p>\n<ul>\n<li>补数： 执行指定日期的工作流定义，可以选择补数时间范围（目前只支持针对连续的天进行补数)，比如要补5月1号到5月10号的数据，如图示：</li>\n</ul>\n<p align=\"center\">\n   <img src=\"/img/complement.png\" width=\"60%\" />\n </p>\n<blockquote>\n<p>补数执行模式有<strong>串行执行、并行执行</strong>，串行模式下，补数会从5月1号到5月10号依次执行；并行模式下，会同时执行5月1号到5月10号的任务。</p>\n</blockquote>\n<h3>定时工作流定义</h3>\n<ul>\n<li>创建定时：&quot;工作流定义-&gt;定时”</li>\n<li>选择起止时间，在起止时间范围内，定时正常工作，超过范围，就不会再继续产生定时工作流实例了。</li>\n</ul>\n<p align=\"center\">\n   <img src=\"/img/time-schedule.png\" width=\"60%\" />\n </p>\n<ul>\n<li>添加一个每天凌晨5点执行一次的定时，如图示：</li>\n</ul>\n<p align=\"center\">\n   <img src=\"/img/time-schedule2.png\" width=\"60%\" />\n </p>\n<ul>\n<li>定时上线，<strong>新创建的定时是下线状态，需要点击“定时管理-&gt;上线”，定时才能正常工作</strong>。</li>\n</ul>\n<h3>查看工作流实例</h3>\n<blockquote>\n<p>点击“工作流实例”，查看工作流实例列表。</p>\n</blockquote>\n<blockquote>\n<p>点击工作流名称，查看任务执行状态。</p>\n</blockquote>\n  <p align=\"center\">\n   <img src=\"/img/instance-detail.png\" width=\"60%\" />\n </p>\n<blockquote>\n<p>点击任务节点，点击“查看日志”，查看任务执行日志。</p>\n</blockquote>\n  <p align=\"center\">\n   <img src=\"/img/task-log.png\" width=\"60%\" />\n </p>\n<blockquote>\n<p>点击任务实例节点，点击<strong>查看历史</strong>，可以查看该工作流实例运行的该任务实例列表</p>\n</blockquote>\n <p align=\"center\">\n    <img src=\"/img/task_history.png\" width=\"60%\" />\n  </p>\n<blockquote>\n<p>对工作流实例的操作：</p>\n</blockquote>\n<p align=\"center\">\n   <img src=\"/img/instance-list.png\" width=\"60%\" />\n</p>\n<ul>\n<li>编辑：可以对已经终止的流程进行编辑，编辑后保存的时候，可以选择是否更新到工作流定义。</li>\n<li>重跑：可以对已经终止的流程进行重新执行。</li>\n<li>恢复失败：针对失败的流程，可以执行恢复失败操作，从失败的节点开始执行。</li>\n<li>停止：对正在运行的流程进行<strong>停止</strong>操作，后台会先对worker进程<code>kill</code>,再执行<code>kill -9</code>操作</li>\n<li>暂停：可以对正在运行的流程进行<strong>暂停</strong>操作，系统状态变为<strong>等待执行</strong>，会等待正在执行的任务结束，暂停下一个要执行的任务。</li>\n<li>恢复暂停：可以对暂停的流程恢复，直接从<strong>暂停的节点</strong>开始运行</li>\n<li>删除：删除工作流实例及工作流实例下的任务实例</li>\n<li>甘特图：Gantt图纵轴是某个工作流实例下的任务实例的拓扑排序，横轴是任务实例的运行时间,如图示：</li>\n</ul>\n<p align=\"center\">\n   <img src=\"/img/gant-pic.png\" width=\"60%\" />\n</p>\n<h3>查看任务实例</h3>\n<blockquote>\n<p>点击“任务实例”，进入任务列表页，查询任务执行情况</p>\n</blockquote>\n<p align=\"center\">\n   <img src=\"/img/task-list.png\" width=\"60%\" />\n</p>\n<blockquote>\n<p>点击操作列中的“查看日志”，可以查看任务执行的日志情况。</p>\n</blockquote>\n<p align=\"center\">\n   <img src=\"/img/task-log2.png\" width=\"60%\" />\n</p>\n<h3>创建数据源</h3>\n<blockquote>\n<p>数据源中心支持MySQL、POSTGRESQL、HIVE及Spark等数据源</p>\n</blockquote>\n<h4>创建、编辑MySQL数据源</h4>\n<ul>\n<li>\n<p>点击“数据源中心-&gt;创建数据源”，根据需求创建不同类型的数据源。</p>\n</li>\n<li>\n<p>数据源：选择MYSQL</p>\n</li>\n<li>\n<p>数据源名称：输入数据源的名称</p>\n</li>\n<li>\n<p>描述：输入数据源的描述</p>\n</li>\n<li>\n<p>IP/主机名：输入连接MySQL的IP</p>\n</li>\n<li>\n<p>端口：输入连接MySQL的端口</p>\n</li>\n<li>\n<p>用户名：设置连接MySQL的用户名</p>\n</li>\n<li>\n<p>密码：设置连接MySQL的密码</p>\n</li>\n<li>\n<p>数据库名：输入连接MySQL的数据库名称</p>\n</li>\n<li>\n<p>Jdbc连接参数：用于MySQL连接的参数设置，以JSON形式填写</p>\n</li>\n</ul>\n<p align=\"center\">\n   <img src=\"/img/mysql_edit.png\" width=\"60%\" />\n </p>\n<blockquote>\n<p>点击“测试连接”，测试数据源是否可以连接成功。</p>\n</blockquote>\n<h4>创建、编辑POSTGRESQL数据源</h4>\n<ul>\n<li>数据源：选择POSTGRESQL</li>\n<li>数据源名称：输入数据源的名称</li>\n<li>描述：输入数据源的描述</li>\n<li>IP/主机名：输入连接POSTGRESQL的IP</li>\n<li>端口：输入连接POSTGRESQL的端口</li>\n<li>用户名：设置连接POSTGRESQL的用户名</li>\n<li>密码：设置连接POSTGRESQL的密码</li>\n<li>数据库名：输入连接POSTGRESQL的数据库名称</li>\n<li>Jdbc连接参数：用于POSTGRESQL连接的参数设置，以JSON形式填写</li>\n</ul>\n<p align=\"center\">\n   <img src=\"/img/postgresql_edit.png\" width=\"60%\" />\n </p>\n<h4>创建、编辑HIVE数据源</h4>\n<p>1.使用HiveServer2方式连接</p>\n <p align=\"center\">\n    <img src=\"/img/hive_edit.png\" width=\"60%\" />\n  </p>\n<ul>\n<li>数据源：选择HIVE</li>\n<li>数据源名称：输入数据源的名称</li>\n<li>描述：输入数据源的描述</li>\n<li>IP/主机名：输入连接HIVE的IP</li>\n<li>端口：输入连接HIVE的端口</li>\n<li>用户名：设置连接HIVE的用户名</li>\n<li>密码：设置连接HIVE的密码</li>\n<li>数据库名：输入连接HIVE的数据库名称</li>\n<li>Jdbc连接参数：用于HIVE连接的参数设置，以JSON形式填写</li>\n</ul>\n<p>2.使用HiveServer2 HA Zookeeper方式连接</p>\n <p align=\"center\">\n    <img src=\"/img/hive_edit2.png\" width=\"60%\" />\n  </p>\n<p>注意：如果开启了<strong>kerberos</strong>，则需要填写 <strong>Principal</strong></p>\n<p align=\"center\">\n    <img src=\"/img/hive_kerberos.png\" width=\"60%\" />\n  </p>\n<h4>创建、编辑Spark数据源</h4>\n<p align=\"center\">\n   <img src=\"/img/spark_datesource.png\" width=\"60%\" />\n </p>\n<ul>\n<li>数据源：选择Spark</li>\n<li>数据源名称：输入数据源的名称</li>\n<li>描述：输入数据源的描述</li>\n<li>IP/主机名：输入连接Spark的IP</li>\n<li>端口：输入连接Spark的端口</li>\n<li>用户名：设置连接Spark的用户名</li>\n<li>密码：设置连接Spark的密码</li>\n<li>数据库名：输入连接Spark的数据库名称</li>\n<li>Jdbc连接参数：用于Spark连接的参数设置，以JSON形式填写</li>\n</ul>\n<p>注意：如果开启了<strong>kerberos</strong>，则需要填写 <strong>Principal</strong></p>\n<p align=\"center\">\n    <img src=\"/img/sparksql_kerberos.png\" width=\"60%\" />\n  </p>\n<h3>上传资源</h3>\n<ul>\n<li>上传资源文件和udf函数，所有上传的文件和资源都会被存储到hdfs上，所以需要以下配置项：</li>\n</ul>\n<pre><code>conf/common/common.properties\n    -- hdfs.startup.state=true\nconf/common/hadoop.properties  \n    -- fs.defaultFS=hdfs://xxxx:8020  \n    -- yarn.resourcemanager.ha.rm.ids=192.168.xx.xx,192.168.xx.xx\n    -- yarn.application.status.address=http://xxxx:8088/ws/v1/cluster/apps/%s\n</code></pre>\n<h4>文件管理</h4>\n<blockquote>\n<p>是对各种资源文件的管理，包括创建基本的txt/log/sh/conf等文件、上传jar包等各种类型文件，以及编辑、下载、删除等操作。</p>\n</blockquote>\n  <p align=\"center\">\n   <img src=\"/img/file-manage.png\" width=\"60%\" />\n </p>\n<ul>\n<li>创建文件</li>\n</ul>\n<blockquote>\n<p>文件格式支持以下几种类型：txt、log、sh、conf、cfg、py、java、sql、xml、hql</p>\n</blockquote>\n<p align=\"center\">\n   <img src=\"/img/file_create.png\" width=\"60%\" />\n </p>\n<ul>\n<li>上传文件</li>\n</ul>\n<blockquote>\n<p>上传文件：点击上传按钮进行上传，将文件拖拽到上传区域，文件名会自动以上传的文件名称补全</p>\n</blockquote>\n<p align=\"center\">\n   <img src=\"/img/file_upload.png\" width=\"60%\" />\n </p>\n<ul>\n<li>文件查看</li>\n</ul>\n<blockquote>\n<p>对可查看的文件类型，点击 文件名称 可以查看文件详情</p>\n</blockquote>\n<p align=\"center\">\n   <img src=\"/img/file_detail.png\" width=\"60%\" />\n </p>\n<ul>\n<li>下载文件</li>\n</ul>\n<blockquote>\n<p>可以在 文件详情 中点击右上角下载按钮下载文件，或者在文件列表后的下载按钮下载文件</p>\n</blockquote>\n<ul>\n<li>文件重命名</li>\n</ul>\n<p align=\"center\">\n   <img src=\"/img/file_rename.png\" width=\"60%\" />\n </p>\n<h4>删除</h4>\n<blockquote>\n<p>文件列表-&gt;点击&quot;删除&quot;按钮，删除指定文件</p>\n</blockquote>\n<h4>资源管理</h4>\n<blockquote>\n<p>资源管理和文件管理功能类似，不同之处是资源管理是上传的UDF函数，文件管理上传的是用户程序，脚本及配置文件</p>\n</blockquote>\n<ul>\n<li>上传udf资源</li>\n</ul>\n<blockquote>\n<p>和上传文件相同。</p>\n</blockquote>\n<h4>函数管理</h4>\n<ul>\n<li>创建udf函数</li>\n</ul>\n<blockquote>\n<p>点击“创建UDF函数”，输入udf函数参数，选择udf资源，点击“提交”，创建udf函数。</p>\n</blockquote>\n<blockquote>\n<p>目前只支持HIVE的临时UDF函数</p>\n</blockquote>\n<ul>\n<li>UDF函数名称：输入UDF函数时的名称</li>\n<li>包名类名：输入UDF函数的全路径</li>\n<li>参数：用来标注函数的输入参数</li>\n<li>数据库名：预留字段，用于创建永久UDF函数</li>\n<li>UDF资源：设置创建的UDF对应的资源文件</li>\n</ul>\n<p align=\"center\">\n   <img src=\"/img/udf_edit.png\" width=\"60%\" />\n </p>\n<h2>安全中心（权限系统）</h2>\n<ul>\n<li>安全中心是只有管理员账户才有权限的功能，有队列管理、租户管理、用户管理、告警组管理、worker分组、令牌管理等功能，还可以对资源、数据源、项目等授权</li>\n<li>管理员登录，默认用户名密码：admin/escheduler123</li>\n</ul>\n<h3>创建队列</h3>\n<ul>\n<li>队列是在执行spark、mapreduce等程序，需要用到“队列”参数时使用的。</li>\n<li>“安全中心”-&gt;“队列管理”-&gt;“创建队列”</li>\n</ul>\n <p align=\"center\">\n    <img src=\"/img/create-queue.png\" width=\"60%\" />\n  </p>\n<h3>添加租户</h3>\n<ul>\n<li>租户对应的是Linux的用户，用于worker提交作业所使用的用户。如果linux没有这个用户，worker会在执行脚本的时候创建这个用户。</li>\n<li>租户编码：<strong>租户编码是Linux上的用户，唯一，不能重复</strong></li>\n</ul>\n <p align=\"center\">\n    <img src=\"/img/addtenant.png\" width=\"60%\" />\n  </p>\n<h3>创建普通用户</h3>\n<ul>\n<li>用户分为<strong>管理员用户</strong>和<strong>普通用户</strong></li>\n</ul>\n<pre><code>* 管理员有**授权和用户管理**等权限，没有**创建项目和工作流定义**的操作的权限\n* 普通用户可以**创建项目和对工作流定义的创建，编辑，执行**等操作。\n* 注意：**如果该用户切换了租户，则该用户所在租户下所有资源将复制到切换的新租户下**\n</code></pre>\n<p align=\"center\">\n   <img src=\"/img/useredit2.png\" width=\"60%\" />\n </p>\n<h3>创建告警组</h3>\n<ul>\n<li>告警组是在启动时设置的参数，在流程结束以后会将流程的状态和其他信息以邮件形式发送给告警组。</li>\n</ul>\n<ul>\n<li>新建、编辑告警组</li>\n</ul>\n  <p align=\"center\">\n    <img src=\"/img/mail_edit.png\" width=\"60%\" />\n  </p>\n<h3>创建worker分组</h3>\n<ul>\n<li>worker分组，提供了一种让任务在指定的worker上运行的机制。管理员创建worker分组，在任务节点和运行参数中设置中可以指定该任务运行的worker分组，如果指定的分组被删除或者没有指定分组，则该任务会在任一worker上运行。</li>\n<li>worker分组内多个ip地址（<strong>不能写别名</strong>），以<strong>英文逗号</strong>分隔</li>\n</ul>\n  <p align=\"center\">\n    <img src=\"/img/worker1.png\" width=\"60%\" />\n  </p>\n<h3>令牌管理</h3>\n<ul>\n<li>由于后端接口有登录检查，令牌管理，提供了一种可以通过调用接口的方式对系统进行各种操作。</li>\n<li>调用示例：</li>\n</ul>\n<pre><code class=\"language-令牌调用示例\">    /**\n     * test token\n     */\n    public  void doPOSTParam()throws Exception{\n        // create HttpClient\n        CloseableHttpClient httpclient = HttpClients.createDefault();\n\n        // create http post request\n        HttpPost httpPost = new HttpPost(&quot;http://127.0.0.1:12345/escheduler/projects/create&quot;);\n        httpPost.setHeader(&quot;token&quot;, &quot;123&quot;);\n        // set parameters\n        List&lt;NameValuePair&gt; parameters = new ArrayList&lt;NameValuePair&gt;();\n        parameters.add(new BasicNameValuePair(&quot;projectName&quot;, &quot;qzw&quot;));\n        parameters.add(new BasicNameValuePair(&quot;desc&quot;, &quot;qzw&quot;));\n        UrlEncodedFormEntity formEntity = new UrlEncodedFormEntity(parameters);\n        httpPost.setEntity(formEntity);\n        CloseableHttpResponse response = null;\n        try {\n            // execute\n            response = httpclient.execute(httpPost);\n            // response status code 200\n            if (response.getStatusLine().getStatusCode() == 200) {\n                String content = EntityUtils.toString(response.getEntity(), &quot;UTF-8&quot;);\n                System.out.println(content);\n            }\n        } finally {\n            if (response != null) {\n                response.close();\n            }\n            httpclient.close();\n        }\n    }\n</code></pre>\n<h3>授予权限</h3>\n<ul>\n<li>授予权限包括项目权限，资源权限，数据源权限，UDF函数权限。</li>\n</ul>\n<blockquote>\n<p>管理员可以对普通用户进行非其创建的项目、资源、数据源和UDF函数进行授权。因为项目、资源、数据源和UDF函数授权方式都是一样的，所以以项目授权为例介绍。</p>\n</blockquote>\n<blockquote>\n<p>注意：<strong>对于用户自己创建的项目，该用户拥有所有的权限。则项目列表和已选项目列表中不会体现</strong></p>\n</blockquote>\n<ul>\n<li>1.点击指定人的授权按钮，如下图：</li>\n</ul>\n  <p align=\"center\">\n   <img src=\"/img/auth_user.png\" width=\"60%\" />\n </p>\n<ul>\n<li>2.选中项目按钮，进行项目授权</li>\n</ul>\n<p align=\"center\">\n   <img src=\"/img/auth_project.png\" width=\"60%\" />\n </p>\n<h2>监控中心</h2>\n<h3>服务管理</h3>\n<ul>\n<li>服务管理主要是对系统中的各个服务的健康状况和基本信息的监控和显示</li>\n</ul>\n<h4>master监控</h4>\n<ul>\n<li>主要是master的相关信息。</li>\n</ul>\n<p align=\"center\">\n   <img src=\"/img/master-jk.png\" width=\"60%\" />\n </p>\n<h4>worker监控</h4>\n<ul>\n<li>主要是worker的相关信息。</li>\n</ul>\n<p align=\"center\">\n   <img src=\"/img/worker-jk.png\" width=\"60%\" />\n </p>\n<h4>Zookeeper监控</h4>\n<ul>\n<li>主要是zookpeeper中各个worker和master的相关配置信息。</li>\n</ul>\n<p align=\"center\">\n   <img src=\"/img/zk-jk.png\" width=\"60%\" />\n </p>\n<h4>DB监控</h4>\n<ul>\n<li>主要是DB的健康状况</li>\n</ul>\n<p align=\"center\">\n   <img src=\"/img/mysql-jk.png\" width=\"60%\" />\n </p>\n<h2>任务节点类型和参数设置</h2>\n<h3>Shell节点</h3>\n<ul>\n<li>shell节点，在worker执行的时候，会生成一个临时shell脚本，使用租户同名的linux用户执行这个脚本。</li>\n</ul>\n<blockquote>\n<p>拖动工具栏中的<img src=\"https://analysys.github.io/easyscheduler_docs_cn/images/toolbar_SHELL.png\" alt=\"PNG\">任务节点到画板中，双击任务节点，如下图：</p>\n</blockquote>\n<p align=\"center\">\n   <img src=\"/img/shell_edit.png\" width=\"60%\" />\n </p>\n<ul>\n<li>节点名称：一个工作流定义中的节点名称是唯一的</li>\n<li>运行标志：标识这个节点是否能正常调度,如果不需要执行，可以打开禁止执行开关。</li>\n<li>描述信息：描述该节点的功能</li>\n<li>失败重试次数：任务失败重新提交的次数，支持下拉和手填</li>\n<li>失败重试间隔：任务失败重新提交任务的时间间隔，支持下拉和手填</li>\n<li>脚本：用户开发的SHELL程序</li>\n<li>资源：是指脚本中需要调用的资源文件列表</li>\n<li>自定义参数：是SHELL局部的用户自定义参数，会替换脚本中以${变量}的内容</li>\n</ul>\n<h3>子流程节点</h3>\n<ul>\n<li>子流程节点，就是把外部的某个工作流定义当做一个任务节点去执行。</li>\n</ul>\n<blockquote>\n<p>拖动工具栏中的<img src=\"https://analysys.github.io/easyscheduler_docs_cn/images/toolbar_SUB_PROCESS.png\" alt=\"PNG\">任务节点到画板中，双击任务节点，如下图：</p>\n</blockquote>\n<p align=\"center\">\n   <img src=\"/img/subprocess_edit.png\" width=\"60%\" />\n </p>\n<ul>\n<li>节点名称：一个工作流定义中的节点名称是唯一的</li>\n<li>运行标志：标识这个节点是否能正常调度</li>\n<li>描述信息：描述该节点的功能</li>\n<li>子节点：是选择子流程的工作流定义，右上角进入该子节点可以跳转到所选子流程的工作流定义</li>\n</ul>\n<h3>依赖(DEPENDENT)节点</h3>\n<ul>\n<li>依赖节点，就是<strong>依赖检查节点</strong>。比如A流程依赖昨天的B流程执行成功，依赖节点会去检查B流程在昨天是否有执行成功的实例。</li>\n</ul>\n<blockquote>\n<p>拖动工具栏中的<img src=\"https://analysys.github.io/easyscheduler_docs_cn/images/toolbar_DEPENDENT.png\" alt=\"PNG\">任务节点到画板中，双击任务节点，如下图：</p>\n</blockquote>\n<p align=\"center\">\n   <img src=\"/img/dependent_edit.png\" width=\"60%\" />\n </p>\n<blockquote>\n<p>依赖节点提供了逻辑判断功能，比如检查昨天的B流程是否成功，或者C流程是否执行成功。</p>\n</blockquote>\n  <p align=\"center\">\n   <img src=\"/img/depend-node.png\" width=\"80%\" />\n </p>\n<blockquote>\n<p>例如，A流程为周报任务，B、C流程为天任务，A任务需要B、C任务在上周的每一天都执行成功，如图示：</p>\n</blockquote>\n <p align=\"center\">\n   <img src=\"/img/depend-node2.png\" width=\"80%\" />\n </p>\n<blockquote>\n<p>假如，周报A同时还需要自身在上周二执行成功：</p>\n</blockquote>\n <p align=\"center\">\n   <img src=\"/img/depend-node3.png\" width=\"80%\" />\n </p>\n<h3>存储过程节点</h3>\n<ul>\n<li>根据选择的数据源，执行存储过程。</li>\n</ul>\n<blockquote>\n<p>拖动工具栏中的<img src=\"https://analysys.github.io/easyscheduler_docs_cn/images/toolbar_PROCEDURE.png\" alt=\"PNG\">任务节点到画板中，双击任务节点，如下图：</p>\n</blockquote>\n<p align=\"center\">\n   <img src=\"/img/procedure_edit.png\" width=\"60%\" />\n </p>\n<ul>\n<li>数据源：存储过程的数据源类型支持MySQL和POSTGRESQL两种，选择对应的数据源</li>\n<li>方法：是存储过程的方法名称</li>\n<li>自定义参数：存储过程的自定义参数类型支持IN、OUT两种，数据类型支持VARCHAR、INTEGER、LONG、FLOAT、DOUBLE、DATE、TIME、TIMESTAMP、BOOLEAN九种数据类型</li>\n</ul>\n<h3>SQL节点</h3>\n<ul>\n<li>执行非查询SQL功能</li>\n</ul>\n  <p align=\"center\">\n   <img src=\"/img/sql-node.png\" width=\"60%\" />\n </p>\n<ul>\n<li>执行查询SQL功能，可以选择通过表格和附件形式发送邮件到指定的收件人。</li>\n</ul>\n<blockquote>\n<p>拖动工具栏中的<img src=\"https://analysys.github.io/easyscheduler_docs_cn/images/toolbar_SQL.png\" alt=\"PNG\">任务节点到画板中，双击任务节点，如下图：</p>\n</blockquote>\n<p align=\"center\">\n   <img src=\"/img/sql-node2.png\" width=\"60%\" />\n </p>\n<ul>\n<li>数据源：选择对应的数据源</li>\n<li>sql类型：支持查询和非查询两种，查询是select类型的查询，是有结果集返回的，可以指定邮件通知为表格、附件或表格附件三种模板。非查询是没有结果集返回的，是针对update、delete、insert三种类型的操作</li>\n<li>sql参数：输入参数格式为key1=value1;key2=value2…</li>\n<li>sql语句：SQL语句</li>\n<li>UDF函数：对于HIVE类型的数据源，可以引用资源中心中创建的UDF函数,其他类型的数据源暂不支持UDF函数</li>\n<li>自定义参数：SQL任务类型，而存储过程是自定义参数顺序的给方法设置值自定义参数类型和数据类型同存储过程任务类型一样。区别在于SQL任务类型自定义参数会替换sql语句中${变量}</li>\n</ul>\n<h3>SPARK节点</h3>\n<ul>\n<li>通过SPARK节点，可以直接直接执行SPARK程序，对于spark节点，worker会使用<code>spark-submit</code>方式提交任务</li>\n</ul>\n<blockquote>\n<p>拖动工具栏中的<img src=\"https://analysys.github.io/easyscheduler_docs_cn/images/toolbar_SPARK.png\" alt=\"PNG\">任务节点到画板中，双击任务节点，如下图：</p>\n</blockquote>\n<p align=\"center\">\n   <img src=\"/img/spark_edit.png\" width=\"60%\" />\n </p>\n<ul>\n<li>程序类型：支持JAVA、Scala和Python三种语言</li>\n<li>主函数的class：是Spark程序的入口Main Class的全路径</li>\n<li>主jar包：是Spark的jar包</li>\n<li>部署方式：支持yarn-cluster、yarn-client、和local三种模式</li>\n<li>Driver内核数：可以设置Driver内核数及内存数</li>\n<li>Executor数量：可以设置Executor数量、Executor内存数和Executor内核数</li>\n<li>命令行参数：是设置Spark程序的输入参数，支持自定义参数变量的替换。</li>\n<li>其他参数：支持 --jars、--files、--archives、--conf格式</li>\n<li>资源：如果其他参数中引用了资源文件，需要在资源中选择指定</li>\n<li>自定义参数：是MR局部的用户自定义参数，会替换脚本中以${变量}的内容</li>\n</ul>\n<p>注意：JAVA和Scala只是用来标识，没有区别，如果是Python开发的Spark则没有主函数的class，其他都是一样</p>\n<h3>MapReduce(MR)节点</h3>\n<ul>\n<li>使用MR节点，可以直接执行MR程序。对于mr节点，worker会使用<code>hadoop jar</code>方式提交任务</li>\n</ul>\n<blockquote>\n<p>拖动工具栏中的<img src=\"https://analysys.github.io/easyscheduler_docs_cn/images/toolbar_MR.png\" alt=\"PNG\">任务节点到画板中，双击任务节点，如下图：</p>\n</blockquote>\n<ol>\n<li>JAVA程序</li>\n</ol>\n <p align=\"center\">\n    <img src=\"https://analysys.github.io/easyscheduler_docs_cn/images/mr_java.png\" width=\"60%\" />\n  </p>\n<ul>\n<li>主函数的class：是MR程序的入口Main Class的全路径</li>\n<li>程序类型：选择JAVA语言</li>\n<li>主jar包：是MR的jar包</li>\n<li>命令行参数：是设置MR程序的输入参数，支持自定义参数变量的替换</li>\n<li>其他参数：支持 –D、-files、-libjars、-archives格式</li>\n<li>资源： 如果其他参数中引用了资源文件，需要在资源中选择指定</li>\n<li>自定义参数：是MR局部的用户自定义参数，会替换脚本中以${变量}的内容</li>\n</ul>\n<ol start=\"2\">\n<li>Python程序</li>\n</ol>\n<p align=\"center\">\n   <img src=\"/img/mr_edit.png\" width=\"60%\" />\n </p>\n<ul>\n<li>程序类型：选择Python语言</li>\n<li>主jar包：是运行MR的Python jar包</li>\n<li>其他参数：支持 –D、-mapper、-reducer、-input  -output格式，这里可以设置用户自定义参数的输入，比如：</li>\n<li>-mapper  &quot;<a href=\"http://mapper.py\">mapper.py</a> 1&quot;  -file <a href=\"http://mapper.py\">mapper.py</a>   -reducer <a href=\"http://reducer.py\">reducer.py</a>  -file <a href=\"http://reducer.py\">reducer.py</a> –input /journey/words.txt -output /journey/out/mr/${currentTimeMillis}</li>\n<li>其中 -mapper 后的 <a href=\"http://mapper.py\">mapper.py</a> 1是两个参数，<a href=\"http://xn--mapper-9m7iglm85bf76bbzbb87i.py\">第一个参数是mapper.py</a>，第二个参数是1</li>\n<li>资源： 如果其他参数中引用了资源文件，需要在资源中选择指定</li>\n<li>自定义参数：是MR局部的用户自定义参数，会替换脚本中以${变量}的内容</li>\n</ul>\n<h3>Python节点</h3>\n<ul>\n<li>使用python节点，可以直接执行python脚本，对于python节点，worker会使用<code>python **</code>方式提交任务。</li>\n</ul>\n<blockquote>\n<p>拖动工具栏中的<img src=\"https://analysys.github.io/easyscheduler_docs_cn/images/toolbar_PYTHON.png\" alt=\"PNG\">任务节点到画板中，双击任务节点，如下图：</p>\n</blockquote>\n<p align=\"center\">\n   <img src=\"/img/python_edit.png\" width=\"60%\" />\n </p>\n<ul>\n<li>脚本：用户开发的Python程序</li>\n<li>资源：是指脚本中需要调用的资源文件列表</li>\n<li>自定义参数：是Python局部的用户自定义参数，会替换脚本中以${变量}的内容</li>\n</ul>\n<h3>系统参数</h3>\n<table>\n    <tr><th>变量</th><th>含义</th></tr>\n    <tr>\n        <td>${system.biz.date}</td>\n        <td>日常调度实例定时的定时时间前一天，格式为 yyyyMMdd，补数据时，该日期 +1</td>\n    </tr>\n    <tr>\n        <td>${system.biz.curdate}</td>\n        <td>日常调度实例定时的定时时间，格式为 yyyyMMdd，补数据时，该日期 +1</td>\n    </tr>\n    <tr>\n        <td>${system.datetime}</td>\n        <td>日常调度实例定时的定时时间，格式为 yyyyMMddHHmmss，补数据时，该日期 +1</td>\n    </tr>\n</table>\n<h3>时间自定义参数</h3>\n<blockquote>\n<p>支持代码中自定义变量名，声明方式：${变量名}。可以是引用 &quot;系统参数&quot; 或指定 &quot;常量&quot;。</p>\n</blockquote>\n<blockquote>\n<p>我们定义这种基准变量为 [...] 格式的，[yyyyMMddHHmmss] 是可以任意分解组合的，比如：$[yyyyMMdd], $[HHmmss], $[yyyy-MM-dd] 等</p>\n</blockquote>\n<blockquote>\n<p>也可以这样：</p>\n</blockquote>\n<ul>\n<li>后 N 年：$[add_months(yyyyMMdd,12*N)]</li>\n<li>前 N 年：$[add_months(yyyyMMdd,-12*N)]</li>\n<li>后 N 月：$[add_months(yyyyMMdd,N)]</li>\n<li>前 N 月：$[add_months(yyyyMMdd,-N)]</li>\n<li>后 N 周：$[yyyyMMdd+7*N]</li>\n<li>前 N 周：$[yyyyMMdd-7*N]</li>\n<li>后 N 天：$[yyyyMMdd+N]</li>\n<li>前 N 天：$[yyyyMMdd-N]</li>\n<li>后 N 小时：$[HHmmss+N/24]</li>\n<li>前 N 小时：$[HHmmss-N/24]</li>\n<li>后 N 分钟：$[HHmmss+N/24/60]</li>\n<li>前 N 分钟：$[HHmmss-N/24/60]</li>\n</ul>\n<h3>用户自定义参数</h3>\n<blockquote>\n<p>用户自定义参数分为全局参数和局部参数。全局参数是保存工作流定义和工作流实例的时候传递的全局参数，全局参数可以在整个流程中的任何一个任务节点的局部参数引用。</p>\n</blockquote>\n<blockquote>\n<p>例如：</p>\n</blockquote>\n<p align=\"center\">\n   <img src=\"/img/local_parameter.png\" width=\"60%\" />\n </p>\n<blockquote>\n<p>global_bizdate为全局参数，引用的是系统参数。</p>\n</blockquote>\n<p align=\"center\">\n   <img src=\"/img/global_parameter.png\" width=\"60%\" />\n </p>\n<blockquote>\n<p>任务中local_param_bizdate通过{global_bizdate}来引用全局参数，对于脚本可以通过{local_param_bizdate}来引用变量local_param_bizdate的值，或通过JDBC直接将local_param_bizdate的值set进去</p>\n</blockquote>\n",
  "link": "/zh-cn/docs/user_doc/system-manual.html",
  "meta": {}
}