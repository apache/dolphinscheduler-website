{
  "filename": "api-standard.md",
  "__html": "<h1>API 设计规范</h1>\n<p>规范统一的 API 是项目设计的基石。DolphinScheduler 的 API 遵循 REST ful 标准，REST ful 是目前最流行的一种互联网软件架构，它结构清晰，符合标准，易于理解，扩展方便。</p>\n<p>本文以 DolphinScheduler 项目的接口为样例，讲解如何构造具有 Restful 风格的 API。</p>\n<h2>1. URI 设计</h2>\n<p>REST 即为 Representational State Transfer 的缩写，即“表现层状态转化”。</p>\n<p>“表现层”指的就是“资源”。资源对应网络上的一种实体，例如：一段文本，一张图片，一种服务。且每种资源都对应一个特定的 URI。</p>\n<p>Restful URI 的设计基于资源：</p>\n<ul>\n<li>一类资源：用复数表示，如 <code>task-instances</code>、<code>groups</code> 等；</li>\n<li>单个资源：用单数，或是用 id 值表示某类资源下的一个，如 <code>group</code>、<code>groups/{groupId}</code>；</li>\n<li>子资源：某个资源下的资源：<code>/instances/{instanceId}/tasks</code>；</li>\n<li>子资源下的单个资源：<code>/instances/{instanceId}/tasks/{taskId}</code>；</li>\n</ul>\n<h2>2. Method 设计</h2>\n<p>我们需要通过 URI 来定位某种资源，再通过 Method，或者在路径后缀声明动作来体现对资源的操作。</p>\n<h3>① 查询操作 - GET</h3>\n<p>通过 URI 来定位要资源，通过 GET 表示查询。</p>\n<ul>\n<li>当 URI 为一类资源时表示查询一类资源，例如下面样例表示分页查询 <code>alter-groups</code>。</li>\n</ul>\n<pre><code>Method: GET\n/dolphinscheduler/alert-groups\n</code></pre>\n<ul>\n<li>当 URI 为单个资源时表示查询此资源，例如下面样例表示查询对应的 <code>alter-group</code>。</li>\n</ul>\n<pre><code>Method: GET\n/dolphinscheduler/alter-groups/{id}\n</code></pre>\n<ul>\n<li>此外，我们还可以根据 URI 来表示查询子资源，如下：</li>\n</ul>\n<pre><code>Method: GET\n/dolphinscheduler/projects/{projectId}/tasks\n</code></pre>\n<p><strong>上述的关于查询的方式都表示分页查询，如果我们需要查询全部数据的话，则需在 URI 的后面加 <code>/list</code> 来区分。分页查询和查询全部不要混用一个 API。</strong></p>\n<pre><code>Method: GET\n/dolphinscheduler/alert-groups/list\n</code></pre>\n<h3>② 创建操作 - POST</h3>\n<p>通过 URI 来定位要创建的资源类型，通过 POST 表示创建动作，并且将创建后的 <code>id</code> 返回给请求者。</p>\n<ul>\n<li>下面样例表示创建一个 <code>alter-group</code>：</li>\n</ul>\n<pre><code>Method: POST\n/dolphinscheduler/alter-groups\n</code></pre>\n<ul>\n<li>创建子资源也是类似的操作：</li>\n</ul>\n<pre><code>Method: POST\n/dolphinscheduler/alter-groups/{alterGroupId}/tasks\n</code></pre>\n<h3>③ 修改操作 - PUT</h3>\n<p>通过 URI 来定位某一资源，通过 PUT 指定对其修改。</p>\n<pre><code>Method: PUT\n/dolphinscheduler/alter-groups/{alterGroupId}\n</code></pre>\n<h3>④ 删除操作 -DELETE</h3>\n<p>通过 URI 来定位某一资源，通过 DELETE 指定对其删除。</p>\n<ul>\n<li>下面例子表示删除 <code>alterGroupId</code> 对应的资源：</li>\n</ul>\n<pre><code>Method: DELETE\n/dolphinscheduler/alter-groups/{alterGroupId}\n</code></pre>\n<ul>\n<li>批量删除：对传入的 id 数组进行批量删除，使用 POST 方法。<strong>（这里不要用 DELETE 方法，因为 DELETE 请求的 body 在语义上没有任何意义，而且有可能一些网关，代理，防火墙在收到 DELETE 请求后会把请求的 body 直接剥离掉。）</strong></li>\n</ul>\n<pre><code>Method: POST\n/dolphinscheduler/alter-groups/batch-delete\n</code></pre>\n<h3>⑤ 部分更新操作 -PATCH</h3>\n<p>通过 URI 来定位某一资源，通过 PATCH 指定对其部分更新。</p>\n<ul>\n<li>下面例子表示部分更新 <code>alterGroupId</code> 对应的资源：</li>\n</ul>\n<pre><code>Method: PATCH\n/dolphinscheduler/alter-groups/{alterGroupId}\n</code></pre>\n<h3>⑥ 其他操作</h3>\n<p>除增删改查外的操作，我们同样也通过 <code>url</code> 定位到对应的资源，然后再在路径后面追加对其进行的操作。例如：</p>\n<pre><code>/dolphinscheduler/alert-groups/verify-name\n/dolphinscheduler/projects/{projectCode}/process-instances/{code}/view-gantt\n</code></pre>\n<h2>3. 参数设计</h2>\n<p>参数分为两种，一种是请求参数(Request Param 或 Request Body)，另一种是路径参数(Path Param)。</p>\n<p>参数变量必须用小驼峰表示，并且在分页场景中，用户输入的参数小于 1，则前端需要返给后端 1 表示请求第一页；当后端发现用户输入的参数大于总页数时，直接返回最后一页。</p>\n<h2>4. 其他设计</h2>\n<h3>基础路径</h3>\n<p>整个项目的 URI 需要以 <code>/&lt;project_name&gt;</code> 作为基础路径，从而标识这类 API 都是项目下的，即：</p>\n<pre><code>/dolphinscheduler\n</code></pre>\n",
  "link": "/dist/zh-cn/docs/dev/user_doc/contribute/api-standard.html",
  "meta": {}
}