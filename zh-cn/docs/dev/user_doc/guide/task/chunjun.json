{
  "filename": "chunjun.md",
  "__html": "<h1>ChunJun节点</h1>\n<h2>综述</h2>\n<p>ChunJun 任务类型，用于执行 ChunJun 程序。对于 ChunJun 节点，worker 会通过执行 <code>${CHUNJUN_HOME}/bin/start-chunjun</code> 来解析传入的 json 文件。</p>\n<h2>创建任务</h2>\n<ul>\n<li>点击项目管理 -&gt; 项目名称 -&gt; 工作流定义，点击“创建工作流”按钮，进入 DAG 编辑页面；</li>\n<li>拖动工具栏的<img src=\"/img/tasks/icons/chunjun.png\" width=\"15\"/> 任务节点到画板中。</li>\n</ul>\n<h2>任务参数</h2>\n<ul>\n<li>节点名称：设置任务节点的名称。一个工作流定义中的节点名称是唯一的。</li>\n<li>运行标志：标识这个结点是否能正常调度，如果不需要执行，可以打开禁止执行开关。</li>\n<li>描述：描述该节点的功能。</li>\n<li>任务优先级：worker 线程数不足时，根据优先级从高到低依次执行，优先级一样时根据先进先出原则执行。</li>\n<li>Worker 分组：任务分配给 worker 组的机器执行，选择 Default ，会随机选择一台 worker 机执行。</li>\n<li>环境名称：配置运行脚本的环境。</li>\n<li>任务组名称：任务组的名称。</li>\n<li>组内优先级：一个任务组内此任务的优先级。</li>\n<li>失败重试次数：任务失败重新提交的次数。</li>\n<li>失败重试间隔：任务失败重新提交任务的时间间隔，以分为单位。</li>\n<li>延时执行时间：任务延迟执行的时间，以分为单位。</li>\n<li>超时警告：勾选超时警告、超时失败，当任务超过“超时时长”后，会发送告警邮件并且任务执行失败。</li>\n<li>自定义模板：自定义 ChunJun 节点的 json 配置文件内容，当前支持此种方式。</li>\n<li>json：ChunJun 同步的 json 配置文件。</li>\n<li>自定义参数：用户自定义参数，会替换脚本中以 ${变量} 的内容。</li>\n<li>部署方式： 执行ChunJun任务的方式，比如local，standalone等。</li>\n<li>选项参数： 支持 <code>-confProp &quot;{\\&quot;flink.checkpoint.interval\\&quot;:60000}&quot;</code> 格式。</li>\n<li>前置任务：选择当前任务的前置任务，会将被选择的前置任务设置为当前任务的上游。</li>\n</ul>\n<h2>任务样例</h2>\n<p>该样例演示为从 Hive 数据导入到 MySQL 中。</p>\n<h3>在 DolphinScheduler 中配置 ChunJun 环境</h3>\n<p>若生产环境中要是使用到 ChunJun 任务类型，则需要先配置好所需的环境。配置文件如下：<code>/dolphinscheduler/conf/env/dolphinscheduler_env.sh</code>。</p>\n<p><img src=\"/img/tasks/demo/chunjun_task01.png\" alt=\"chunjun_task01\"></p>\n<p>当环境配置完成之后，需要重启 DolphinScheduler。</p>\n<h3>配置 ChunJun 任务节点</h3>\n<p>从 Hive 中读取数据，所以需要自定义 json，可参考：<a href=\"https://github.com/DTStack/chunjun/blob/master/chunjun-examples/json/hive/binlog_hive.json\">Hive Json Template</a></p>\n",
  "link": "/dist/zh-cn/docs/dev/user_doc/guide/task/chunjun.html",
  "meta": {}
}