{
  "filename": "frontend-development.md",
  "__html": "<h1>前端开发文档</h1>\n<h3>技术选型</h3>\n<pre><code>Vue mvvm框架\n\nEs6 ECMAScript 6.0\n\nAns-ui Analysys-ui\n\nD3 可视化库图表库\n\nJsplumb 连线插件库\n\nLodash 高性能的 JavaScript 实用工具库\n</code></pre>\n<h3>开发环境搭建</h3>\n<ul>\n<li>\n<h4>Node安装</h4>\n</li>\n</ul>\n<p>Node包下载 (注意版本 8.9.4) <code>https://nodejs.org/download/release/v8.9.4/</code></p>\n<ul>\n<li>\n<h4>前端项目构建</h4>\n</li>\n</ul>\n<p>用命令行模式 <code>cd</code>  进入 <code>dolphinscheduler-ui</code>项目目录并执行 <code>npm install</code> 拉取项目依赖包</p>\n<blockquote>\n<p>如果 <code>npm install</code> 速度非常慢</p>\n</blockquote>\n<blockquote>\n<p>可以转淘宝镜像命令行输入 <code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p>\n</blockquote>\n<blockquote>\n<p>运行 <code>cnpm install</code></p>\n</blockquote>\n<ul>\n<li>新建一个<code>.env</code>文件，用于跟后端交互的接口</li>\n</ul>\n<p>在<code>dolphinscheduler-ui</code>目录下新建一个<code>.env</code>文件，在文件里添加后端服务的ip地址和端口，用于跟后端交互，<code>.env</code>文件内容如下：</p>\n<pre><code># 代理的接口地址（自行修改）\nAPI_BASE = http://192.168.xx.xx:12345\n\n# 如果您需要用ip访问项目可以把 &quot;#&quot; 号去掉（例）\n#DEV_HOST = 192.168.xx.xx\n</code></pre>\n<blockquote>\n<h5>！！！这里特别注意 项目如果在拉取依赖包的过程中报 &quot; node-sass error &quot; 错误，请在执行完后再次执行以下命令</h5>\n</blockquote>\n<pre><code>npm install node-sass --unsafe-perm //单独安装node-sass依赖\n</code></pre>\n<ul>\n<li>\n<h4>开发环境运行</h4>\n</li>\n<li><code>npm start</code> 项目开发环境 (启动后访问地址 <a href=\"http://localhost:8888/#/\">http://localhost:8888/#/</a>)</li>\n</ul>\n<h4>前端项目发布</h4>\n<ul>\n<li><code>npm run build</code> 项目打包 (打包后根目录会创建一个名为dist文件夹，用于发布线上Nginx)</li>\n</ul>\n<p>运行 <code>npm run build</code> 命令，生成打包文件（dist）包</p>\n<p>再拷贝到服务器对应的目录下（前端服务静态页面存放目录）</p>\n<p>访问地址 <code>http://localhost:8888/#/</code></p>\n<h4>Linux下使用node启动并且守护进程</h4>\n<p>安装pm2 <code>npm install -g pm2</code></p>\n<p>在项目<code>dolphinscheduler-ui</code>根目录执行 <code>pm2 start npm -- run dev</code> 启动项目</p>\n<h4>命令</h4>\n<ul>\n<li>\n<p>启用 <code>pm2 start npm -- run dev</code></p>\n</li>\n<li>\n<p>停止 <code>pm2 stop npm</code></p>\n</li>\n<li>\n<p>删除 <code>pm2 delete npm</code></p>\n</li>\n<li>\n<p>状态 <code>pm2 list</code></p>\n</li>\n</ul>\n<pre><code>\n[root@localhost dolphinscheduler-ui]# pm2 start npm -- run dev\n[PM2] Applying action restartProcessId on app [npm](ids: 0)\n[PM2] [npm](0) ✓\n[PM2] Process successfully started\n┌──────────┬────┬─────────┬──────┬──────┬────────┬─────────┬────────┬─────┬──────────┬──────┬──────────┐\n│ App name │ id │ version │ mode │ pid  │ status │ restart │ uptime │ cpu │ mem      │ user │ watching │\n├──────────┼────┼─────────┼──────┼──────┼────────┼─────────┼────────┼─────┼──────────┼──────┼──────────┤\n│ npm      │ 0  │ N/A     │ fork │ 6168 │ online │ 31      │ 0s     │ 0%  │ 5.6 MB   │ root │ disabled │\n└──────────┴────┴─────────┴──────┴──────┴────────┴─────────┴────────┴─────┴──────────┴──────┴──────────┘\n Use `pm2 show &lt;id|name&gt;` to get more details about an app\n\n</code></pre>\n<h3>项目目录结构</h3>\n<p><code>build</code> 打包及开发环境项目的一些webpack配置</p>\n<p><code>node_modules</code> 开发环境node依赖包</p>\n<p><code>src</code> 项目所需文件</p>\n<p><code>src =&gt; combo</code> 项目第三方资源本地化 <code>npm run combo</code>具体查看<code>build/combo.js</code></p>\n<p><code>src =&gt; font</code> 字体图标库可访问 <code>https://www.iconfont.cn</code> 进行添加 注意：字体库用的自己的 二次开发需要重新引入自己的库 <code>src/sass/common/_font.scss</code></p>\n<p><code>src =&gt; images</code> 公共图片存放</p>\n<p><code>src =&gt; js</code> js/vue</p>\n<p><code>src =&gt; lib</code> 公司内部组件（公司组件库开源后可删掉）</p>\n<p><code>src =&gt; sass</code> sass文件 一个页面对应一个sass文件</p>\n<p><code>src =&gt; view</code> 页面文件 一个页面对应一个html文件</p>\n<pre><code>&gt; 项目采用vue单页面应用(SPA)开发\n- 所有页面入口文件在 `src/js/conf/${对应页面文件名 =&gt; home}` 的 `index.js` 入口文件\n- 对应的sass文件则在 `src/sass/conf/${对应页面文件名 =&gt; home}/index.scss`\n- 对应的html文件则在 `src/view/${对应页面文件名 =&gt; home}/index.html`\n</code></pre>\n<p>公共模块及util <code>src/js/module</code></p>\n<p><code>components</code> =&gt; 内部项目公共组件</p>\n<p><code>download</code> =&gt; 下载组件</p>\n<p><code>echarts</code> =&gt; 图表组件</p>\n<p><code>filter</code> =&gt; 过滤器和vue管道</p>\n<p><code>i18n</code> =&gt; 国际化</p>\n<p><code>io</code> =&gt; io请求封装 基于axios</p>\n<p><code>mixin</code> =&gt; vue mixin 公共部分 用于disabled操作</p>\n<p><code>permissions</code> =&gt; 权限操作</p>\n<p><code>util</code> =&gt; 工具</p>\n<h3>系统功能模块</h3>\n<p>首页 =&gt; <code>http://localhost:8888/#/home</code></p>\n<p>项目管理 =&gt; <code>http://localhost:8888/#/projects/list</code></p>\n<pre><code>| 项目首页\n| 工作流\n  - 工作流定义\n  - 工作流实例\n  - 任务实例\n</code></pre>\n<p>资源管理 =&gt; <code>http://localhost:8888/#/resource/file</code></p>\n<pre><code>| 文件管理\n| UDF管理\n  - 资源管理\n  - 函数管理\n</code></pre>\n<p>数据源管理 =&gt; <code>http://localhost:8888/#/datasource/list</code></p>\n<p>安全中心 =&gt; <code>http://localhost:8888/#/security/tenant</code></p>\n<pre><code>| 租户管理\n| 用户管理\n| 告警组管理\n  - master\n  - worker\n</code></pre>\n<p>用户中心 =&gt; <code>http://localhost:8888/#/user/account</code></p>\n<h2>路由和状态管理</h2>\n<p>项目 <code>src/js/conf/home</code> 下分为</p>\n<p><code>pages</code> =&gt; 路由指向页面目录</p>\n<pre><code> 路由地址对应的页面文件\n</code></pre>\n<p><code>router</code> =&gt; 路由管理</p>\n<pre><code>vue的路由器，在每个页面的入口文件index.js 都会注册进来 具体操作：https://router.vuejs.org/zh/\n</code></pre>\n<p><code>store</code> =&gt; 状态管理</p>\n<pre><code>每个路由对应的页面都有一个状态管理的文件 分为：\n\nactions =&gt; mapActions =&gt; 详情：https://vuex.vuejs.org/zh/guide/actions.html\n\ngetters =&gt; mapGetters =&gt; 详情：https://vuex.vuejs.org/zh/guide/getters.html\n\nindex =&gt; 入口\n\nmutations =&gt; mapMutations =&gt; 详情：https://vuex.vuejs.org/zh/guide/mutations.html\n\nstate =&gt; mapState =&gt; 详情：https://vuex.vuejs.org/zh/guide/state.html\n\n具体操作：https://vuex.vuejs.org/zh/\n\n</code></pre>\n<h2>规范</h2>\n<h2>Vue规范</h2>\n<h5>1.组件名</h5>\n<p>组件名为多个单词，并且用连接线（-）连接，避免与 HTML 标签冲突，并且结构更加清晰。</p>\n<pre><code>// 正例\nexport default {\n    name: 'page-article-item'\n}\n</code></pre>\n<h5>2.组件文件</h5>\n<p><code>src/js/module/components</code>项目内部公共组件书写文件夹名与文件名同名,公共组件内部所拆分的子组件与util工具都放置组件内部 <code>_source</code>文件夹里。</p>\n<pre><code>└── components\n    ├── header\n        ├── header.vue\n        └── _source\n            └── nav.vue\n            └── util.js\n    ├── conditions\n        ├── conditions.vue\n        └── _source\n            └── search.vue\n            └── util.js\n</code></pre>\n<h5>3.Prop</h5>\n<p>定义 Prop 的时候应该始终以驼峰格式（camelCase）命名，在父组件赋值的时候使用连接线（-）。\n这里遵循每个语言的特性，因为在 HTML 标记中对大小写是不敏感的，使用连接线更加友好；而在 JavaScript 中更自然的是驼峰命名。</p>\n<pre><code>// Vue\nprops: {\n    articleStatus: Boolean\n}\n// HTML\n&lt;article-item :article-status=&quot;true&quot;&gt;&lt;/article-item&gt;\n</code></pre>\n<p>Prop 的定义应该尽量详细的指定其类型、默认值和验证。</p>\n<p>示例：</p>\n<pre><code>props: {\n    attrM: Number,\n    attrA: {\n        type: String,\n        required: true\n    },\n    attrZ: {\n        type: Object,\n        // 数组/对象的默认值应该由一个工厂函数返回\n        default: function () {\n            return {\n                msg: '成就你我'\n            }\n        }\n    },\n    attrE: {\n        type: String,\n        validator: function (v) {\n            return !(['success', 'fail'].indexOf(v) === -1) \n        }\n    }\n}\n</code></pre>\n<h5>4.v-for</h5>\n<p>在执行 v-for 遍历的时候，总是应该带上 key 值使更新 DOM 时渲染效率更高。</p>\n<pre><code>&lt;ul&gt;\n    &lt;li v-for=&quot;item in list&quot; :key=&quot;item.id&quot;&gt;\n        {{ item.title }}\n    &lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n<p>v-for 应该避免与 v-if 在同一个元素（<code>例如：&lt;li&gt;</code>）上使用，因为 v-for 的优先级比 v-if 更高，为了避免无效计算和渲染，应该尽量将 v-if 放到容器的父元素之上。</p>\n<pre><code>&lt;ul v-if=&quot;showList&quot;&gt;\n    &lt;li v-for=&quot;item in list&quot; :key=&quot;item.id&quot;&gt;\n        {{ item.title }}\n    &lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n<h5>5.v-if / v-else-if / v-else</h5>\n<p>若同一组 v-if 逻辑控制中的元素逻辑相同，Vue 为了更高效的元素切换，会复用相同的部分，<code>例如：value</code>。为了避免复用带来的不合理效果，应该在同种元素上加上 key 做标识。</p>\n<pre><code>&lt;div v-if=&quot;hasData&quot; key=&quot;mazey-data&quot;&gt;\n    &lt;span&gt;{{ mazeyData }}&lt;/span&gt;\n&lt;/div&gt;\n&lt;div v-else key=&quot;mazey-none&quot;&gt;\n    &lt;span&gt;无数据&lt;/span&gt;\n&lt;/div&gt;\n</code></pre>\n<h5>6.指令缩写</h5>\n<p>为了统一规范始终使用指令缩写，使用<code>v-bind</code>，<code>v-on</code>并没有什么不好，这里仅为了统一规范。</p>\n<pre><code>&lt;input :value=&quot;mazeyUser&quot; @click=&quot;verifyUser&quot;&gt;\n</code></pre>\n<h5>7.单文件组件的顶级元素顺序</h5>\n<p>样式后续都是打包在一个文件里，所有在单个vue文件中定义的样式，在别的文件里同类名的样式也是会生效的所有在创建一个组件前都会有个顶级类名\n注意：项目内已经增加了sass插件，单个vue文件里可以直接书写sass语法\n为了统一和便于阅读，应该按 <code>&lt;template&gt;</code>、<code>&lt;script&gt;</code>、<code>&lt;style&gt;</code>的顺序放置。</p>\n<pre><code>&lt;template&gt;\n  &lt;div class=&quot;test-model&quot;&gt;\n    test\n  &lt;/div&gt;\n&lt;/template&gt;\n&lt;script&gt;\n  export default {\n    name: &quot;test&quot;,\n    data() {\n      return {}\n    },\n    props: {},\n    methods: {},\n    watch: {},\n    beforeCreate() {\n    },\n    created() {\n    },\n    beforeMount() {\n    },\n    mounted() {\n    },\n    beforeUpdate() {\n    },\n    updated() {\n    },\n    beforeDestroy() {\n    },\n    destroyed() {\n    },\n    computed: {},\n    components: {},\n  }\n&lt;/script&gt;\n\n&lt;style lang=&quot;scss&quot; rel=&quot;stylesheet/scss&quot;&gt;\n  .test-model {\n\n  }\n&lt;/style&gt;\n\n</code></pre>\n<h2>JavaScript规范</h2>\n<h5>1.var / let / const</h5>\n<p>建议不再使用 var，而使用 let / const，优先使用 const。任何一个变量的使用都要提前申明，除了 function 定义的函数可以随便放在任何位置。</p>\n<h5>2.引号</h5>\n<pre><code>const foo = '后除'\nconst bar = `${foo}，前端工程师`\n</code></pre>\n<h5>3.函数</h5>\n<p>匿名函数统一使用箭头函数，多个参数/返回值时优先使用对象的结构赋值。</p>\n<pre><code>function getPersonInfo ({name, sex}) {\n    // ...\n    return {name, gender}\n}\n</code></pre>\n<p>函数名统一使用驼峰命名，以大写字母开头申明的都是构造函数，使用小写字母开头的都是普通函数，也不该使用 new 操作符去操作普通函数。</p>\n<h5>4.对象</h5>\n<pre><code>const foo = {a: 0, b: 1}\nconst bar = JSON.parse(JSON.stringify(foo))\n\nconst foo = {a: 0, b: 1}\nconst bar = {...foo, c: 2}\n\nconst foo = {a: 3}\nObject.assign(foo, {b: 4})\n\nconst myMap = new Map([])\nfor (let [key, value] of myMap.entries()) {\n    // ...\n}\n</code></pre>\n<h5>5.模块</h5>\n<p>统一使用 import / export 的方式管理项目的模块。</p>\n<pre><code>// lib.js\nexport default {}\n\n// app.js\nimport app from './lib'\n</code></pre>\n<p>import 统一放在文件顶部。</p>\n<p>如果模块只有一个输出值，使用 <code>export default</code>，否则不用。</p>\n<h2>HTML / CSS</h2>\n<h6>1.标签</h6>\n<p>在引用外部 CSS 或 JavaScript 时不写 type 属性。HTML5 默认 type 为 <code>text/css</code> 和 <code>text/javascript</code> 属性，所以没必要指定。</p>\n<pre><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;//www.test.com/css/test.css&quot;&gt;\n&lt;script src=&quot;//www.test.com/js/test.js&quot;&gt;&lt;/script&gt;\n</code></pre>\n<h5>2.命名</h5>\n<p>Class 和 ID 的命名应该语义化，通过看名字就知道是干嘛的；多个单词用连接线 - 连接。</p>\n<pre><code>// 正例\n.test-header{\n    font-size: 20px;\n}\n</code></pre>\n<h5>3.属性缩写</h5>\n<p>CSS 属性尽量使用缩写，提高代码的效率和方便理解。</p>\n<pre><code>// 反例\nborder-width: 1px;\nborder-style: solid;\nborder-color: #ccc;\n\n// 正例\nborder: 1px solid #ccc;\n</code></pre>\n<h5>4.文档类型</h5>\n<p>应该总是使用 HTML5 标准。</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n</code></pre>\n<h5>5.注释</h5>\n<p>应该给一个模块文件写一个区块注释。</p>\n<pre><code>/**\n* @module mazey/api\n* @author Mazey &lt;mazey@mazey.net&gt;\n* @description test.\n* */\n</code></pre>\n<h2>接口</h2>\n<h5>所有的接口都以 Promise 形式返回</h5>\n<p>注意非0都为错误走catch</p>\n<pre><code>const test = () =&gt; {\n  return new Promise((resolve, reject) =&gt; {\n    resolve({\n      a:1\n    })\n  })\n}\n\n// 调用\ntest.then(res =&gt; {\n  console.log(res)\n  // {a:1}\n})\n</code></pre>\n<p>正常返回</p>\n<pre><code>{\n  code:0,\n  data:{}\n  msg:'成功'\n}\n</code></pre>\n<p>错误返回</p>\n<pre><code>{\n  code:10000, \n  data:{}\n  msg:'失败'\n}\n</code></pre>\n<h5>相关接口路径</h5>\n<p>dag 相关接口 <code>src/js/conf/home/store/dag/actions.js</code></p>\n<p>数据源中心 相关接口 <code>src/js/conf/home/store/datasource/actions.js</code></p>\n<p>项目管理 相关接口 <code>src/js/conf/home/store/projects/actions.js</code></p>\n<p>资源中心 相关接口 <code>src/js/conf/home/store/resource/actions.js</code></p>\n<p>安全中心 相关接口 <code>src/js/conf/home/store/security/actions.js</code></p>\n<p>用户中心 相关接口 <code>src/js/conf/home/store/user/actions.js</code></p>\n<h2>扩展开发</h2>\n<h5>1.增加节点</h5>\n<p>(1) 先将节点的icon小图标放置<code>src/js/conf/home/pages/dag/img</code>文件夹内，注意 <code>toolbar_${后台定义的节点的英文名称 例如:SHELL}.png</code>\n(2) 找到 <code>src/js/conf/home/pages/dag/_source/config.js</code> 里的 <code>tasksType</code> 对象，往里增加</p>\n<pre><code>'DEPENDENT': {  // 后台定义节点类型英文名称用作key值\n  desc: 'DEPENDENT',  // tooltip desc\n  color: '#2FBFD8'  // 代表的颜色主要用于 tree和gantt 两张图\n}\n</code></pre>\n<p>(3) 在 <code>src/js/conf/home/pages/dag/_source/formModel/tasks</code> 增加一个 <code>${节点类型（小写）}</code>.vue 文件，跟当前节点相关的组件内容都在这里写。 属于节点组件内的必须拥有一个函数 <code>_verification()</code> 验证成功后讲当前组件的相关数据往父组件抛。</p>\n<pre><code>/**\n * 验证\n*/\n  _verification () {\n    // datasource 子组件验证\n    if (!this.$refs.refDs._verifDatasource()) {\n      return false\n    }\n\n    // 验证函数\n    if (!this.method) {\n      this.$message.warning(`${i18n.$t('请输入方法')}`)\n      return false\n    }\n\n    // localParams 子组件验证\n    if (!this.$refs.refLocalParams._verifProp()) {\n      return false\n    }\n    // 存储\n    this.$emit('on-params', {\n      type: this.type,\n      datasource: this.datasource,\n      method: this.method,\n      localParams: this.localParams\n    })\n    return true\n  }\n</code></pre>\n<p>(4) 节点组件内部所用到公共的组件都在<code>_source</code>下，<code>commcon.js</code>用与配置公共数据</p>\n<h5>2.增加状态类型</h5>\n<p>(1) 找到 <code>src/js/conf/home/pages/dag/_source/config.js</code> 里的 <code>tasksState</code> 对象，往里增加</p>\n<pre><code>'WAITTING_DEPEND': {  //后端定义状态类型 前端用作key值\n  id: 11,  // 前端定义id 后续用作排序\n  desc: `${i18n.$t('等待依赖')}`,  // tooltip desc\n  color: '#5101be',  // 代表的颜色主要用于 tree和gantt 两张图\n  icoUnicode: '&amp;#xe68c;',  // 字体图标 \n  isSpin: false  // 是否旋转（需代码判断）\n}\n</code></pre>\n<h5>3.增加操作栏工具</h5>\n<p>(1) 找到 <code>src/js/conf/home/pages/dag/_source/config.js</code> 里的 <code>toolOper</code> 对象，往里增加</p>\n<pre><code>{\n  code: 'pointer',  // 工具标识\n  icon: '&amp;#xe781;',  // 工具图标 \n  disable: disable,  // 是否禁用\n  desc: `${i18n.$t('拖动节点和选中项')}`  // tooltip desc\n}\n</code></pre>\n<p>(2) 工具类都以一个构造函数返回 <code>src/js/conf/home/pages/dag/_source/plugIn</code></p>\n<p><code>downChart.js</code>  =&gt;  dag 图片下载处理</p>\n<p><code>dragZoom.js</code>  =&gt;  鼠标缩放效果处理</p>\n<p><code>jsPlumbHandle.js</code>  =&gt;  拖拽线条处理</p>\n<p><code>util.js</code>  =&gt;   属于 <code>plugIn</code> 工具类</p>\n<p>操作则在 <code>src/js/conf/home/pages/dag/_source/dag.js</code> =&gt; <code>toolbarEvent</code> 事件中处理。</p>\n<h5>3.增加一个路由页面</h5>\n<p>(1) 首先在路由管理增加一个路由地址<code>src/js/conf/home/router/index.js</code></p>\n<pre><code>{\n  path: '/test',  // 路由地址 \n  name: 'test',  // 别名\n  component: resolve =&gt; require(['../pages/test/index'], resolve),  // 路由对应组件入口文件\n  meta: {\n    title: `${i18n.$t('test')} - DolphinScheduler`  // title 显示\n  }\n},\n</code></pre>\n<p>(2) 在<code>src/js/conf/home/pages</code> 建一个 <code>test</code> 文件夹，在文件夹里建一个<code>index.vue</code>入口文件。</p>\n<pre><code>这样就可以直接访问 `http://localhost:8888/#/test`\n</code></pre>\n<h5>4.增加预置邮箱</h5>\n<p>找到<code>src/lib/localData/email.js</code>启动和定时邮箱地址输入可以自动下拉匹配。</p>\n<pre><code>export default [&quot;test@analysys.com.cn&quot;,&quot;test1@analysys.com.cn&quot;,&quot;test3@analysys.com.cn&quot;]\n</code></pre>\n<h5>5.权限管理及disabled状态处理</h5>\n<p>权限根据后端接口<code>getUserInfo</code>接口给出<code>userType: &quot;ADMIN_USER/GENERAL_USER&quot;</code>权限控制页面操作按钮是否<code>disabled</code></p>\n<p>具体操作：<code>src/js/module/permissions/index.js</code></p>\n<p>disabled处理：<code>src/js/module/mixin/disabledState.js</code></p>\n",
  "link": "/zh-cn/docs/developer_guide/frontend-development.html",
  "meta": {}
}