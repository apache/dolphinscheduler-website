{
  "__html": "<p><a href=\"https://dolphinscheduler.apache.org/zh-cn/docs/3.1.2/guide/upgrade/upgrade\">Apache DolphinScheduler</a>\n<strong>查看官方的升级文档，可知有提供升级脚本，如果只是跨小版本的更新那么只用执行脚本就好了，但跨多个大版本升级时依然容易出现各种问题，特此总结。</strong></p>\n<p>旧版本：1.3.4\n新版本：3.1.2</p>\n<h2>1. 升级完成后使用资源中心报错 IllegalArgumentException: Failed to specify server's Kerberos principal name</h2>\n<p>资源中心使用的HDFS，开启了kerberos认证</p>\n<h4>解决方法：</h4>\n<p>编辑 dolphinscheduler/api-server/conf/hdfs-site.xml 添加以下内容</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">name</span>&gt;</span>dfs.namenode.kerberos.principal.pattern<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">name</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value</span>&gt;</span>*<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">value</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span>\n</code></pre>\n<h2>2. 升级完成后查看任务实例的日志，报错未找到日志</h2>\n<p><strong>查看报错信息，检查新版本的目录结构和表里的日志路径，发现原因是新版本的日志路径有变更</strong>\n<strong>升级前的日志路径在 /logs/ 下</strong>\n<strong>升级后的日志路径在 /worker-server/logs/ 下</strong>\n<strong>因此需要修改这里的目录</strong></p>\n<h4>解决方法：</h4>\n<p>执行sql修改日志路径</p>\n<pre><code class=\"language-sql\"><span class=\"hljs-keyword\">update</span> t_ds_task_instance <span class=\"hljs-keyword\">set</span> log_path<span class=\"hljs-operator\">=</span>replace(log_path,<span class=\"hljs-string\">&#x27;/logs/&#x27;</span>,<span class=\"hljs-string\">&#x27;/worker-server/logs/&#x27;</span>);\n</code></pre>\n<p>然后将原日志文件copy到新的日志路径</p>\n<pre><code class=\"language-sql\">cp <span class=\"hljs-operator\">-</span>r {旧版本dolphinscheduler目录}<span class=\"hljs-operator\">/</span>logs<span class=\"hljs-operator\">/</span>[<span class=\"hljs-number\">1</span><span class=\"hljs-number\">-9</span>]<span class=\"hljs-operator\">*</span> {新版本dolphinscheduler目录}<span class=\"hljs-operator\">/</span>worker<span class=\"hljs-operator\">-</span>server<span class=\"hljs-operator\">/</span>logs<span class=\"hljs-comment\">/*\n</span></code></pre>\n<h2>3.升级完成后创建工作流报错</h2>\n<p>查看报错信息，原因是 t_ds_process_definition_log 和 t_ds_process_definition 主键的初始值不一致\n那么修改成一致的就好</p>\n<h4>解决方法：</h4>\n<p>执行sql</p>\n<pre><code class=\"language-sql\"># 查出主键自增值\n<span class=\"hljs-keyword\">select</span> AUTO_INCREMENT <span class=\"hljs-keyword\">FROM</span> information_schema.TABLES <span class=\"hljs-keyword\">WHERE</span> TABLE_SCHEMA <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;dolphinscheduler&#x27;</span> <span class=\"hljs-keyword\">AND</span> TABLE_NAME <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;t_ds_process_definition&#x27;</span> limit <span class=\"hljs-number\">1</span>\n# 将上面<span class=\"hljs-keyword\">sql</span>的执行结果填写到下方参数处执行\n<span class=\"hljs-keyword\">alter</span> <span class=\"hljs-keyword\">table</span> dolphinscheduler_bak1.t_ds_process_definition_log auto_increment <span class=\"hljs-operator\">=</span> {max_id};\n</code></pre>\n<h2>4.升级后任务实例列表为空</h2>\n<p>检查查询的sql\n在<code>dolphinscheduler-dao/src/main/resources/org/apache/dolphinscheduler/dao/mapper/TaskInstanceMapper.xml</code>文件里，select id=&quot;queryTaskInstanceListPaging&quot;的sql</p>\n<pre><code class=\"language-sql\">\t\t<span class=\"hljs-keyword\">select</span>\n        <span class=\"hljs-operator\">&lt;</span>include refid<span class=\"hljs-operator\">=</span>&quot;baseSqlV2&quot;<span class=\"hljs-operator\">&gt;</span>\n            <span class=\"hljs-operator\">&lt;</span>property name<span class=\"hljs-operator\">=</span>&quot;alias&quot; <span class=\"hljs-keyword\">value</span><span class=\"hljs-operator\">=</span>&quot;instance&quot;<span class=\"hljs-operator\">/</span><span class=\"hljs-operator\">&gt;</span>\n        <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-operator\">/</span>include<span class=\"hljs-operator\">&gt;</span>\n        ,\n        process.name <span class=\"hljs-keyword\">as</span> process_instance_name\n        <span class=\"hljs-keyword\">from</span> t_ds_task_instance instance\n        <span class=\"hljs-keyword\">left</span> <span class=\"hljs-keyword\">join</span> t_ds_task_definition_log <span class=\"hljs-keyword\">define</span> <span class=\"hljs-keyword\">on</span> define.code<span class=\"hljs-operator\">=</span>instance.task_code <span class=\"hljs-keyword\">and</span> define.version<span class=\"hljs-operator\">=</span>instance.task_definition_version\n        <span class=\"hljs-keyword\">left</span> <span class=\"hljs-keyword\">join</span> t_ds_process_instance process <span class=\"hljs-keyword\">on</span> process.id<span class=\"hljs-operator\">=</span>instance.process_instance_id\n        <span class=\"hljs-keyword\">where</span> define.project_code <span class=\"hljs-operator\">=</span> #{projectCode}\n        <span class=\"hljs-operator\">&lt;</span>if test<span class=\"hljs-operator\">=</span>&quot;startTime != null&quot;<span class=\"hljs-operator\">&gt;</span>\n            <span class=\"hljs-keyword\">and</span> instance.start_time <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-operator\">!</span>[CDATA[ <span class=\"hljs-operator\">&gt;=</span>]]<span class=\"hljs-operator\">&gt;</span> #{startTime}\n        <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-operator\">/</span>if<span class=\"hljs-operator\">&gt;</span>\n\t\t......省略多余部分\n</code></pre>\n<p><strong>查询任务实例列表的sql会关联 t_ds_task_definition_log 表，经检查发现是 define.code=instance.task_code 这一句关联不上。\n结合下面的查询条件 define.project_code = #{projectCode} 可知，关联t_ds_task_definition_log 主要是为了过滤 projectCode，那么来修改下这个sql</strong></p>\n<h4>解决方法：</h4>\n<pre><code class=\"language-sql\">    \t<span class=\"hljs-keyword\">select</span>\n        <span class=\"hljs-operator\">&lt;</span>include refid<span class=\"hljs-operator\">=</span>&quot;baseSqlV2&quot;<span class=\"hljs-operator\">&gt;</span>\n            <span class=\"hljs-operator\">&lt;</span>property name<span class=\"hljs-operator\">=</span>&quot;alias&quot; <span class=\"hljs-keyword\">value</span><span class=\"hljs-operator\">=</span>&quot;instance&quot;<span class=\"hljs-operator\">/</span><span class=\"hljs-operator\">&gt;</span>\n        <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-operator\">/</span>include<span class=\"hljs-operator\">&gt;</span>\n        ,\n        process.name <span class=\"hljs-keyword\">as</span> process_instance_name\n        <span class=\"hljs-keyword\">from</span> t_ds_task_instance instance\n<span class=\"hljs-comment\">--         left join t_ds_task_definition_log define </span>\n<span class=\"hljs-comment\">--\t\t\t\ton define.code=instance.task_code and </span>\n<span class=\"hljs-comment\">--\t\t\t\t\tdefine.version=instance.task_definition_version</span>\n        <span class=\"hljs-keyword\">join</span> t_ds_process_instance process\n        \t<span class=\"hljs-keyword\">on</span> process.id<span class=\"hljs-operator\">=</span>instance.process_instance_id\n        <span class=\"hljs-keyword\">join</span> t_ds_process_definition <span class=\"hljs-keyword\">define</span>\n        \t<span class=\"hljs-keyword\">on</span> define.code<span class=\"hljs-operator\">=</span>process.process_definition_code\n        <span class=\"hljs-keyword\">where</span> define.project_code <span class=\"hljs-operator\">=</span> #{projectCode}\n        <span class=\"hljs-operator\">&lt;</span>if test<span class=\"hljs-operator\">=</span>&quot;startTime != null&quot;<span class=\"hljs-operator\">&gt;</span>\n            <span class=\"hljs-keyword\">and</span> instance.start_time <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-operator\">!</span>[CDATA[ <span class=\"hljs-operator\">&gt;=</span>]]<span class=\"hljs-operator\">&gt;</span> #{startTime}\n        <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-operator\">/</span>if<span class=\"hljs-operator\">&gt;</span>\n\t\t......省略多余部分\n</code></pre>\n<p><strong>直接用 t_ds_process_definition 关联，也有project_code字段可以用来关联过滤</strong>\n<strong>这里修改后就能查出数据了</strong></p>\n<h2>5. 执行升级脚本的过程中报错空指针</h2>\n<h3>5.1分析日志，定位到 UpgradeDao.java 517行</h3>\n<p>查看代码</p>\n<pre><code class=\"language-java\"><span class=\"hljs-number\">513</span> <span class=\"hljs-keyword\">if</span> (TASK_TYPE_SUB_PROCESS.equals(taskType)) {\n<span class=\"hljs-number\">514</span>                       <span class=\"hljs-type\">JsonNode</span> <span class=\"hljs-variable\">jsonNodeDefinitionId</span> <span class=\"hljs-operator\">=</span> param.get(<span class=\"hljs-string\">&quot;processDefinitionId&quot;</span>);\n<span class=\"hljs-number\">515</span>                       <span class=\"hljs-keyword\">if</span> (jsonNodeDefinitionId != <span class=\"hljs-literal\">null</span>) {\n<span class=\"hljs-number\">516</span>                           param.put(<span class=\"hljs-string\">&quot;processDefinitionCode&quot;</span>,\n<span class=\"hljs-number\">517</span>                                  processDefinitionMap.get(jsonNodeDefinitionId.asInt()).getCode());\n<span class=\"hljs-number\">518</span>                            param.remove(<span class=\"hljs-string\">&quot;processDefinitionId&quot;</span>);\n<span class=\"hljs-number\">519</span>                        }\n<span class=\"hljs-number\">520</span>                    }\n</code></pre>\n<p><strong>很明显是</strong> <code>processDefinitionMap.get(jsonNodeDefinitionId.asInt())</code>** 返回了null,加个null判断，如果返回null直接跳过，并将相关信息打印出来，升级结束后可以根据日志核对。**</p>\n<h4>解决方法：</h4>\n<p>修改后</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">if</span> (jsonNodeDefinitionId != <span class=\"hljs-literal\">null</span>) {\n    <span class=\"hljs-keyword\">if</span> (processDefinitionMap.get(jsonNodeDefinitionId.asInt()) != <span class=\"hljs-literal\">null</span>) {\n        param.put(<span class=\"hljs-string\">&quot;processDefinitionCode&quot;</span>,processDefinitionMap.get(jsonNodeDefinitionId.asInt()).getCode());\n        param.remove(<span class=\"hljs-string\">&quot;processDefinitionId&quot;</span>);\n    } <span class=\"hljs-keyword\">else</span> {\n        logger.error(<span class=\"hljs-string\">&quot;*******************error&quot;</span>);\n        logger.error(<span class=\"hljs-string\">&quot;*******************param:&quot;</span> + param);\n        logger.error(<span class=\"hljs-string\">&quot;*******************jsonNodeDefinitionId:&quot;</span> + jsonNodeDefinitionId);\n    }\n}\n</code></pre>\n<h3>5.2分析日志，定位到 UpgradeDao.java 675行</h3>\n<p>查看代码</p>\n<pre><code class=\"language-java\"><span class=\"hljs-number\">669</span> <span class=\"hljs-keyword\">if</span> (mapEntry.isPresent()) {\n<span class=\"hljs-number\">670</span>                            Map.Entry&lt;Long, Map&lt;String, Long&gt;&gt; processCodeTaskNameCodeEntry = mapEntry.get();\n<span class=\"hljs-number\">671</span>                            dependItem.put(<span class=\"hljs-string\">&quot;definitionCode&quot;</span>, processCodeTaskNameCodeEntry.getKey());\n<span class=\"hljs-number\">672</span>                            <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">depTasks</span> <span class=\"hljs-operator\">=</span> dependItem.get(<span class=\"hljs-string\">&quot;depTasks&quot;</span>).asText();\n<span class=\"hljs-number\">673</span>                            <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">taskCode</span> <span class=\"hljs-operator\">=</span>\n<span class=\"hljs-number\">674</span>                                    <span class=\"hljs-string\">&quot;ALL&quot;</span>.equals(depTasks) || processCodeTaskNameCodeEntry.getValue() == <span class=\"hljs-literal\">null</span> ? <span class=\"hljs-number\">0L</span>\n<span class=\"hljs-number\">675</span>                                            : processCodeTaskNameCodeEntry.getValue().get(depTasks);\n<span class=\"hljs-number\">676</span>                            dependItem.put(<span class=\"hljs-string\">&quot;depTaskCode&quot;</span>, taskCode);\n<span class=\"hljs-number\">677</span>                        }\n</code></pre>\n<p>很明显是<strong>processCodeTaskNameCodeEntry.getValue().get(depTasks)</strong> 返回了null.\n修改下逻辑，不为null才赋值并打印相关日志</p>\n<h4>解决方法：</h4>\n<p>修改后</p>\n<pre><code class=\"language-java\"><span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">taskCode</span> <span class=\"hljs-operator\">=</span><span class=\"hljs-number\">0</span>;\n                            <span class=\"hljs-keyword\">if</span> (processCodeTaskNameCodeEntry.getValue() != <span class=\"hljs-literal\">null</span>\n                                    &amp;&amp;processCodeTaskNameCodeEntry.getValue().get(depTasks)!=<span class=\"hljs-literal\">null</span>){\n                                taskCode =processCodeTaskNameCodeEntry.getValue().get(depTasks);\n                            }<span class=\"hljs-keyword\">else</span>{\n                                logger.error(<span class=\"hljs-string\">&quot;******************** depTasks:&quot;</span>+depTasks);\n                                logger.error(<span class=\"hljs-string\">&quot;******************** taskCode not in &quot;</span>+JSONUtils.toJsonString(processCodeTaskNameCodeEntry));\n                            }\n                            dependItem.put(<span class=\"hljs-string\">&quot;depTaskCode&quot;</span>, taskCode);\n</code></pre>\n<h2>6.接入LDAP后登陆失败，不知道email字段名</h2>\n<p>可在 api-server/conf/application.yaml 配置接入LDAP</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">security:</span>\n  <span class=\"hljs-attr\">authentication:</span>\n    <span class=\"hljs-comment\"># Authentication types (supported types: PASSWORD,LDAP)</span>\n    <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">LDAP</span>\n    <span class=\"hljs-comment\"># IF you set type `LDAP`, below config will be effective</span>\n    <span class=\"hljs-attr\">ldap:</span>\n      <span class=\"hljs-comment\"># ldap server config</span>\n      <span class=\"hljs-attr\">urls:</span> <span class=\"hljs-string\">xxx</span>\n      <span class=\"hljs-attr\">base-dn:</span> <span class=\"hljs-string\">xxx</span>\n      <span class=\"hljs-attr\">username:</span> <span class=\"hljs-string\">xxx</span>\n      <span class=\"hljs-attr\">password:</span> <span class=\"hljs-string\">xxx</span>\n      <span class=\"hljs-attr\">user:</span>\n        <span class=\"hljs-comment\"># admin userId when you use LDAP login</span>\n        <span class=\"hljs-attr\">admin:</span> <span class=\"hljs-string\">xxx</span>\n        <span class=\"hljs-attr\">identity-attribute:</span> <span class=\"hljs-string\">xxx</span>\n        <span class=\"hljs-attr\">email-attribute:</span> <span class=\"hljs-string\">xxx</span>\n        <span class=\"hljs-comment\"># action when ldap user is not exist (supported types: CREATE,DENY)</span>\n        <span class=\"hljs-attr\">not-exist-action:</span> <span class=\"hljs-string\">CREATE</span>\n</code></pre>\n<p><strong>要成功接入LDAP至少需要urls,base-dn,username,password,identity和email 正确填写，不知道email字段名可以按下面的方式处理，email先空着</strong>\n<strong>启动服务后用LDAP用户登录</strong></p>\n<h4>解决办法：</h4>\n<p>** LDAP 认证的代码在 dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/security/impl/ldap/LdapService.java 的 ldapLogin()**</p>\n<pre><code class=\"language-java\">ctx = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InitialLdapContext</span>(searchEnv, <span class=\"hljs-literal\">null</span>);\n<span class=\"hljs-type\">SearchControls</span> <span class=\"hljs-variable\">sc</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SearchControls</span>();\nsc.setReturningAttributes(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>[]{ldapEmailAttribute});\nsc.setSearchScope(SearchControls.SUBTREE_SCOPE);\n<span class=\"hljs-type\">EqualsFilter</span> <span class=\"hljs-variable\">filter</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">EqualsFilter</span>(ldapUserIdentifyingAttribute, userId);\nNamingEnumeration&lt;SearchResult&gt; results = ctx.search(ldapBaseDn, filter.toString(), sc);\n<span class=\"hljs-keyword\">if</span> (results.hasMore()) {\n    <span class=\"hljs-comment\">// get the users DN (distinguishedName) from the result</span>\n    <span class=\"hljs-type\">SearchResult</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> results.next();\n    NamingEnumeration&lt;? <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Attribute</span>&gt; attrs = result.getAttributes().getAll();\n    <span class=\"hljs-keyword\">while</span> (attrs.hasMore()) {\n        <span class=\"hljs-comment\">// Open another connection to the LDAP server with the found DN and the password</span>\n        searchEnv.put(Context.SECURITY_PRINCIPAL, result.getNameInNamespace());\n        searchEnv.put(Context.SECURITY_CREDENTIALS, userPwd);\n        <span class=\"hljs-keyword\">try</span> {\n            <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InitialDirContext</span>(searchEnv);\n        } <span class=\"hljs-keyword\">catch</span> (Exception e) {\n            logger.warn(<span class=\"hljs-string\">&quot;invalid ldap credentials or ldap search error&quot;</span>, e);\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n        }\n        <span class=\"hljs-type\">Attribute</span> <span class=\"hljs-variable\">attr</span> <span class=\"hljs-operator\">=</span> attrs.next();\n        <span class=\"hljs-keyword\">if</span> (attr.getID().equals(ldapEmailAttribute)) {\n            <span class=\"hljs-keyword\">return</span> (String) attr.get();\n        }\n    }\n}\n</code></pre>\n<p>第三行会根据填的字段过滤，先注释第三行</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// sc.setReturningAttributes(new String[]{ldapEmailAttribute});</span>\n</code></pre>\n<p>重新执行后第10行会返回全部字段</p>\n<pre><code class=\"language-java\">NamingEnumeration&lt;? <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Attribute</span>&gt; attrs = result.getAttributes().getAll();\n</code></pre>\n<p>通过打印或调试在里面找到email字段填到配置文件里，再还原上面注释的代码，重启服务后即可正常接入LDAP登录。</p>\n<h2>7.管理员给普通用户授权资源文件不生效</h2>\n<p><strong>经多次测试,发现普通用户只能看到所属用户为自己的资源文件，管理员授权后依然无法查看资源文件</strong></p>\n<h4>解决办法:</h4>\n<p><strong>文件 <code>dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/permission/ResourcePermissionCheckServiceImpl.java</code>的<code>listAuthorizedResource()</code>方法,将 return 的集合修改为 relationResources</strong></p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Override</span>\n        <span class=\"hljs-keyword\">public</span> Set&lt;Integer&gt; <span class=\"hljs-title function_\">listAuthorizedResource</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> userId, Logger logger)</span> {\n            List&lt;Resource&gt; relationResources;\n            <span class=\"hljs-keyword\">if</span> (userId == <span class=\"hljs-number\">0</span>) {\n                relationResources = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\n            } <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-comment\">// query resource relation</span>\n                List&lt;Integer&gt; resIds = resourceUserMapper.queryResourcesIdListByUserIdAndPerm(userId, <span class=\"hljs-number\">0</span>);\n                relationResources = CollectionUtils.isEmpty(resIds) ? <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;() : resourceMapper.queryResourceListById(resIds);\n            }\n            List&lt;Resource&gt; ownResourceList = resourceMapper.queryResourceListAuthored(userId, -<span class=\"hljs-number\">1</span>);\n            relationResources.addAll(ownResourceList);\n            <span class=\"hljs-keyword\">return</span> relationResources.stream().map(Resource::getId).collect(toSet()); <span class=\"hljs-comment\">// 解决资源文件授权无效的问题</span>\n<span class=\"hljs-comment\">//            return ownResourceList.stream().map(Resource::getId).collect(toSet());</span>\n        }\n</code></pre>\n<p>检查新版本的change log ，发现在3.1.3版本修复了这个bug\nhttps://github.com/apache/dolphinscheduler/pull/13318</p>\n<h2>8.kerberos过期的问题</h2>\n<p>因为kerberos配置了票据过期时间，一段时间后资源中心的hdfs资源将无法访问，最好的解决办法是添加定时更新凭证的相关逻辑</p>\n<h4>解决办法:</h4>\n<p>在文件 dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/utils/CommonUtils.java 添加方法</p>\n<pre><code class=\"language-java\"> <span class=\"hljs-comment\">/**\n     * * 定时更新凭证\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">startCheckKeytabTgtAndReloginJob</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-comment\">// 每天循环，定时更新凭证</span>\n        Executors.newScheduledThreadPool(<span class=\"hljs-number\">1</span>).scheduleWithFixedDelay(() -&gt; {\n            <span class=\"hljs-keyword\">try</span> {\n                UserGroupInformation.getLoginUser().checkTGTAndReloginFromKeytab();\n                logger.warn(<span class=\"hljs-string\">&quot;Check Kerberos Tgt And Relogin From Keytab Finish.&quot;</span>);\n            } <span class=\"hljs-keyword\">catch</span> (IOException e) {\n                logger.error(<span class=\"hljs-string\">&quot;Check Kerberos Tgt And Relogin From Keytab Error&quot;</span>, e);\n            }\n        }, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, TimeUnit.DAYS);\n        logger.info(<span class=\"hljs-string\">&quot;Start Check Keytab TGT And Relogin Job Success.&quot;</span>);\n    }\n</code></pre>\n<p>然后在该文件的<code>loadKerberosConf</code> 方法返回 true 前调用</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">loadKerberosConf</span><span class=\"hljs-params\">(String javaSecurityKrb5Conf, String loginUserKeytabUsername,\n                                           String loginUserKeytabPath, Configuration configuration)</span> <span class=\"hljs-keyword\">throws</span> IOException {\n        <span class=\"hljs-keyword\">if</span> (CommonUtils.getKerberosStartupState()) {\n            System.setProperty(Constants.JAVA_SECURITY_KRB5_CONF, StringUtils.defaultIfBlank(javaSecurityKrb5Conf,\n                    PropertyUtils.getString(Constants.JAVA_SECURITY_KRB5_CONF_PATH)));\n            configuration.set(Constants.HADOOP_SECURITY_AUTHENTICATION, Constants.KERBEROS);\n            UserGroupInformation.setConfiguration(configuration);\n            UserGroupInformation.loginUserFromKeytab(\n                    StringUtils.defaultIfBlank(loginUserKeytabUsername,\n                            PropertyUtils.getString(Constants.LOGIN_USER_KEY_TAB_USERNAME)),\n                    StringUtils.defaultIfBlank(loginUserKeytabPath,\n                            PropertyUtils.getString(Constants.LOGIN_USER_KEY_TAB_PATH)));\n            startCheckKeytabTgtAndReloginJob();  <span class=\"hljs-comment\">// 此处调用</span>\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n</code></pre>\n",
  "time": "2024-01-19",
  "author": "刘宇星",
  "title": "Apache DolphinScheduler 从 1.3.4 升级至3.1.2 过程中的问题记录及解决方案",
  "type": "tech",
  "label": "技术详解"
}