{
  "__html": "<p><a href=\"https://dolphinscheduler.apache.org/zh-cn/docs/3.1.2/guide/upgrade/upgrade\">Apache DolphinScheduler</a>\n<strong>By referring to the official upgrade documentation, it is known that upgrade scripts are provided. If it is a minor version upgrade, executing the script should suffice. However, when upgrading across multiple major versions, various issues can still arise. Therefore, a summary of these issues is provided.</strong></p>\n<p>old version：1.3.4\nnew version：3.1.2</p>\n<h2>1. Error &quot;IllegalArgumentException: Failed to specify server's Kerberos principal name&quot; when using Resource Center after the upgrade</h2>\n<p>The Resource Center is configured to use HDFS with Kerberos authentication enabled.</p>\n<h4>Solution:</h4>\n<p>Edit <code>dolphinscheduler/api-server/conf/hdfs-site.xml</code> and add the following content:</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">name</span>&gt;</span>dfs.namenode.kerberos.principal.pattern<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">name</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value</span>&gt;</span>*<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">value</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span>\n</code></pre>\n<h2>2. Error &quot;Log not found&quot; when viewing task instance logs after the upgrade</h2>\n<p><strong>Upon checking the error message and comparing the directory structure and log paths in the new version, it is found that the log path has been changed in the new version.</strong>\n<strong>The old log path was located under <code>/logs/</code>, while the new log path is <code>/worker-server/logs/</code>.</strong>\n<strong>Therefore, the directory needs to be modified accordingly.</strong></p>\n<h4>Solution:</h4>\n<p>Execute the following SQL statement to modify the log path:</p>\n<pre><code class=\"language-sql\"><span class=\"hljs-keyword\">update</span> t_ds_task_instance <span class=\"hljs-keyword\">set</span> log_path<span class=\"hljs-operator\">=</span>replace(log_path,<span class=\"hljs-string\">&#x27;/logs/&#x27;</span>,<span class=\"hljs-string\">&#x27;/worker-server/logs/&#x27;</span>);\n</code></pre>\n<p>Then, copy the original log files to the new log path:</p>\n<pre><code class=\"language-sql\">cp <span class=\"hljs-operator\">-</span>r {old_dolphinscheduler_directory}<span class=\"hljs-operator\">/</span>logs<span class=\"hljs-operator\">/</span>[<span class=\"hljs-number\">1</span><span class=\"hljs-number\">-9</span>]<span class=\"hljs-operator\">*</span> {new_dolphinscheduler_directory}<span class=\"hljs-operator\">/</span>worker<span class=\"hljs-operator\">-</span>server<span class=\"hljs-operator\">/</span>logs<span class=\"hljs-comment\">/*\n</span></code></pre>\n<h2>3. Error when creating workflows after the upgrade</h2>\n<p>Upon checking the error message, it is found that the initial values of the primary keys for <code>t_ds_process_definition_log</code> and <code>t_ds_process_definition</code> are inconsistent.\nTo resolve this, the primary keys need to be made consistent.</p>\n<h4>Solution:</h4>\n<p>Execute the following SQL statement:</p>\n<pre><code class=\"language-sql\"># Retrieve the auto<span class=\"hljs-operator\">-</span>increment <span class=\"hljs-keyword\">value</span> <span class=\"hljs-keyword\">of</span> the <span class=\"hljs-keyword\">primary</span> key\n<span class=\"hljs-keyword\">select</span> AUTO_INCREMENT <span class=\"hljs-keyword\">FROM</span> information_schema.TABLES <span class=\"hljs-keyword\">WHERE</span> TABLE_SCHEMA <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;dolphinscheduler&#x27;</span> <span class=\"hljs-keyword\">AND</span> TABLE_NAME <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;t_ds_process_definition&#x27;</span> limit <span class=\"hljs-number\">1</span>\n\n# Replace {max_id} <span class=\"hljs-keyword\">with</span> the above <span class=\"hljs-keyword\">result</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-keyword\">execute</span> the statement\n<span class=\"hljs-keyword\">alter</span> <span class=\"hljs-keyword\">table</span> dolphinscheduler_bak1.t_ds_process_definition_log auto_increment <span class=\"hljs-operator\">=</span> {max_id};\n</code></pre>\n<h2>4. Task instance list is empty after the upgrade</h2>\n<p>Check the SQL query in <code>dolphinscheduler-dao/src/main/resources/org/apache/dolphinscheduler/dao/mapper/TaskInstanceMapper.xml</code> file under the select id=&quot;queryTaskInstanceListPaging&quot; section.</p>\n<pre><code class=\"language-sql\">\t\t<span class=\"hljs-keyword\">select</span>\n        <span class=\"hljs-operator\">&lt;</span>include refid<span class=\"hljs-operator\">=</span>&quot;baseSqlV2&quot;<span class=\"hljs-operator\">&gt;</span>\n            <span class=\"hljs-operator\">&lt;</span>property name<span class=\"hljs-operator\">=</span>&quot;alias&quot; <span class=\"hljs-keyword\">value</span><span class=\"hljs-operator\">=</span>&quot;instance&quot;<span class=\"hljs-operator\">/</span><span class=\"hljs-operator\">&gt;</span>\n        <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-operator\">/</span>include<span class=\"hljs-operator\">&gt;</span>\n        ,\n        process.name <span class=\"hljs-keyword\">as</span> process_instance_name\n        <span class=\"hljs-keyword\">from</span> t_ds_task_instance instance\n        <span class=\"hljs-keyword\">left</span> <span class=\"hljs-keyword\">join</span> t_ds_task_definition_log <span class=\"hljs-keyword\">define</span> <span class=\"hljs-keyword\">on</span> define.code<span class=\"hljs-operator\">=</span>instance.task_code <span class=\"hljs-keyword\">and</span> define.version<span class=\"hljs-operator\">=</span>instance.task_definition_version\n        <span class=\"hljs-keyword\">left</span> <span class=\"hljs-keyword\">join</span> t_ds_process_instance process <span class=\"hljs-keyword\">on</span> process.id<span class=\"hljs-operator\">=</span>instance.process_instance_id\n        <span class=\"hljs-keyword\">where</span> define.project_code <span class=\"hljs-operator\">=</span> #{projectCode}\n        <span class=\"hljs-operator\">&lt;</span>if test<span class=\"hljs-operator\">=</span>&quot;startTime != null&quot;<span class=\"hljs-operator\">&gt;</span>\n            <span class=\"hljs-keyword\">and</span> instance.start_time <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-operator\">!</span>[CDATA[ <span class=\"hljs-operator\">&gt;=</span>]]<span class=\"hljs-operator\">&gt;</span> #{startTime}\n        <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-operator\">/</span>if<span class=\"hljs-operator\">&gt;</span>\n\t\t......Omitting redundant code\n</code></pre>\n<p><strong>The SQL query for querying the task instance list is associated with the <code>t_ds_task_definition_log</code> table. After inspection, it was found that the join condition <code>define.code = instance.task_code</code> cannot be matched.</strong>\n<strong>Considering the query condition <code>define.project_code = #{projectCode}</code>, it can be inferred that the purpose of joining the <code>t_ds_task_definition_log</code> table is mainly to filter by <code>projectCode</code>. Let's modify the SQL accordingly.</strong></p>\n<h4>Solution:</h4>\n<pre><code class=\"language-sql\">    \t<span class=\"hljs-keyword\">select</span>\n        <span class=\"hljs-operator\">&lt;</span>include refid<span class=\"hljs-operator\">=</span>&quot;baseSqlV2&quot;<span class=\"hljs-operator\">&gt;</span>\n            <span class=\"hljs-operator\">&lt;</span>property name<span class=\"hljs-operator\">=</span>&quot;alias&quot; <span class=\"hljs-keyword\">value</span><span class=\"hljs-operator\">=</span>&quot;instance&quot;<span class=\"hljs-operator\">/</span><span class=\"hljs-operator\">&gt;</span>\n        <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-operator\">/</span>include<span class=\"hljs-operator\">&gt;</span>\n        ,\n        process.name <span class=\"hljs-keyword\">as</span> process_instance_name\n        <span class=\"hljs-keyword\">from</span> t_ds_task_instance instance\n<span class=\"hljs-comment\">--         left join t_ds_task_definition_log define </span>\n<span class=\"hljs-comment\">--\t\t\t\ton define.code=instance.task_code and </span>\n<span class=\"hljs-comment\">--\t\t\t\t\tdefine.version=instance.task_definition_version</span>\n        <span class=\"hljs-keyword\">join</span> t_ds_process_instance process\n        \t<span class=\"hljs-keyword\">on</span> process.id<span class=\"hljs-operator\">=</span>instance.process_instance_id\n        <span class=\"hljs-keyword\">join</span> t_ds_process_definition <span class=\"hljs-keyword\">define</span>\n        \t<span class=\"hljs-keyword\">on</span> define.code<span class=\"hljs-operator\">=</span>process.process_definition_code\n        <span class=\"hljs-keyword\">where</span> define.project_code <span class=\"hljs-operator\">=</span> #{projectCode}\n        <span class=\"hljs-operator\">&lt;</span>if test<span class=\"hljs-operator\">=</span>&quot;startTime != null&quot;<span class=\"hljs-operator\">&gt;</span>\n            <span class=\"hljs-keyword\">and</span> instance.start_time <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-operator\">!</span>[CDATA[ <span class=\"hljs-operator\">&gt;=</span>]]<span class=\"hljs-operator\">&gt;</span> #{startTime}\n        <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-operator\">/</span>if<span class=\"hljs-operator\">&gt;</span>\n\t\t......Omitting redundant code\n</code></pre>\n<p><strong>Modify the SQL query to directly use the <code>t_ds_process_definition</code> table for the association, as it also has the <code>project_code</code> field for filtering.</strong></p>\n<h2>5. NullPointerException during the execution of the upgrade script</h2>\n<h3>5.1 Analysis of the logs led to line 517 in UpgradeDao.java</h3>\n<pre><code class=\"language-java\"><span class=\"hljs-number\">513</span>                     <span class=\"hljs-keyword\">if</span> (TASK_TYPE_SUB_PROCESS.equals(taskType)) {\n<span class=\"hljs-number\">514</span>                       <span class=\"hljs-type\">JsonNode</span> <span class=\"hljs-variable\">jsonNodeDefinitionId</span> <span class=\"hljs-operator\">=</span> param.get(<span class=\"hljs-string\">&quot;processDefinitionId&quot;</span>);\n<span class=\"hljs-number\">515</span>                       <span class=\"hljs-keyword\">if</span> (jsonNodeDefinitionId != <span class=\"hljs-literal\">null</span>) {\n<span class=\"hljs-number\">516</span>                           param.put(<span class=\"hljs-string\">&quot;processDefinitionCode&quot;</span>,\n<span class=\"hljs-number\">517</span>                                  processDefinitionMap.get(jsonNodeDefinitionId.asInt()).getCode());\n<span class=\"hljs-number\">518</span>                            param.remove(<span class=\"hljs-string\">&quot;processDefinitionId&quot;</span>);\n<span class=\"hljs-number\">519</span>                        }\n<span class=\"hljs-number\">520</span>                     }\n</code></pre>\n<p><strong>Upon examining the code, it is evident that <code>processDefinitionMap.get(jsonNodeDefinitionId.asInt())</code> returns null. Add a null check to skip the null value and print the relevant information for verification after the upgrade.</strong></p>\n<h4>Solution:</h4>\n<p>After modification:</p>\n<pre><code class=\"language-java\">            <span class=\"hljs-keyword\">if</span> (jsonNodeDefinitionId != <span class=\"hljs-literal\">null</span>) {\n                <span class=\"hljs-keyword\">if</span> (processDefinitionMap.get(jsonNodeDefinitionId.asInt()) != <span class=\"hljs-literal\">null</span>) {\n                param.put(<span class=\"hljs-string\">&quot;processDefinitionCode&quot;</span>,processDefinitionMap.get(jsonNodeDefinitionId.asInt()).getCode());\n                param.remove(<span class=\"hljs-string\">&quot;processDefinitionId&quot;</span>);\n            } <span class=\"hljs-keyword\">else</span> {\n                    logger.error(<span class=\"hljs-string\">&quot;*******************error&quot;</span>);\n                logger.error(<span class=\"hljs-string\">&quot;*******************param:&quot;</span> + param);\n                logger.error(<span class=\"hljs-string\">&quot;*******************jsonNodeDefinitionId:&quot;</span> + jsonNodeDefinitionId);\n            }\n                    }\n</code></pre>\n<h3>5.2 Analysis of the logs led to line 675 in UpgradeDao.java</h3>\n<pre><code class=\"language-java\"><span class=\"hljs-number\">669</span> <span class=\"hljs-keyword\">if</span> (mapEntry.isPresent()) {\n<span class=\"hljs-number\">670</span>                            Map.Entry&lt;Long, Map&lt;String, Long&gt;&gt; processCodeTaskNameCodeEntry = mapEntry.get();\n<span class=\"hljs-number\">671</span>                            dependItem.put(<span class=\"hljs-string\">&quot;definitionCode&quot;</span>, processCodeTaskNameCodeEntry.getKey());\n<span class=\"hljs-number\">672</span>                            <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">depTasks</span> <span class=\"hljs-operator\">=</span> dependItem.get(<span class=\"hljs-string\">&quot;depTasks&quot;</span>).asText();\n<span class=\"hljs-number\">673</span>                            <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">taskCode</span> <span class=\"hljs-operator\">=</span>\n<span class=\"hljs-number\">674</span>                                    <span class=\"hljs-string\">&quot;ALL&quot;</span>.equals(depTasks) || processCodeTaskNameCodeEntry.getValue() == <span class=\"hljs-literal\">null</span> ? <span class=\"hljs-number\">0L</span>\n<span class=\"hljs-number\">675</span>                                            : processCodeTaskNameCodeEntry.getValue().get(depTasks);\n<span class=\"hljs-number\">676</span>                            dependItem.put(<span class=\"hljs-string\">&quot;depTaskCode&quot;</span>, taskCode);\n<span class=\"hljs-number\">677</span>                        }\n</code></pre>\n<p>Upon examining the code, it is evident that <code>processCodeTaskNameCodeEntry.getValue().get(depTasks)</code> returns null. Modify the logic to assign a value and print the relevant log only if it is not null.</p>\n<h4>Solution:</h4>\n<p>After modification:</p>\n<pre><code class=\"language-java\">        <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">taskCode</span> <span class=\"hljs-operator\">=</span><span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">if</span> (processCodeTaskNameCodeEntry.getValue() != <span class=\"hljs-literal\">null</span>\n                &amp;&amp;processCodeTaskNameCodeEntry.getValue().get(depTasks)!=<span class=\"hljs-literal\">null</span>){\n        taskCode =processCodeTaskNameCodeEntry.getValue().get(depTasks);\n        }<span class=\"hljs-keyword\">else</span>{\n                logger.error(<span class=\"hljs-string\">&quot;******************** depTasks:&quot;</span>+depTasks);\n                logger.error(<span class=\"hljs-string\">&quot;******************** taskCode not in &quot;</span>+JSONUtils.toJsonString(processCodeTaskNameCodeEntry));\n        }\n        dependItem.put(<span class=\"hljs-string\">&quot;depTaskCode&quot;</span>, taskCode);\n</code></pre>\n<h2>6. Login failure after integrating LDAP, unknown field name for email</h2>\n<p>LDAP integration can be configured in <code>api-server/conf/application.yaml</code>.</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">security:</span>\n  <span class=\"hljs-attr\">authentication:</span>\n    <span class=\"hljs-comment\"># Authentication types (supported types: PASSWORD,LDAP)</span>\n    <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">LDAP</span>\n    <span class=\"hljs-comment\"># IF you set type `LDAP`, below config will be effective</span>\n    <span class=\"hljs-attr\">ldap:</span>\n      <span class=\"hljs-comment\"># ldap server config</span>\n      <span class=\"hljs-attr\">urls:</span> <span class=\"hljs-string\">xxx</span>\n      <span class=\"hljs-attr\">base-dn:</span> <span class=\"hljs-string\">xxx</span>\n      <span class=\"hljs-attr\">username:</span> <span class=\"hljs-string\">xxx</span>\n      <span class=\"hljs-attr\">password:</span> <span class=\"hljs-string\">xxx</span>\n      <span class=\"hljs-attr\">user:</span>\n        <span class=\"hljs-comment\"># admin userId when you use LDAP login</span>\n        <span class=\"hljs-attr\">admin:</span> <span class=\"hljs-string\">xxx</span>\n        <span class=\"hljs-attr\">identity-attribute:</span> <span class=\"hljs-string\">xxx</span>\n        <span class=\"hljs-attr\">email-attribute:</span> <span class=\"hljs-string\">xxx</span>\n        <span class=\"hljs-comment\"># action when ldap user is not exist (supported types: CREATE,DENY)</span>\n        <span class=\"hljs-attr\">not-exist-action:</span> <span class=\"hljs-string\">CREATE</span>\n</code></pre>\n<p><strong>To successfully integrate LDAP, the following fields need to be correctly filled in the configuration: <code>urls</code>, <code>base-dn</code>, <code>username</code>, <code>password</code>, <code>identity</code>, and <code>email</code>. If the email field name is unknown, follow the steps below, leaving the email field empty for now:</strong>\n<strong>Start the service and attempt to log in with an LDAP user.</strong></p>\n<h4>Solution:</h4>\n<p>** The LDAP authentication code is located in <code>dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/security/impl/ldap/LdapService.java</code> under the <code>ldapLogin()</code> method.**</p>\n<pre><code class=\"language-java\">        ctx = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InitialLdapContext</span>(searchEnv, <span class=\"hljs-literal\">null</span>);\n        <span class=\"hljs-type\">SearchControls</span> <span class=\"hljs-variable\">sc</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SearchControls</span>();\n        sc.setReturningAttributes(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>[]{ldapEmailAttribute});\n        sc.setSearchScope(SearchControls.SUBTREE_SCOPE);\n        <span class=\"hljs-type\">EqualsFilter</span> <span class=\"hljs-variable\">filter</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">EqualsFilter</span>(ldapUserIdentifyingAttribute, userId);\n        NamingEnumeration&lt;SearchResult&gt; results = ctx.search(ldapBaseDn, filter.toString(), sc);\n        <span class=\"hljs-keyword\">if</span> (results.hasMore()) {\n            <span class=\"hljs-comment\">// get the users DN (distinguishedName) from the result</span>\n            <span class=\"hljs-type\">SearchResult</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> results.next();\n            NamingEnumeration&lt;? <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Attribute</span>&gt; attrs = result.getAttributes().getAll();\n            <span class=\"hljs-keyword\">while</span> (attrs.hasMore()) {\n                <span class=\"hljs-comment\">// Open another connection to the LDAP server with the found DN and the password</span>\n                searchEnv.put(Context.SECURITY_PRINCIPAL, result.getNameInNamespace());\n                searchEnv.put(Context.SECURITY_CREDENTIALS, userPwd);\n                <span class=\"hljs-keyword\">try</span> {\n                    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InitialDirContext</span>(searchEnv);\n                } <span class=\"hljs-keyword\">catch</span> (Exception e) {\n                    logger.warn(<span class=\"hljs-string\">&quot;invalid ldap credentials or ldap search error&quot;</span>, e);\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n                }\n                <span class=\"hljs-type\">Attribute</span> <span class=\"hljs-variable\">attr</span> <span class=\"hljs-operator\">=</span> attrs.next();\n                <span class=\"hljs-keyword\">if</span> (attr.getID().equals(ldapEmailAttribute)) {\n                    <span class=\"hljs-keyword\">return</span> (String) attr.get();\n                }\n            }\n        }\n</code></pre>\n<p>Comment out the 3 line that filters based on the field filled.</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// sc.setReturningAttributes(new String[]{ldapEmailAttribute});</span>\n</code></pre>\n<p>After executing, the 10 line will return all fields.</p>\n<pre><code class=\"language-java\">NamingEnumeration&lt;? <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Attribute</span>&gt; attrs = result.getAttributes().getAll();\n</code></pre>\n<p>Find the email field through printing or debugging and fill it in the configuration file.\nUncomment the previously commented line of code.\nRestart the service to enable successful LDAP integration and login.</p>\n<h2>7. Authorization of resource files by administrators for ordinary users does not take effect</h2>\n<p>After multiple tests, it was found that ordinary users can only see resource files that belong to them, even after being granted authorization by administrators.</p>\n<h4>Solution:</h4>\n<p><strong>Modify the <code>listAuthorizedResource()</code> method in the file <code>dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/permission/ResourcePermissionCheckServiceImpl.java</code> to return <code>relationResources</code> instead of the current collection.</strong></p>\n<pre><code class=\"language-java\">        <span class=\"hljs-meta\">@Override</span>\n        <span class=\"hljs-keyword\">public</span> Set&lt;Integer&gt; <span class=\"hljs-title function_\">listAuthorizedResource</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> userId, Logger logger)</span> {\n            List&lt;Resource&gt; relationResources;\n            <span class=\"hljs-keyword\">if</span> (userId == <span class=\"hljs-number\">0</span>) {\n                relationResources = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\n            } <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-comment\">// query resource relation</span>\n                List&lt;Integer&gt; resIds = resourceUserMapper.queryResourcesIdListByUserIdAndPerm(userId, <span class=\"hljs-number\">0</span>);\n                relationResources = CollectionUtils.isEmpty(resIds) ? <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;() : resourceMapper.queryResourceListById(resIds);\n            }\n            List&lt;Resource&gt; ownResourceList = resourceMapper.queryResourceListAuthored(userId, -<span class=\"hljs-number\">1</span>);\n            relationResources.addAll(ownResourceList);\n            <span class=\"hljs-keyword\">return</span> relationResources.stream().map(Resource::getId).collect(toSet()); <span class=\"hljs-comment\">// Resolve the issue of invalid resource file authorization.</span>\n<span class=\"hljs-comment\">//            return ownResourceList.stream().map(Resource::getId).collect(toSet());</span>\n        }\n</code></pre>\n<p>Check the change log of the new version and find that this bug has been fixed in version 3.1.3.\nhttps://github.com/apache/dolphinscheduler/pull/13318</p>\n<h2>8.Kerberos expiration issue.</h2>\n<p>Due to the expiration time set in the Kerberos configuration, the HDFS resources in the Resource Center will become inaccessible after a certain period of time. The best solution is to add relevant logic for scheduled credential update.</p>\n<h4>Solution:</h4>\n<p>Add a method in the file <code>dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/utils/CommonUtils.java</code>.```java</p>\n<pre><code class=\"language-java\">   <span class=\"hljs-comment\">/**\n    * * Scheduled credential update.\n    */</span>\n   <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">startCheckKeytabTgtAndReloginJob</span><span class=\"hljs-params\">()</span> {\n       <span class=\"hljs-comment\">// Daily loop, scheduled credential update.</span>\n       Executors.newScheduledThreadPool(<span class=\"hljs-number\">1</span>).scheduleWithFixedDelay(() -&gt; {\n           <span class=\"hljs-keyword\">try</span> {\n               UserGroupInformation.getLoginUser().checkTGTAndReloginFromKeytab();\n               logger.warn(<span class=\"hljs-string\">&quot;Check Kerberos Tgt And Relogin From Keytab Finish.&quot;</span>);\n           } <span class=\"hljs-keyword\">catch</span> (IOException e) {\n               logger.error(<span class=\"hljs-string\">&quot;Check Kerberos Tgt And Relogin From Keytab Error&quot;</span>, e);\n           }\n       }, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, TimeUnit.DAYS);\n       logger.info(<span class=\"hljs-string\">&quot;Start Check Keytab TGT And Relogin Job Success.&quot;</span>);\n   }\n</code></pre>\n<p>Then, call it before the <code>loadKerberosConf</code> method in that file returns true.</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">loadKerberosConf</span><span class=\"hljs-params\">(String javaSecurityKrb5Conf, String loginUserKeytabUsername,\n                                           String loginUserKeytabPath, Configuration configuration)</span> <span class=\"hljs-keyword\">throws</span> IOException {\n        <span class=\"hljs-keyword\">if</span> (CommonUtils.getKerberosStartupState()) {\n            System.setProperty(Constants.JAVA_SECURITY_KRB5_CONF, StringUtils.defaultIfBlank(javaSecurityKrb5Conf,\n                    PropertyUtils.getString(Constants.JAVA_SECURITY_KRB5_CONF_PATH)));\n            configuration.set(Constants.HADOOP_SECURITY_AUTHENTICATION, Constants.KERBEROS);\n            UserGroupInformation.setConfiguration(configuration);\n            UserGroupInformation.loginUserFromKeytab(\n                    StringUtils.defaultIfBlank(loginUserKeytabUsername,\n                            PropertyUtils.getString(Constants.LOGIN_USER_KEY_TAB_USERNAME)),\n                    StringUtils.defaultIfBlank(loginUserKeytabPath,\n                            PropertyUtils.getString(Constants.LOGIN_USER_KEY_TAB_PATH)));\n            startCheckKeytabTgtAndReloginJob();  <span class=\"hljs-comment\">// call here</span>\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n</code></pre>\n",
  "time": "2024-01-19",
  "author": "pinkfloyds",
  "title": "Issue documentation and resolution of the Apache DolphinScheduler upgrade from 1.3.4 to 3.1.2",
  "type": "tech",
  "label": "Tech Sharing"
}