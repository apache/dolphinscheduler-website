{
  "__html": "<h1 id=\"参数的引用\">参数的引用</h1>\n<p>DolphinScheduler 提供参数间相互引用的能力，包括：本地参数引用全局参数、上下游参数传递。因为有引用的存在，就涉及当参数名相同时，参数的优先级问题，详见<a href=\"/zh-cn/docs/3.2.1/guide/parameter/priority\">参数优先级</a></p>\n<h2 id=\"本地任务引用全局参数\">本地任务引用全局参数</h2>\n<p>本地任务引用全局参数的前提是，你已经定义了<a href=\"/zh-cn/docs/3.2.1/guide/parameter/global\">全局参数</a>，使用方式和<a href=\"/zh-cn/docs/3.2.1/guide/parameter/local\">本地参数</a>中的使用方式类似，但是参数的值需要配置成全局参数中的 key。</p>\n<h2 id=\"上游任务传递给下游任务\">上游任务传递给下游任务</h2>\n<p>DolphinScheduler 允许在任务间进行参数传递，目前传递方向仅支持上游单向传递给下游。目前支持这个特性的任务类型有：</p>\n<ul>\n<li><a href=\"/zh-cn/docs/3.2.1/guide/task/shell\">Shell</a></li>\n<li><a href=\"/zh-cn/docs/3.2.1/guide/task/sql\">SQL</a></li>\n<li><a href=\"/zh-cn/docs/3.2.1/guide/task/stored-procedure\">Procedure</a></li>\n<li><a href=\"/zh-cn/docs/3.2.1/guide/task/python\">Python</a></li>\n<li><a href=\"../task/sub-process.md\">SubProcess</a></li>\n<li><a href=\"../task//zh-cn/docs/3.2.1/guide/installation/kubernetes\">Kubernetes</a></li>\n</ul>\n<p>当定义上游节点时，如果有需要将该节点的结果传递给有依赖关系的下游节点，需要在【当前节点设置】的【自定义参数】设置一个方向是 OUT 的变量。如果是 SubProcess 节点无需在【当前节点设置】中设置变量，需要在子流程的工作流定义中设置一个方向是 OUT 的变量。</p>\n<p>上游传递的参数可以在下游节点中被更新，更新方法与<a href=\"#%E5%88%9B%E5%BB%BA-shell-%E4%BB%BB%E5%8A%A1%E5%B9%B6%E8%AE%BE%E7%BD%AE%E5%8F%82%E6%95%B0\">设置参数</a>相同。</p>\n<p>如果定义了同名的传递参数，上游节点的参数将被覆盖。</p>\n<blockquote>\n<p>注：若节点之间没有依赖关系，则局部参数无法通过上游传递。</p>\n</blockquote>\n<h3 id=\"任务样例\">任务样例</h3>\n<p>本样例展示了如何使用参数传递的功能，通过 SHELL 任务来创建本地参数并赋值传递给下游，SQL 任务通过获得上游任务的参数完成查询操作。</p>\n<h4 id=\"创建-shell-任务并设置参数\">创建 SHELL 任务并设置参数</h4>\n<blockquote>\n<p>用户需要传递参数，在定义 SHELL 脚本时，需要输出格式为 ${setValue(key=value)} 的语句，key 为对应参数的 prop，value 为该参数的值。</p>\n</blockquote>\n<p>创建 Node_A 任务，在自定义参数中添加 output 和 value 参数，并编写如下脚本：</p>\n<p><img src=\"/img/new_ui/dev/parameter/context_parameter01.png\" alt=\"context-parameter01\"></p>\n<p>参数说明：</p>\n<ul>\n<li>value：方向选择为 IN，并赋值为 66</li>\n<li>output：方向选择为 OUT，通过脚本 <code>'${setValue(output=1)}'</code> 赋值，并传递给下游参数</li>\n</ul>\n<p>SHELL 节点定义时当日志检测到 ${setValue(output=1)} 的格式时，会将 1 赋值给 output，下游节点便可以直接使用变量 output 的值。同样，您可以在【工作流实例】页面，找到对应的节点实例，便可以查看该变量的值。</p>\n<p>创建 Node_B 任务，主要用于测试输出上游任务 Node_A 传递的参数。</p>\n<p><img src=\"/img/new_ui/dev/parameter/context_parameter02.png\" alt=\"context-parameter02\"></p>\n<h4 id=\"创建-sql-任务并使用参数\">创建 SQL 任务并使用参数</h4>\n<p>完成上述的 SHELL 任务之后，我们可以使用上游所传递的 output 作为 SQL 的查询对象。其中将所查询的 id 重命名为 ID，作为参数输出。</p>\n<p><img src=\"/img/new_ui/dev/parameter/context_parameter03.png\" alt=\"context-parameter03\"></p>\n<blockquote>\n<p>注：如果 SQL 节点的结果只有一行，一个或多个字段，参数的名字需要和字段名称一致。数据类型可选择为除 LIST 以外的其他类型。变量会选择 SQL 查询结果中的列名中与该变量名称相同的列对应的值。</p>\n<p>如果 SQL 节点的结果为多行，一个或多个字段，参数的名字需要和字段名称一致。数据类型选择为 LIST。获取到 SQL 查询结果后会将对应列转化为 LIST，并将该结果转化为 JSON 后作为对应变量的值。</p>\n</blockquote>\n<h4 id=\"保存工作流并设置全局参数\">保存工作流并设置全局参数</h4>\n<p>点击保存工作流图标，并设置全局参数 output 和 value。</p>\n<p><img src=\"/img/new_ui/dev/parameter/context_parameter04.png\" alt=\"context-parameter03\"></p>\n<h4 id=\"查看运行结果\">查看运行结果</h4>\n<p>创建完成工作流之后，上线运行该工作流，查看其运行结果。</p>\n<p>Node_A 运行结果如下：</p>\n<p><img src=\"/img/new_ui/dev/parameter/context_log01.png\" alt=\"context-log01\"></p>\n<p>Node_B 运行结果如下：</p>\n<p><img src=\"/img/new_ui/dev/parameter/context_log02.png\" alt=\"context-log02\"></p>\n<p>Node_mysql 运行结果如下：</p>\n<p><img src=\"/img/new_ui/dev/parameter/context_log03.png\" alt=\"context-log03\"></p>\n<p>虽然在 Node_A 的脚本中为 output 赋值为 1，但日志中显示的值仍然为 100。但根据<a href=\"/zh-cn/docs/3.2.1/guide/parameter/priority\">参数优先级</a>的原则：<code>启动参数 &gt; 本地参数 &gt; 上游任务传递的参数 &gt; 全局参数</code>，在 Node_B 中输出的值为 1。则证明 output 参数参照预期的值在该工作流中传递，并在 Node_mysql 中使用该值完成查询操作。</p>\n<p>但是 value 的值却只有在 Node_A 中输出为 66，其原因为 value 的方向选择为 IN，只有当方向为 OUT 时才会被定义为变量输出。</p>\n<h4 id=\"python-任务传递参数\">Python 任务传递参数</h4>\n<p>使用 <code>print('${setValue(key=%s)}' % value)</code>，DolphinScheduler会捕捉输出中的 <code>${setValue(key=value}</code>来进行参数捕捉，从而传递到下游</p>\n<p>如\n<img src=\"/img/new_ui/dev/parameter/python_context_param.png\" alt=\"python_context_param\"></p>\n<p>注意： 当变量 value 中含有 <code>\\n</code> 标识，如 <code>value = &quot;hello \\n world&quot;</code>， 则需要将 value 进行特殊进行，需要使用 <code>print('${setValue(key=%s)}' % repr(value))</code>, 否则参数无法传递到后面的流程。</p>\n<h4 id=\"subprocess-任务传递参数\">SubProcess 任务传递参数</h4>\n<p>在子流程的工作流定义中定义方向是 OUT 的变量作为输出参数，可以将这些参数传递到子流程节点的下游任务。</p>\n<p>在子流程的工作流定义中创建 A 任务，在自定义参数中添加 var1 和 var2 参数，并编写如下脚本：</p>\n<p><img src=\"/img/new_ui/dev/parameter/context-subprocess01.png\" alt=\"context-subprocess01\"></p>\n<p>保存 subprocess_example1 工作流，设置全局参数 var1。</p>\n<p><img src=\"/img/new_ui/dev/parameter/context-subprocess02.png\" alt=\"context-subprocess02\"></p>\n<p>在新的工作流中创建 sub_process 任务，使用 subprocess_example1 工作流作为子节点。</p>\n<p><img src=\"/img/new_ui/dev/parameter/context-subprocess03.png\" alt=\"context-subprocess03\"></p>\n<p>创建一个 shell 任务作为 sub_process 任务的下游任务，并编写如下脚本：</p>\n<p><img src=\"/img/new_ui/dev/parameter/context-subprocess04.png\" alt=\"context-subprocess04\"></p>\n<p>保存该工作流并运行，下游任务运行结果如下：</p>\n<p><img src=\"/img/new_ui/dev/parameter/context-subprocess05.png\" alt=\"context-subprocess05\"></p>\n<p>虽然在 A 任务中输出 var1 和 var2 两个参数，但是工作流定义中只定义了 var1 的 OUT 变量，下游任务成功输出 var1，证明var1 参数参照预期的值在该工作流中传递。</p>\n<h4 id=\"kubernetes-任务传递参数\">Kubernetes 任务传递参数</h4>\n<p>在Kubernetes任务中不同的程序开发语言可能会采用不同的日志框架，DolphinScheduler为了兼容不同的日志框架，提供了一种通用的日志数据格式，即 <code>${(key=value)}</code> 或 <code>#{(key=value)}</code>，用户可以在应用程序的终端日志中输出以这种格式的日志数据，key 为对应参数的 prop，value 为该参数的值。DolphinScheduler会捕捉输出日志中的 <code>${(key=value)}</code> 和 <code>#{(key=value)}</code> 来进行参数捕捉，从而传递到下游。</p>\n<p>如下图所示：</p>\n<p><img src=\"/img/new_ui/dev/parameter/k8s_context_param.png\" alt=\"kubernetes_context_param\"></p>\n<p>另外需要特别注意的是，并非总是可以收集pod日志，如果用户重定向日志输出流，我们既不能收集日志使用，也不能使用输出参数。</p>\n",
  "location": [
    "功能介绍",
    "参数",
    "参数传递"
  ],
  "time": "2024-2-11",
  "structure": [
    {
      "title": "本地任务引用全局参数",
      "children": [
        {
          "title": "任务样例",
          "children": [
            {
              "title": "创建 SHELL 任务并设置参数",
              "children": [],
              "anchor": "创建-shell-任务并设置参数"
            },
            {
              "title": "创建 SQL 任务并使用参数",
              "children": [],
              "anchor": "创建-sql-任务并使用参数"
            },
            {
              "title": "保存工作流并设置全局参数",
              "children": [],
              "anchor": "保存工作流并设置全局参数"
            },
            {
              "title": "查看运行结果",
              "children": [],
              "anchor": "查看运行结果"
            },
            {
              "title": "Python 任务传递参数",
              "children": [],
              "anchor": "python-任务传递参数"
            },
            {
              "title": "SubProcess 任务传递参数",
              "children": [],
              "anchor": "subprocess-任务传递参数"
            },
            {
              "title": "Kubernetes 任务传递参数",
              "children": [],
              "anchor": "kubernetes-任务传递参数"
            }
          ],
          "anchor": "任务样例"
        }
      ],
      "anchor": "本地任务引用全局参数"
    },
    {
      "title": "上游任务传递给下游任务",
      "children": [
        {
          "title": "任务样例",
          "children": [
            {
              "title": "创建 SHELL 任务并设置参数",
              "children": [],
              "anchor": "创建-shell-任务并设置参数"
            },
            {
              "title": "创建 SQL 任务并使用参数",
              "children": [],
              "anchor": "创建-sql-任务并使用参数"
            },
            {
              "title": "保存工作流并设置全局参数",
              "children": [],
              "anchor": "保存工作流并设置全局参数"
            },
            {
              "title": "查看运行结果",
              "children": [],
              "anchor": "查看运行结果"
            },
            {
              "title": "Python 任务传递参数",
              "children": [],
              "anchor": "python-任务传递参数"
            },
            {
              "title": "SubProcess 任务传递参数",
              "children": [],
              "anchor": "subprocess-任务传递参数"
            },
            {
              "title": "Kubernetes 任务传递参数",
              "children": [],
              "anchor": "kubernetes-任务传递参数"
            }
          ],
          "anchor": "任务样例"
        }
      ],
      "anchor": "上游任务传递给下游任务"
    }
  ],
  "title": "参数的引用",
  "link": "/guide/parameter/context"
}