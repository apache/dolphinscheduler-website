{
  "__html": "<h1 id=\"docker-快速使用教程\">Docker 快速使用教程</h1>\n<p>本教程使用三种不同的方式通过 Docker 完成 DolphinScheduler 的部署</p>\n<ul>\n<li>如果你想要快速体验，推荐使用 standalone-server 镜像，</li>\n<li>如果你想要体验比较完成的服务，推荐使用 docker-compose 启动服务.</li>\n<li>如果你已经有自己的数据库或者 Zookeeper 服务你想要沿用这些基础服务，你可以参考沿用已有的 PostgreSQL 和 ZooKeeper 服务完成部署。</li>\n</ul>\n<h2 id=\"前置条件\">前置条件</h2>\n<p>需要安装 <a href=\"https://docs.docker.com/engine/install/\">Docker</a> 1.13.1 以上版本，以及 <a href=\"https://docs.docker.com/compose/\">Docker Compose</a> 1.28.0 以上版本。</p>\n<h2 id=\"启动服务\">启动服务</h2>\n<h3 id=\"使用-standalone-server-镜像\">使用 standalone-server 镜像</h3>\n<p>使用 standalone-server 镜像启动一个 DolphinScheduler standalone-server 容器应该是最快体验 DolphinScheduler 的方法。通过这个方式\n你可以最快速的体验到 DolphinScheduler 的大部分功能，了解主要和概念和内容。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">DOLPHINSCHEDULER_VERSION=3.2.2</span>\n<span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">docker run --name dolphinscheduler-standalone-server -p 12345:12345 -p 25333:25333 -d apache/dolphinscheduler-standalone-server:<span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">${DOLPHINSCHEDULER_VERSION}</span>&quot;</span></span>\n</code></pre>\n<blockquote>\n<p>注意：请不要将 apache/dolphinscheduler-standalone-server 镜像作为生产镜像，应该仅仅作为快速体验 DolphinScheduler 的功能的途径。\n除了因为他将全部服务运行在一个进程中外，还因为其使用内存数据库 H2 储存其元数据，当服务停止时内存数据库中的数据将会被清空。另外\napache/dolphinscheduler-standalone-server 仅包含 DolphinScheduler 核心服务，部分任务组件（如 Spark 和 Flink 等），\n告警组件（如 Telegram 和 Dingtalk 等）需要外部的组件或对应的配置后</p>\n</blockquote>\n<h3 id=\"使用-docker-compose-启动服务\">使用 docker-compose 启动服务</h3>\n<p>使用 docker-compose 启动服务相比 standalone-server 的优点是 DolphinScheduler 的各个是独立的容器和进程，相互影响降到最小，且能够在\n服务重启的时候保留元数据（如需要挂载到本地路径需要做指定）。他更健壮，能保证用户体验更加完整的 DolphinScheduler 服务。这种方式需要先安装\n<a href=\"https://docs.docker.com/compose/install/\">docker-compose</a>，链接适用于 Mac，Linux，Windows。</p>\n<p>确保 docker-compose 顺利安装后，需要获取 <code>docker-compose.yaml</code> 文件，通过<a href=\"https://dolphinscheduler.apache.org/en-us/download/3.2.2\">下载页面</a>\n下载对应版本源码包可能是最快的方法，当下载完源码后就可以运行命令进行部署了。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">DOLPHINSCHEDULER_VERSION=3.2.2</span>\n<span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">tar -zxf apache-dolphinscheduler-<span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">${DOLPHINSCHEDULER_VERSION}</span>&quot;</span>-src.tar.gz</span>\n<span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">Mac Linux 用户</span>\n<span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"hljs-built_in\">cd</span> apache-dolphinscheduler-<span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">${DOLPHINSCHEDULER_VERSION}</span>&quot;</span>-src/deploy/docker</span>\n<span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">Windows 用户, `<span class=\"hljs-built_in\">cd</span> apache-dolphinscheduler-<span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">${DOLPHINSCHEDULER_VERSION}</span>&quot;</span>-src\\deploy\\docker`</span>\n<span class=\"hljs-meta prompt_\">\n# </span><span class=\"language-bash\">如果需要初始化或者升级数据库结构，需要指定profile为schema</span>\n<span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">docker-compose --profile schema up -d</span>\n<span class=\"hljs-meta prompt_\">\n# </span><span class=\"language-bash\">启动dolphinscheduler所有服务，指定profile为all</span>\n<span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">docker-compose --profile all up -d</span>\n</code></pre>\n<blockquote>\n<p>提醒：安装完成 docker-compose 后需要修改部分配置以便能更好体验 DolphinScheduler 服务，我们推荐配置不少于 4GB 的空闲内存，详见\n<a href=\"https://stackoverflow.com/a/44533437/7152658\">How to assign more memory to docker container</a>.</p>\n<p>通过 docker-compose 启动服务时，除了会启动 DolphinScheduler 对应的服务外，还会启动必要依赖服务，如数据库 PostgreSQL 和 服务发现 ZooKeeper</p>\n</blockquote>\n<h3 id=\"沿用已有的-postgresql-和-zookeeper-服务\">沿用已有的 PostgreSQL 和 ZooKeeper 服务</h3>\n<p>使用 docker-compose 启动服务会新启动数据库，以及 ZooKeeper 服务。如果你已经有在运行中的数据库，或者\nZooKeeper 且不想启动新的服务，可以使用这个方式分别启动 DolphinScheduler 容器。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">DOLPHINSCHEDULER_VERSION=3.2.2</span>\n<span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">初始化数据库，其确保数据库 &lt;DATABASE&gt; 已经存在</span>\n<span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">docker run -d --name dolphinscheduler-tools \\\n    -e DATABASE=<span class=\"hljs-string\">&quot;postgresql&quot;</span> \\\n    -e SPRING_DATASOURCE_URL=<span class=\"hljs-string\">&quot;jdbc:postgresql://localhost:5432/&lt;DATABASE&gt;&quot;</span> \\\n    -e SPRING_DATASOURCE_USERNAME=<span class=\"hljs-string\">&quot;&lt;USER&gt;&quot;</span> \\\n    -e SPRING_DATASOURCE_PASSWORD=<span class=\"hljs-string\">&quot;&lt;PASSWORD&gt;&quot;</span> \\\n    -e SPRING_JACKSON_TIME_ZONE=<span class=\"hljs-string\">&quot;UTC&quot;</span> \\\n    --net host \\\n    apache/dolphinscheduler-tools:<span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">${DOLPHINSCHEDULER_VERSION}</span>&quot;</span> tools/bin/upgrade-schema.sh</span>\n<span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">启动 DolphinScheduler 对应的服务</span>\n<span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">docker run -d --name dolphinscheduler-master \\\n    -e DATABASE=<span class=\"hljs-string\">&quot;postgresql&quot;</span> \\\n    -e SPRING_DATASOURCE_URL=<span class=\"hljs-string\">&quot;jdbc:postgresql://localhost:5432/&lt;DATABASE&gt;&quot;</span> \\\n    -e SPRING_DATASOURCE_USERNAME=<span class=\"hljs-string\">&quot;&lt;USER&gt;&quot;</span> \\\n    -e SPRING_DATASOURCE_PASSWORD=<span class=\"hljs-string\">&quot;&lt;PASSWORD&gt;&quot;</span> \\\n    -e SPRING_JACKSON_TIME_ZONE=<span class=\"hljs-string\">&quot;UTC&quot;</span> \\\n    -e REGISTRY_ZOOKEEPER_CONNECT_STRING=<span class=\"hljs-string\">&quot;localhost:2181&quot;</span> \\\n    --net host \\\n    -d apache/dolphinscheduler-master:<span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">${DOLPHINSCHEDULER_VERSION}</span>&quot;</span></span>\n<span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">docker run -d --name dolphinscheduler-worker \\\n    -e DATABASE=<span class=\"hljs-string\">&quot;postgresql&quot;</span> \\\n    -e SPRING_DATASOURCE_URL=<span class=\"hljs-string\">&quot;jdbc:postgresql://localhost:5432/&lt;DATABASE&gt;&quot;</span> \\\n    -e SPRING_DATASOURCE_USERNAME=<span class=\"hljs-string\">&quot;&lt;USER&gt;&quot;</span> \\\n    -e SPRING_DATASOURCE_PASSWORD=<span class=\"hljs-string\">&quot;&lt;PASSWORD&gt;&quot;</span> \\\n    -e SPRING_JACKSON_TIME_ZONE=<span class=\"hljs-string\">&quot;UTC&quot;</span> \\\n    -e REGISTRY_ZOOKEEPER_CONNECT_STRING=<span class=\"hljs-string\">&quot;localhost:2181&quot;</span> \\\n    --net host \\\n    -d apache/dolphinscheduler-worker:<span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">${DOLPHINSCHEDULER_VERSION}</span>&quot;</span></span>\n<span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">docker run -d --name dolphinscheduler-api \\\n    -e DATABASE=<span class=\"hljs-string\">&quot;postgresql&quot;</span> \\\n    -e SPRING_DATASOURCE_URL=<span class=\"hljs-string\">&quot;jdbc:postgresql://localhost:5432/&lt;DATABASE&gt;&quot;</span> \\\n    -e SPRING_DATASOURCE_USERNAME=<span class=\"hljs-string\">&quot;&lt;USER&gt;&quot;</span> \\\n    -e SPRING_DATASOURCE_PASSWORD=<span class=\"hljs-string\">&quot;&lt;PASSWORD&gt;&quot;</span> \\\n    -e SPRING_JACKSON_TIME_ZONE=<span class=\"hljs-string\">&quot;UTC&quot;</span> \\\n    -e REGISTRY_ZOOKEEPER_CONNECT_STRING=<span class=\"hljs-string\">&quot;localhost:2181&quot;</span> \\\n    --net host \\\n    -d apache/dolphinscheduler-api:<span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">${DOLPHINSCHEDULER_VERSION}</span>&quot;</span></span>\n<span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">docker run -d --name dolphinscheduler-alert-server \\\n    -e DATABASE=<span class=\"hljs-string\">&quot;postgresql&quot;</span> \\\n    -e SPRING_DATASOURCE_URL=<span class=\"hljs-string\">&quot;jdbc:postgresql://localhost:5432/&lt;DATABASE&gt;&quot;</span> \\\n    -e SPRING_DATASOURCE_USERNAME=<span class=\"hljs-string\">&quot;&lt;USER&gt;&quot;</span> \\\n    -e SPRING_DATASOURCE_PASSWORD=<span class=\"hljs-string\">&quot;&lt;PASSWORD&gt;&quot;</span> \\\n    -e SPRING_JACKSON_TIME_ZONE=<span class=\"hljs-string\">&quot;UTC&quot;</span> \\\n    -e REGISTRY_ZOOKEEPER_CONNECT_STRING=<span class=\"hljs-string\">&quot;localhost:2181&quot;</span> \\\n    --net host \\\n    -d apache/dolphinscheduler-alert-server:<span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">${DOLPHINSCHEDULER_VERSION}</span>&quot;</span></span>\n</code></pre>\n<blockquote>\n<p>注意：如果你本地还没有对应的数据库和 ZooKeeper 服务，但是想要尝试这个启动方式，可以先安装并启动\n<a href=\"https://www.postgresql.org/download/\">PostgreSQL</a>(8.2.15+) 以及 <a href=\"https://zookeeper.apache.org/releases.html\">ZooKeeper</a>(3.8.0)</p>\n</blockquote>\n<h2 id=\"登录系统\">登录系统</h2>\n<p>不管你是用那种方式启动的服务，只要服务启动后，你都可以通过 <a href=\"http://localhost:12345/dolphinscheduler/ui\">http://localhost:12345/dolphinscheduler/ui</a>\n访问 DolphinScheduler。访问上述链接后会跳转到登陆页面，DolphinScheduler 默认的用户和密码分别为 <code>admin</code> 和 <code>dolphinscheduler123</code>。\n想要了解更多操作请参考用户手册<a href=\"/zh-cn/docs/3.2.2/guide/start/quick-start\">快速上手</a>。</p>\n<p><img src=\"/img/new_ui/dev/quick-start/login.png\" alt=\"login\"></p>\n<blockquote>\n<p>注意：如果你使用沿用已有的 PostgreSQL 和 ZooKeeper 服务方式启动服务，且服务分布在多台机器中，\n请将上述的地址改成你 API 容器启动的 hostname 或者 IP。</p>\n</blockquote>\n<h2 id=\"环境变量\">环境变量</h2>\n<p>可以通过环境变量来修改 Docker 运行的配置，我们在沿用已有的 PostgreSQL 和 ZooKeeper 服务中就通过环境变量修改了 Docker 的数据库配置和\n注册中心配置，关于全部的配置环境可以查看对应组件的 application.yaml 文件了解。</p>\n",
  "location": [
    "快速上手",
    "Docker部署(Docker)"
  ],
  "time": "2024-7-16",
  "structure": [
    {
      "title": "前置条件",
      "children": [
        {
          "title": "使用 standalone-server 镜像",
          "children": [],
          "anchor": "使用-standalone-server-镜像"
        },
        {
          "title": "使用 docker-compose 启动服务",
          "children": [],
          "anchor": "使用-docker-compose-启动服务"
        },
        {
          "title": "沿用已有的 PostgreSQL 和 ZooKeeper 服务",
          "children": [],
          "anchor": "沿用已有的-postgresql-和-zookeeper-服务"
        }
      ],
      "anchor": "前置条件"
    },
    {
      "title": "启动服务",
      "children": [
        {
          "title": "使用 standalone-server 镜像",
          "children": [],
          "anchor": "使用-standalone-server-镜像"
        },
        {
          "title": "使用 docker-compose 启动服务",
          "children": [],
          "anchor": "使用-docker-compose-启动服务"
        },
        {
          "title": "沿用已有的 PostgreSQL 和 ZooKeeper 服务",
          "children": [],
          "anchor": "沿用已有的-postgresql-和-zookeeper-服务"
        }
      ],
      "anchor": "启动服务"
    },
    {
      "title": "登录系统",
      "children": [
        {
          "title": "使用 standalone-server 镜像",
          "children": [],
          "anchor": "使用-standalone-server-镜像"
        },
        {
          "title": "使用 docker-compose 启动服务",
          "children": [],
          "anchor": "使用-docker-compose-启动服务"
        },
        {
          "title": "沿用已有的 PostgreSQL 和 ZooKeeper 服务",
          "children": [],
          "anchor": "沿用已有的-postgresql-和-zookeeper-服务"
        }
      ],
      "anchor": "登录系统"
    },
    {
      "title": "环境变量",
      "children": [
        {
          "title": "使用 standalone-server 镜像",
          "children": [],
          "anchor": "使用-standalone-server-镜像"
        },
        {
          "title": "使用 docker-compose 启动服务",
          "children": [],
          "anchor": "使用-docker-compose-启动服务"
        },
        {
          "title": "沿用已有的 PostgreSQL 和 ZooKeeper 服务",
          "children": [],
          "anchor": "沿用已有的-postgresql-和-zookeeper-服务"
        }
      ],
      "anchor": "环境变量"
    }
  ],
  "title": "Docker 快速使用教程",
  "link": "/guide/start/docker"
}