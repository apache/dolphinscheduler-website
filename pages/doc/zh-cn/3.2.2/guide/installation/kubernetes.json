{
  "__html": "<h1 id=\"快速试用-kubernetes-部署\">快速试用 Kubernetes 部署</h1>\n<p>Kubernetes 部署目的是在 Kubernetes 集群中部署 DolphinScheduler 服务，能调度大量任务，可用于在生产中部署。</p>\n<p>如果你是新手，想要体验 DolphinScheduler 的功能，推荐使用<a href=\"/zh-cn/docs/3.2.2/guide/installation/standalone\">Standalone</a>方式体检。如果你想体验更完整的功能，或者更大的任务量，推荐使用<a href=\"/zh-cn/docs/3.2.2/guide/installation/pseudo-cluster\">伪集群部署</a>。如果你是在生产中使用，推荐使用<a href=\"/zh-cn/docs/3.2.2/guide/installation/cluster\">集群部署</a>或者<a href=\"/zh-cn/docs/3.2.2/guide/installation/kubernetes\">kubernetes</a></p>\n<blockquote>\n<p><strong>提示</strong>: 您也可以尝试使用<a href=\"https://github.com/apache/dolphinscheduler-operator\">DolphinScheduler K8S Operator</a>，目前处于 alpha1 阶段</p>\n</blockquote>\n<h2 id=\"先决条件\">先决条件</h2>\n<ul>\n<li><a href=\"https://helm.sh/\">Helm</a> 3.1.0+</li>\n<li><a href=\"https://kubernetes.io/\">Kubernetes</a> 1.12+</li>\n<li>PV 供应(需要基础设施支持)</li>\n</ul>\n<h2 id=\"安装-dolphinscheduler\">安装 dolphinscheduler</h2>\n<pre><code class=\"language-bash\"><span class=\"hljs-comment\"># 自行选择对应的版本</span>\n<span class=\"hljs-built_in\">export</span> VERSION=3.2.1\nhelm pull oci://registry-1.docker.io/apache/dolphinscheduler-helm --version <span class=\"hljs-variable\">${VERSION}</span>\ntar -xvf dolphinscheduler-helm-<span class=\"hljs-variable\">${VERSION}</span>.tgz\n<span class=\"hljs-built_in\">cd</span> dolphinscheduler-helm\nhelm repo add bitnami https://charts.bitnami.com/bitnami\nhelm dependency update .\nhelm install dolphinscheduler .\n</code></pre>\n<p>将名为 <code>dolphinscheduler</code> 的版本(release) 发布到 <code>test</code> 的命名空间中：</p>\n<pre><code class=\"language-bash\">$ helm install dolphinscheduler . -n <span class=\"hljs-built_in\">test</span>\n</code></pre>\n<blockquote>\n<p><strong>提示</strong>: 如果名为 <code>test</code> 的命名空间被使用, 选项参数 <code>-n test</code> 需要添加到 <code>helm</code> 和 <code>kubectl</code> 命令中</p>\n</blockquote>\n<p>这些命令以默认配置在 Kubernetes 集群上部署 DolphinScheduler，<a href=\"#appendix-configuration\">附录-配置</a>部分列出了可以在安装过程中配置的参数 <!-- markdown-link-check-disable-line --></p>\n<blockquote>\n<p><strong>提示</strong>: 列出所有已发布的版本，使用 <code>helm list</code></p>\n</blockquote>\n<p><strong>PostgreSQL</strong> (用户 <code>root</code>, 密码 <code>root</code>, 数据库 <code>dolphinscheduler</code>) 和 <strong>ZooKeeper</strong> 服务将会默认启动</p>\n<h2 id=\"访问-dolphinscheduler-前端页面\">访问 DolphinScheduler 前端页面</h2>\n<p>如果 <code>values.yaml</code> 文件中的 <code>ingress.enabled</code> 被设置为 <code>true</code>, 在浏览器中访问 <code>http://${ingress.host}/dolphinscheduler</code> 即可</p>\n<blockquote>\n<p><strong>提示</strong>: 如果 ingress 访问遇到问题，请联系 Kubernetes 管理员并查看 <a href=\"https://kubernetes.io/docs/concepts/services-networking/ingress/\">Ingress</a></p>\n</blockquote>\n<p>否则，当 <code>api.service.type=ClusterIP</code> 时，你需要执行 port-forward 端口转发命令：</p>\n<pre><code class=\"language-bash\">$ kubectl port-forward --address 0.0.0.0 svc/dolphinscheduler-api 12345:12345\n$ kubectl port-forward --address 0.0.0.0 -n <span class=\"hljs-built_in\">test</span> svc/dolphinscheduler-api 12345:12345 <span class=\"hljs-comment\"># 使用 test 命名空间</span>\n</code></pre>\n<blockquote>\n<p><strong>提示</strong>: 如果出现 <code>unable to do port forwarding: socat not found</code> 错误, 需要先安装 <code>socat</code></p>\n</blockquote>\n<p>访问前端页面：http://localhost:12345/dolphinscheduler/ui，如果有需要请修改成对应的 IP 地址</p>\n<p>或者当 <code>api.service.type=NodePort</code> 时，你需要执行命令：</p>\n<pre><code class=\"language-bash\">NODE_IP=$(kubectl get no -n {{ .Release.Namespace }} -o jsonpath=<span class=\"hljs-string\">&quot;{.items[0].status.addresses[0].address}&quot;</span>)\nNODE_PORT=$(kubectl get svc {{ template <span class=\"hljs-string\">&quot;dolphinscheduler.fullname&quot;</span> . }}-api -n {{ .Release.Namespace }} -o jsonpath=<span class=\"hljs-string\">&quot;{.spec.ports[0].nodePort}&quot;</span>)\n<span class=\"hljs-built_in\">echo</span> http://<span class=\"hljs-variable\">$NODE_IP</span>:<span class=\"hljs-variable\">$NODE_PORT</span>/dolphinscheduler\n</code></pre>\n<p>然后访问前端页面: http://localhost:12345/dolphinscheduler/ui</p>\n<p>默认的用户是<code>admin</code>，默认的密码是<code>dolphinscheduler123</code></p>\n<p>请参考用户手册章节的<a href=\"/zh-cn/docs/3.2.2/guide/start/quick-start\">快速上手</a>查看如何使用 DolphinScheduler</p>\n<h2 id=\"卸载-dolphinscheduler\">卸载 dolphinscheduler</h2>\n<p>卸载名为 <code>dolphinscheduler</code> 的版本(release)，请执行：</p>\n<pre><code class=\"language-bash\">$ helm uninstall dolphinscheduler\n</code></pre>\n<p>该命令将删除与 <code>dolphinscheduler</code> 相关的所有 Kubernetes 组件（但 PVC 除外），并删除版本(release)</p>\n<p>要删除与 <code>dolphinscheduler</code> 相关的 PVC，请执行：</p>\n<pre><code class=\"language-bash\">$ kubectl delete pvc -l app.kubernetes.io/instance=dolphinscheduler\n</code></pre>\n<blockquote>\n<p><strong>注意</strong>: 删除 PVC 也会删除所有数据，请谨慎操作！</p>\n</blockquote>\n<h2 id=\"[试验性]-worker-自动扩缩容\">[试验性] worker 自动扩缩容</h2>\n<blockquote>\n<p><strong>警告</strong>: 目前此功能尚在试验阶段，不建议在生产环境使用！</p>\n</blockquote>\n<p><code>DolphinScheduler</code> 使用 <a href=\"https://github.com/kedacore/keda\">KEDA</a> 对 worker 进行自动扩缩容。但是 <code>DolphinScheduler</code> 默认是不启用该功能的。\n您需要做下列配置来启用该功能：</p>\n<p>首先您需要创建一个单独的命名空间并使用 <code>helm</code> 安装 <code>KEDA</code>：</p>\n<pre><code class=\"language-bash\">helm repo add kedacore https://kedacore.github.io/charts\n\nhelm repo update\n\nkubectl create namespace keda\n\nhelm install keda kedacore/keda \\\n    --namespace keda \\\n    --version <span class=\"hljs-string\">&quot;v2.0.0&quot;</span>\n</code></pre>\n<p>其次，您需要将 <code>values.yaml</code> 中的 <code>worker.keda.enabled</code> 配置设置成 <code>true</code>，或者您可以通过以下命令安装 chart：</p>\n<pre><code class=\"language-bash\">helm install dolphinscheduler . --<span class=\"hljs-built_in\">set</span> worker.keda.enabled=<span class=\"hljs-literal\">true</span> -n &lt;your-namespace-to-deploy-dolphinscheduler&gt;\n</code></pre>\n<p>一旦自动扩缩容功能启用，worker的数量将基于任务状态在 <code>minReplicaCount</code> 和 <code>maxReplicaCount</code> 之间弹性扩缩。\n举例来说，当您的 <code>DolphinScheduler</code> 实例中没有任务在运行时，将不会有 worker。因此，这个功能会显著节约资源，降低您的使用成本。</p>\n<p>自动扩缩容功能目前支持 <code>DolphinScheduler 官方 helm chart</code> 中自带的 <code>postgresql</code> and <code>mysql</code>。\n如果您要使用外部的数据库，自动扩缩容功能目前只支持 <code>mysql</code> 和 <code>postgresql</code> 类型的外部数据库。</p>\n<p>如果您在使用自动扩缩容时需要改变 worker <code>WORKER_EXEC_THREADS</code> 的值，请直接在 <code>values.yaml</code> 中修改 <code>worker.env.WORKER_EXEC_THREADS</code> 的值，\n而不要通过 <code>configmap</code> 来更新。</p>\n<h2 id=\"配置\">配置</h2>\n<p>配置文件为 <code>values.yaml</code>，<a href=\"#appendix-configuration\">附录-配置</a> 表格列出了 DolphinScheduler 的可配置参数及其默认值 <!-- markdown-link-check-disable-line --></p>\n<h2 id=\"支持矩阵\">支持矩阵</h2>\n<table>\n<thead>\n<tr>\n<th>Type</th>\n<th>支持</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Shell</td>\n<td>是</td>\n<td></td>\n</tr>\n<tr>\n<td>Python2</td>\n<td>是</td>\n<td></td>\n</tr>\n<tr>\n<td>Python3</td>\n<td>间接支持</td>\n<td>详见 FAQ</td>\n</tr>\n<tr>\n<td>Hadoop2</td>\n<td>间接支持</td>\n<td>详见 FAQ</td>\n</tr>\n<tr>\n<td>Hadoop3</td>\n<td>尚未确定</td>\n<td>尚未测试</td>\n</tr>\n<tr>\n<td>Spark-Local(client)</td>\n<td>间接支持</td>\n<td>详见 FAQ</td>\n</tr>\n<tr>\n<td>Spark-YARN(cluster)</td>\n<td>间接支持</td>\n<td>详见 FAQ</td>\n</tr>\n<tr>\n<td>Spark-Standalone(cluster)</td>\n<td>尚不</td>\n<td></td>\n</tr>\n<tr>\n<td>Spark-Kubernetes(cluster)</td>\n<td>尚不</td>\n<td></td>\n</tr>\n<tr>\n<td>Flink-Local(local&gt;=1.11)</td>\n<td>尚不</td>\n<td>Generic CLI 模式尚未支持</td>\n</tr>\n<tr>\n<td>Flink-YARN(yarn-cluster)</td>\n<td>间接支持</td>\n<td>详见 FAQ</td>\n</tr>\n<tr>\n<td>Flink-YARN(yarn-session/yarn-per-job/yarn-application&gt;=1.11)</td>\n<td>尚不</td>\n<td>Generic CLI 模式尚未支持</td>\n</tr>\n<tr>\n<td>Flink-Standalone(default)</td>\n<td>尚不</td>\n<td></td>\n</tr>\n<tr>\n<td>Flink-Standalone(remote&gt;=1.11)</td>\n<td>尚不</td>\n<td>Generic CLI 模式尚未支持</td>\n</tr>\n<tr>\n<td>Flink-Kubernetes(default)</td>\n<td>尚不</td>\n<td></td>\n</tr>\n<tr>\n<td>Flink-Kubernetes(remote&gt;=1.11)</td>\n<td>尚不</td>\n<td>Generic CLI 模式尚未支持</td>\n</tr>\n<tr>\n<td>Flink-NativeKubernetes(kubernetes-session/application&gt;=1.11)</td>\n<td>尚不</td>\n<td>Generic CLI 模式尚未支持</td>\n</tr>\n<tr>\n<td>MapReduce</td>\n<td>间接支持</td>\n<td>详见 FAQ</td>\n</tr>\n<tr>\n<td>Kerberos</td>\n<td>间接支持</td>\n<td>详见 FAQ</td>\n</tr>\n<tr>\n<td>HTTP</td>\n<td>是</td>\n<td></td>\n</tr>\n<tr>\n<td>DataX</td>\n<td>间接支持</td>\n<td>详见 FAQ</td>\n</tr>\n<tr>\n<td>Sqoop</td>\n<td>间接支持</td>\n<td>详见 FAQ</td>\n</tr>\n<tr>\n<td>SQL-MySQL</td>\n<td>间接支持</td>\n<td>详见 FAQ</td>\n</tr>\n<tr>\n<td>SQL-PostgreSQL</td>\n<td>是</td>\n<td></td>\n</tr>\n<tr>\n<td>SQL-Hive</td>\n<td>间接支持</td>\n<td>详见 FAQ</td>\n</tr>\n<tr>\n<td>SQL-Spark</td>\n<td>间接支持</td>\n<td>详见 FAQ</td>\n</tr>\n<tr>\n<td>SQL-ClickHouse</td>\n<td>间接支持</td>\n<td>详见 FAQ</td>\n</tr>\n<tr>\n<td>SQL-Oracle</td>\n<td>间接支持</td>\n<td>详见 FAQ</td>\n</tr>\n<tr>\n<td>SQL-SQLServer</td>\n<td>间接支持</td>\n<td>详见 FAQ</td>\n</tr>\n<tr>\n<td>SQL-DB2</td>\n<td>间接支持</td>\n<td>详见 FAQ</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"faq\">FAQ</h2>\n<h3 id=\"如何查看一个-pod-容器的日志？\">如何查看一个 pod 容器的日志？</h3>\n<p>列出所有 pods (别名 <code>po</code>):</p>\n<pre><code>kubectl get po\nkubectl get po -n test # with test namespace\n</code></pre>\n<p>查看名为 dolphinscheduler-master-0 的 pod 容器的日志:</p>\n<pre><code>kubectl logs dolphinscheduler-master-0\nkubectl logs -f dolphinscheduler-master-0 # 跟随日志输出\nkubectl logs --tail 10 dolphinscheduler-master-0 -n test # 显示倒数10行日志\n</code></pre>\n<h3 id=\"如何在-kubernetes-上扩缩容-api,-master-和-worker？\">如何在 Kubernetes 上扩缩容 api, master 和 worker？</h3>\n<p>列出所有 deployments (别名 <code>deploy</code>):</p>\n<pre><code>kubectl get deploy\nkubectl get deploy -n test # with test namespace\n</code></pre>\n<p>扩缩容 api 至 3 个副本:</p>\n<pre><code>kubectl scale --replicas=3 deploy dolphinscheduler-api\nkubectl scale --replicas=3 deploy dolphinscheduler-api -n test # with test namespace\n</code></pre>\n<p>列出所有 statefulsets (别名 <code>sts</code>):</p>\n<pre><code>kubectl get sts\nkubectl get sts -n test # with test namespace\n</code></pre>\n<p>扩缩容 master 至 2 个副本:</p>\n<pre><code>kubectl scale --replicas=2 sts dolphinscheduler-master\nkubectl scale --replicas=2 sts dolphinscheduler-master -n test # with test namespace\n</code></pre>\n<p>扩缩容 worker 至 6 个副本:</p>\n<pre><code>kubectl scale --replicas=6 sts dolphinscheduler-worker\nkubectl scale --replicas=6 sts dolphinscheduler-worker -n test # with test namespace\n</code></pre>\n<h3 id=\"如何用-mysql-替代-postgresql-作为-dolphinscheduler-的数据库？\">如何用 MySQL 替代 PostgreSQL 作为 DolphinScheduler 的数据库？</h3>\n<blockquote>\n<p>由于商业许可证的原因，我们不能直接使用 MySQL 的驱动包.</p>\n<p>如果你要使用 MySQL, 你可以基于官方镜像 <code>apache/dolphinscheduler-&lt;service&gt;</code> 进行构建.</p>\n<p>从 3.0.0 版本起，dolphinscheduler 已经微服务化，更改元数据存储需要对把所有的服务都替换为 MySQL 驱动包，包括 dolphinscheduler-tools, dolphinscheduler-master, dolphinscheduler-worker, dolphinscheduler-api, dolphinscheduler-alert-server .</p>\n</blockquote>\n<ol>\n<li>\n<p>下载 MySQL 驱动包 <a href=\"https://repo1.maven.org/maven2/mysql/mysql-connector-java/8.0.16/mysql-connector-java-8.0.16.jar\">mysql-connector-java-8.0.16.jar</a></p>\n</li>\n<li>\n<p>创建一个新的 <code>Dockerfile</code>，用于添加 MySQL 的驱动包:</p>\n</li>\n</ol>\n<pre><code>FROM dolphinscheduler.docker.scarf.sh/apache/dolphinscheduler-&lt;service&gt;:3.2.2\n# 例如\n# FROM dolphinscheduler.docker.scarf.sh/apache/dolphinscheduler-tools:3.2.2\n\n# 注意，如果构建的是dolphinscheduler-tools镜像\n# 需要将下面一行修改为COPY mysql-connector-java-8.0.16.jar /opt/dolphinscheduler/tools/libs\n# 其他服务保持不变即可\nCOPY mysql-connector-java-8.0.16.jar /opt/dolphinscheduler/libs\n</code></pre>\n<ol start=\"3\">\n<li>构建一个包含 MySQL 驱动包的新镜像:</li>\n</ol>\n<pre><code>docker build -t apache/dolphinscheduler-&lt;service&gt;:mysql-driver .\n</code></pre>\n<ol start=\"4\">\n<li>\n<p>推送 docker 镜像 <code>apache/dolphinscheduler-&lt;service&gt;:mysql-driver</code> 到一个 docker registry 中</p>\n</li>\n<li>\n<p>修改 <code>values.yaml</code> 文件中 image 的 <code>repository</code> 字段，并更新 <code>tag</code> 为 <code>mysql-driver</code></p>\n</li>\n<li>\n<p>修改 <code>values.yaml</code> 文件中 postgresql 的 <code>enabled</code> 为 <code>false</code></p>\n</li>\n<li>\n<p>修改 <code>values.yaml</code> 文件中的 externalDatabase 配置 (尤其修改 <code>host</code>, <code>username</code> 和 <code>password</code>)</p>\n</li>\n</ol>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">externalDatabase:</span>\n  <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">&quot;mysql&quot;</span>\n  <span class=\"hljs-attr\">host:</span> <span class=\"hljs-string\">&quot;localhost&quot;</span>\n  <span class=\"hljs-attr\">port:</span> <span class=\"hljs-string\">&quot;3306&quot;</span>\n  <span class=\"hljs-attr\">username:</span> <span class=\"hljs-string\">&quot;root&quot;</span>\n  <span class=\"hljs-attr\">password:</span> <span class=\"hljs-string\">&quot;root&quot;</span>\n  <span class=\"hljs-attr\">database:</span> <span class=\"hljs-string\">&quot;dolphinscheduler&quot;</span>\n  <span class=\"hljs-attr\">params:</span> <span class=\"hljs-string\">&quot;useUnicode=true&amp;characterEncoding=UTF-8&quot;</span>\n</code></pre>\n<ol start=\"8\">\n<li>部署 dolphinscheduler (详见<strong>安装 dolphinscheduler</strong>)</li>\n</ol>\n<h3 id=\"如何在数据源中心支持-mysql-或者-oracle-数据源？\">如何在数据源中心支持 MySQL 或者 Oracle 数据源？</h3>\n<blockquote>\n<p>由于商业许可证的原因，我们不能直接使用 MySQL 或者 Oracle 的驱动包.</p>\n<p>如果你要添加 MySQL 或者 Oracle, 你可以基于官方镜像 <code>apache/dolphinscheduler-&lt;service&gt;</code> 进行构建.</p>\n<p>需要更改 dolphinscheduler-worker, dolphinscheduler-api 两个服务的镜像.</p>\n</blockquote>\n<ol>\n<li>\n<p>下载 MySQL 驱动包 <a href=\"https://repo1.maven.org/maven2/mysql/mysql-connector-java/8.0.16/mysql-connector-java-8.0.16.jar\">mysql-connector-java-8.0.16.jar</a>\n或者 Oracle 驱动包 <a href=\"https://repo1.maven.org/maven2/com/oracle/database/jdbc/ojdbc8/\">ojdbc8.jar</a> (例如 <code>ojdbc8-19.9.0.0.jar</code>)</p>\n</li>\n<li>\n<p>创建一个新的 <code>Dockerfile</code>，用于添加 MySQL 或者 Oracle 驱动包:</p>\n</li>\n</ol>\n<pre><code>FROM dolphinscheduler.docker.scarf.sh/apache/dolphinscheduler-&lt;service&gt;:3.2.2\n# 例如\n# FROM dolphinscheduler.docker.scarf.sh/apache/dolphinscheduler-worker:3.2.2\n\n# 如果你想支持 MySQL 数据源\nCOPY mysql-connector-java-8.0.16.jar /opt/dolphinscheduler/libs\n\n# 如果你想支持 Oracle 数据源\nCOPY ojdbc8-19.9.0.0.jar /opt/dolphinscheduler/libs\n</code></pre>\n<ol start=\"3\">\n<li>构建一个包含 MySQL 或者 Oracle 驱动包的新镜像:</li>\n</ol>\n<pre><code>docker build -t apache/dolphinscheduler-&lt;service&gt;:new-driver .\n</code></pre>\n<ol start=\"4\">\n<li>\n<p>推送 docker 镜像 <code>apache/dolphinscheduler-&lt;service&gt;:new-driver</code> 到一个 docker registry 中</p>\n</li>\n<li>\n<p>修改 <code>values.yaml</code> 文件中 image 的 <code>repository</code> 字段，并更新 <code>tag</code> 为 <code>new-driver</code></p>\n</li>\n<li>\n<p>部署 dolphinscheduler (详见<strong>安装 dolphinscheduler</strong>)</p>\n</li>\n<li>\n<p>在数据源中心添加一个 MySQL 或者 Oracle 数据源</p>\n</li>\n</ol>\n<h3 id=\"如何支持-python-2-pip-以及自定义-requirements.txt？\">如何支持 Python 2 pip 以及自定义 requirements.txt？</h3>\n<blockquote>\n<p>只需要更改 dolphinscheduler-worker 服务的镜像.</p>\n</blockquote>\n<ol>\n<li>创建一个新的 <code>Dockerfile</code>，用于安装 pip:</li>\n</ol>\n<pre><code>FROM dolphinscheduler.docker.scarf.sh/apache/dolphinscheduler-worker:3.2.2\nCOPY requirements.txt /tmp\nRUN apt-get update &amp;&amp; \\\n    apt-get install -y --no-install-recommends python-pip &amp;&amp; \\\n    pip install --no-cache-dir -r /tmp/requirements.txt &amp;&amp; \\\n    rm -rf /var/lib/apt/lists/*\n</code></pre>\n<p>这个命令会安装默认的 <strong>pip 18.1</strong>. 如果你想升级 pip, 只需添加一行</p>\n<pre><code>pip install --no-cache-dir -U pip &amp;&amp; \\\n</code></pre>\n<ol start=\"2\">\n<li>构建一个包含 pip 的新镜像:</li>\n</ol>\n<pre><code>docker build -t apache/dolphinscheduler-worker:pip .\n</code></pre>\n<ol start=\"3\">\n<li>\n<p>推送 docker 镜像 <code>apache/dolphinscheduler-worker:pip</code> 到一个 docker registry 中</p>\n</li>\n<li>\n<p>修改 <code>values.yaml</code> 文件中 image 的 <code>repository</code> 字段，并更新 <code>tag</code> 为 <code>pip</code></p>\n</li>\n<li>\n<p>部署 dolphinscheduler (详见<strong>安装 dolphinscheduler</strong>)</p>\n</li>\n<li>\n<p>在一个新 Python 任务下验证 pip</p>\n</li>\n</ol>\n<h3 id=\"如何支持-python-3？\">如何支持 Python 3？</h3>\n<blockquote>\n<p>只需要更改 dolphinscheduler-worker 服务的镜像.</p>\n</blockquote>\n<ol>\n<li>创建一个新的 <code>Dockerfile</code>，用于安装 Python 3:</li>\n</ol>\n<pre><code>FROM dolphinscheduler.docker.scarf.sh/apache/dolphinscheduler-worker:3.2.2\nRUN apt-get update &amp;&amp; \\\n    apt-get install -y --no-install-recommends python3 &amp;&amp; \\\n    rm -rf /var/lib/apt/lists/*\n</code></pre>\n<p>这个命令会安装默认的 <strong>Python 3.7.3</strong>. 如果你也想安装 <strong>pip3</strong>, 将 <code>python3</code> 替换为 <code>python3-pip</code> 即可</p>\n<pre><code>apt-get install -y --no-install-recommends python3-pip &amp;&amp; \\\n</code></pre>\n<ol start=\"2\">\n<li>构建一个包含 Python 3 的新镜像:</li>\n</ol>\n<pre><code>docker build -t apache/dolphinscheduler-worker:python3 .\n</code></pre>\n<ol start=\"3\">\n<li>\n<p>推送 docker 镜像 <code>apache/dolphinscheduler-worker:python3</code> 到一个 docker registry 中</p>\n</li>\n<li>\n<p>修改 <code>values.yaml</code> 文件中 image 的 <code>repository</code> 字段，并更新 <code>tag</code> 为 <code>python3</code></p>\n</li>\n<li>\n<p>修改 <code>values.yaml</code> 文件中的 <code>PYTHON_LAUNCHER</code> 为 <code>/usr/bin/python3</code></p>\n</li>\n<li>\n<p>部署 dolphinscheduler (详见<strong>安装 dolphinscheduler</strong>)</p>\n</li>\n<li>\n<p>在一个新 Python 任务下验证 Python 3</p>\n</li>\n</ol>\n<h3 id=\"如何支持-hadoop,-spark,-flink,-hive-或-datax？\">如何支持 Hadoop, Spark, Flink, Hive 或 DataX？</h3>\n<p>以 Spark 2.4.7 为例:</p>\n<ol>\n<li>\n<p>下载 Spark 2.4.7 发布的二进制包 <code>spark-2.4.7-bin-hadoop2.7.tgz</code></p>\n</li>\n<li>\n<p>确保 <code>common.sharedStoragePersistence.enabled</code> 开启</p>\n</li>\n<li>\n<p>部署 dolphinscheduler (详见<strong>安装 dolphinscheduler</strong>)</p>\n</li>\n<li>\n<p>复制 Spark 3.1.1 二进制包到 Docker 容器中</p>\n</li>\n</ol>\n<pre><code class=\"language-bash\">kubectl <span class=\"hljs-built_in\">cp</span> spark-2.4.7-bin-hadoop2.7.tgz dolphinscheduler-worker-0:/opt/soft\nkubectl <span class=\"hljs-built_in\">cp</span> -n <span class=\"hljs-built_in\">test</span> spark-2.4.7-bin-hadoop2.7.tgz dolphinscheduler-worker-0:/opt/soft <span class=\"hljs-comment\"># with test namespace</span>\n</code></pre>\n<p>因为存储卷 <code>sharedStoragePersistence</code> 被挂载到 <code>/opt/soft</code>, 因此 <code>/opt/soft</code> 中的所有文件都不会丢失</p>\n<ol start=\"5\">\n<li>登录到容器并确保 <code>SPARK_HOME</code> 存在</li>\n</ol>\n<pre><code class=\"language-bash\">kubectl <span class=\"hljs-built_in\">exec</span> -it dolphinscheduler-worker-0 bash\nkubectl <span class=\"hljs-built_in\">exec</span> -n <span class=\"hljs-built_in\">test</span> -it dolphinscheduler-worker-0 bash <span class=\"hljs-comment\"># with test namespace</span>\n<span class=\"hljs-built_in\">cd</span> /opt/soft\ntar zxf spark-2.4.7-bin-hadoop2.7.tgz\n<span class=\"hljs-built_in\">rm</span> -f spark-2.4.7-bin-hadoop2.7.tgz\n<span class=\"hljs-built_in\">ln</span> -s spark-2.4.7-bin-hadoop2.7 spark2 <span class=\"hljs-comment\"># or just mv</span>\n<span class=\"hljs-variable\">$SPARK_HOME</span>/bin/spark-submit --version\n</code></pre>\n<p>如果一切执行正常，最后一条命令将会打印 Spark 版本信息</p>\n<ol start=\"6\">\n<li>在一个 Shell 任务下验证 Spark</li>\n</ol>\n<pre><code>$SPARK_HOME/bin/spark-submit --class org.apache.spark.examples.SparkPi $SPARK_HOME/examples/jars/spark-examples_2.11-2.4.7.jar\n</code></pre>\n<p>检查任务日志是否包含输出 <code>Pi is roughly 3.146015</code></p>\n<ol start=\"7\">\n<li>在一个 Spark 任务下验证 Spark</li>\n</ol>\n<p>文件 <code>spark-examples_2.11-2.4.7.jar</code> 需要先被上传到资源中心，然后创建一个 Spark 任务并设置:</p>\n<ul>\n<li>主函数的 Class: <code>org.apache.spark.examples.SparkPi</code></li>\n<li>主程序包: <code>spark-examples_2.11-2.4.7.jar</code></li>\n<li>部署方式: <code>local</code></li>\n</ul>\n<p>同样地, 检查任务日志是否包含输出 <code>Pi is roughly 3.146015</code></p>\n<ol start=\"8\">\n<li>验证 Spark on YARN</li>\n</ol>\n<p>Spark on YARN (部署方式为 <code>cluster</code> 或 <code>client</code>) 需要 Hadoop 支持. 类似于 Spark 支持, 支持 Hadoop 的操作几乎和前面的步骤相同</p>\n<p>确保 <code>$HADOOP_HOME</code> 和 <code>$HADOOP_CONF_DIR</code> 存在</p>\n<h3 id=\"如何在-master、worker-和-api-服务之间支持共享存储？\">如何在 Master、Worker 和 Api 服务之间支持共享存储？</h3>\n<p>例如, Master、Worker 和 Api 服务可能同时使用 Hadoop</p>\n<ol>\n<li>修改 <code>values.yaml</code> 文件中下面的配置项</li>\n</ol>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">common:</span>\n  <span class=\"hljs-attr\">sharedStoragePersistence:</span>\n    <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">false</span>\n    <span class=\"hljs-attr\">mountPath:</span> <span class=\"hljs-string\">&quot;/opt/soft&quot;</span>\n    <span class=\"hljs-attr\">accessModes:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;ReadWriteMany&quot;</span>\n    <span class=\"hljs-attr\">storageClassName:</span> <span class=\"hljs-string\">&quot;-&quot;</span>\n    <span class=\"hljs-attr\">storage:</span> <span class=\"hljs-string\">&quot;20Gi&quot;</span>\n</code></pre>\n<p><code>storageClassName</code> 和 <code>storage</code> 需要被修改为实际值</p>\n<blockquote>\n<p><strong>注意</strong>: <code>storageClassName</code> 必须支持访问模式: <code>ReadWriteMany</code></p>\n</blockquote>\n<ol start=\"2\">\n<li>\n<p>将 Hadoop 复制到目录 <code>/opt/soft</code></p>\n</li>\n<li>\n<p>确保 <code>$HADOOP_HOME</code> 和 <code>$HADOOP_CONF_DIR</code> 正确</p>\n</li>\n</ol>\n<h3 id=\"如何支持本地文件存储而非-hdfs-和-s3？\">如何支持本地文件存储而非 HDFS 和 S3？</h3>\n<p>修改 <code>values.yaml</code> 文件中下面的配置项</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">common:</span>\n  <span class=\"hljs-attr\">configmap:</span>\n    <span class=\"hljs-attr\">RESOURCE_STORAGE_TYPE:</span> <span class=\"hljs-string\">&quot;HDFS&quot;</span>\n    <span class=\"hljs-attr\">RESOURCE_UPLOAD_PATH:</span> <span class=\"hljs-string\">&quot;/dolphinscheduler&quot;</span>\n    <span class=\"hljs-attr\">FS_DEFAULT_FS:</span> <span class=\"hljs-string\">&quot;file:///&quot;</span>\n  <span class=\"hljs-attr\">fsFileResourcePersistence:</span>\n    <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-attr\">accessModes:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;ReadWriteMany&quot;</span>\n    <span class=\"hljs-attr\">storageClassName:</span> <span class=\"hljs-string\">&quot;-&quot;</span>\n    <span class=\"hljs-attr\">storage:</span> <span class=\"hljs-string\">&quot;20Gi&quot;</span>\n</code></pre>\n<p><code>storageClassName</code> 和 <code>storage</code> 需要被修改为实际值</p>\n<blockquote>\n<p><strong>注意</strong>: <code>storageClassName</code> 必须支持访问模式: <code>ReadWriteMany</code></p>\n</blockquote>\n<h3 id=\"如何支持-s3-资源存储，例如-minio？\">如何支持 S3 资源存储，例如 MinIO？</h3>\n<p>以 MinIO 为例: 修改 <code>values.yaml</code> 文件中下面的配置项</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">common:</span>\n  <span class=\"hljs-attr\">configmap:</span>\n    <span class=\"hljs-attr\">RESOURCE_STORAGE_TYPE:</span> <span class=\"hljs-string\">&quot;S3&quot;</span>\n    <span class=\"hljs-attr\">RESOURCE_UPLOAD_PATH:</span> <span class=\"hljs-string\">&quot;/dolphinscheduler&quot;</span>\n    <span class=\"hljs-attr\">FS_DEFAULT_FS:</span> <span class=\"hljs-string\">&quot;s3a://BUCKET_NAME&quot;</span>\n    <span class=\"hljs-attr\">FS_S3A_ENDPOINT:</span> <span class=\"hljs-string\">&quot;http://MINIO_IP:9000&quot;</span>\n    <span class=\"hljs-attr\">FS_S3A_ACCESS_KEY:</span> <span class=\"hljs-string\">&quot;MINIO_ACCESS_KEY&quot;</span>\n    <span class=\"hljs-attr\">FS_S3A_SECRET_KEY:</span> <span class=\"hljs-string\">&quot;MINIO_SECRET_KEY&quot;</span>\n</code></pre>\n<p><code>BUCKET_NAME</code>, <code>MINIO_IP</code>, <code>MINIO_ACCESS_KEY</code> 和 <code>MINIO_SECRET_KEY</code> 需要被修改为实际值</p>\n<blockquote>\n<p><strong>注意</strong>: <code>MINIO_IP</code> 只能使用 IP 而非域名, 因为 DolphinScheduler 尚不支持 S3 路径风格访问 (S3 path style access)</p>\n</blockquote>\n<h3 id=\"如何单独部署特定组件?\">如何单独部署特定组件?</h3>\n<p>修改 <code>values.yaml</code> 文件中的 <code>api.enabled</code>, <code>alert.enabled</code> <code>master.enabled</code> 或 <code>worker.enabled</code> 配置项</p>\n<p>例如，在一个集群中需要同时将 worker 部署到 CPU 服务器和 GPU 服务器，并且 worker 使用不同的镜像，可以这样做:</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-comment\"># 安装 master、api-server、alert-server以及其他默认组件，但是不安装 worker</span>\nhelm install dolphinscheduler . --<span class=\"hljs-built_in\">set</span> worker.enabled=<span class=\"hljs-literal\">false</span>\n<span class=\"hljs-comment\"># 禁用其他组件的安装，只安装 worker，使用自行建构建的 CPU镜像，通过 nodeselector部署到附带 x86标签的 CPU服务器，使用 zookeeper作为外部注册中心</span>\nhelm install dolphinscheduler-cpu-worker . \\\n     --<span class=\"hljs-built_in\">set</span> minio.enabled=<span class=\"hljs-literal\">false</span> --<span class=\"hljs-built_in\">set</span> postgresql.enabled=<span class=\"hljs-literal\">false</span> --<span class=\"hljs-built_in\">set</span> zookeeper.enabled=<span class=\"hljs-literal\">false</span> \\\n     --<span class=\"hljs-built_in\">set</span> master.enabled=<span class=\"hljs-literal\">false</span>  --<span class=\"hljs-built_in\">set</span> api.enabled=<span class=\"hljs-literal\">false</span> --<span class=\"hljs-built_in\">set</span> alert.enabled=<span class=\"hljs-literal\">false</span> \\\n     --<span class=\"hljs-built_in\">set</span> worker.enabled=<span class=\"hljs-literal\">true</span> --<span class=\"hljs-built_in\">set</span> image.tag=latest-cpu --<span class=\"hljs-built_in\">set</span> worker.nodeSelector.cpu=<span class=\"hljs-string\">&quot;x86&quot;</span> \\\n     --<span class=\"hljs-built_in\">set</span> externalRegistry.registryPluginName=zookeeper --<span class=\"hljs-built_in\">set</span> externalRegistry.registryServers=dolphinscheduler-zookeeper:2181\n<span class=\"hljs-comment\"># 禁用其他组件的安装，只安装 worker，使用自行建构建的 GPU 镜像，通过 nodeselector部署到附带 a100标签的 gpu服务器，使用zookeeper作为外部注册中心</span>\nhelm install dolphinscheduler-gpu-worker . \\\n     --<span class=\"hljs-built_in\">set</span> minio.enabled=<span class=\"hljs-literal\">false</span> --<span class=\"hljs-built_in\">set</span> postgresql.enabled=<span class=\"hljs-literal\">false</span> --<span class=\"hljs-built_in\">set</span> zookeeper.enabled=<span class=\"hljs-literal\">false</span> \\\n     --<span class=\"hljs-built_in\">set</span> master.enabled=<span class=\"hljs-literal\">false</span>  --<span class=\"hljs-built_in\">set</span> api.enabled=<span class=\"hljs-literal\">false</span> --<span class=\"hljs-built_in\">set</span> alert.enabled=<span class=\"hljs-literal\">false</span> \\\n     --<span class=\"hljs-built_in\">set</span> worker.enabled=<span class=\"hljs-literal\">true</span> --<span class=\"hljs-built_in\">set</span> image.tag=latest-gpu --<span class=\"hljs-built_in\">set</span> worker.nodeSelector.gpu=<span class=\"hljs-string\">&quot;a100&quot;</span> \\\n     --<span class=\"hljs-built_in\">set</span> externalRegistry.registryPluginName=zookeeper --<span class=\"hljs-built_in\">set</span> externalRegistry.registryServers=dolphinscheduler-zookeeper:2181\n</code></pre>\n<blockquote>\n<p><strong>注意</strong>:以上步骤仅供参考，具体操作需要根据实际情况进行调整。</p>\n</blockquote>\n<h2 id=\"附录-配置\">附录-配置</h2>\n<p>参考 <a href=\"https://github.com/apache/dolphinscheduler/blob/dev/deploy/kubernetes/dolphinscheduler/README.md\">DolphinScheduler Helm Charts</a></p>\n",
  "location": [
    "部署指南",
    "Kubernetes部署(Kubernetes)"
  ],
  "time": "2024-7-16",
  "structure": [
    {
      "title": "先决条件",
      "children": [
        {
          "title": "如何查看一个 pod 容器的日志？",
          "children": [],
          "anchor": "如何查看一个-pod-容器的日志？"
        },
        {
          "title": "如何在 Kubernetes 上扩缩容 api, master 和 worker？",
          "children": [],
          "anchor": "如何在-kubernetes-上扩缩容-api,-master-和-worker？"
        },
        {
          "title": "如何用 MySQL 替代 PostgreSQL 作为 DolphinScheduler 的数据库？",
          "children": [],
          "anchor": "如何用-mysql-替代-postgresql-作为-dolphinscheduler-的数据库？"
        },
        {
          "title": "如何在数据源中心支持 MySQL 或者 Oracle 数据源？",
          "children": [],
          "anchor": "如何在数据源中心支持-mysql-或者-oracle-数据源？"
        },
        {
          "title": "如何支持 Python 2 pip 以及自定义 requirements.txt？",
          "children": [],
          "anchor": "如何支持-python-2-pip-以及自定义-requirements.txt？"
        },
        {
          "title": "如何支持 Python 3？",
          "children": [],
          "anchor": "如何支持-python-3？"
        },
        {
          "title": "如何支持 Hadoop, Spark, Flink, Hive 或 DataX？",
          "children": [],
          "anchor": "如何支持-hadoop,-spark,-flink,-hive-或-datax？"
        },
        {
          "title": "如何在 Master、Worker 和 Api 服务之间支持共享存储？",
          "children": [],
          "anchor": "如何在-master、worker-和-api-服务之间支持共享存储？"
        },
        {
          "title": "如何支持本地文件存储而非 HDFS 和 S3？",
          "children": [],
          "anchor": "如何支持本地文件存储而非-hdfs-和-s3？"
        },
        {
          "title": "如何支持 S3 资源存储，例如 MinIO？",
          "children": [],
          "anchor": "如何支持-s3-资源存储，例如-minio？"
        },
        {
          "title": "如何单独部署特定组件?",
          "children": [],
          "anchor": "如何单独部署特定组件?"
        }
      ],
      "anchor": "先决条件"
    },
    {
      "title": "安装 dolphinscheduler",
      "children": [
        {
          "title": "如何查看一个 pod 容器的日志？",
          "children": [],
          "anchor": "如何查看一个-pod-容器的日志？"
        },
        {
          "title": "如何在 Kubernetes 上扩缩容 api, master 和 worker？",
          "children": [],
          "anchor": "如何在-kubernetes-上扩缩容-api,-master-和-worker？"
        },
        {
          "title": "如何用 MySQL 替代 PostgreSQL 作为 DolphinScheduler 的数据库？",
          "children": [],
          "anchor": "如何用-mysql-替代-postgresql-作为-dolphinscheduler-的数据库？"
        },
        {
          "title": "如何在数据源中心支持 MySQL 或者 Oracle 数据源？",
          "children": [],
          "anchor": "如何在数据源中心支持-mysql-或者-oracle-数据源？"
        },
        {
          "title": "如何支持 Python 2 pip 以及自定义 requirements.txt？",
          "children": [],
          "anchor": "如何支持-python-2-pip-以及自定义-requirements.txt？"
        },
        {
          "title": "如何支持 Python 3？",
          "children": [],
          "anchor": "如何支持-python-3？"
        },
        {
          "title": "如何支持 Hadoop, Spark, Flink, Hive 或 DataX？",
          "children": [],
          "anchor": "如何支持-hadoop,-spark,-flink,-hive-或-datax？"
        },
        {
          "title": "如何在 Master、Worker 和 Api 服务之间支持共享存储？",
          "children": [],
          "anchor": "如何在-master、worker-和-api-服务之间支持共享存储？"
        },
        {
          "title": "如何支持本地文件存储而非 HDFS 和 S3？",
          "children": [],
          "anchor": "如何支持本地文件存储而非-hdfs-和-s3？"
        },
        {
          "title": "如何支持 S3 资源存储，例如 MinIO？",
          "children": [],
          "anchor": "如何支持-s3-资源存储，例如-minio？"
        },
        {
          "title": "如何单独部署特定组件?",
          "children": [],
          "anchor": "如何单独部署特定组件?"
        }
      ],
      "anchor": "安装-dolphinscheduler"
    },
    {
      "title": "访问 DolphinScheduler 前端页面",
      "children": [
        {
          "title": "如何查看一个 pod 容器的日志？",
          "children": [],
          "anchor": "如何查看一个-pod-容器的日志？"
        },
        {
          "title": "如何在 Kubernetes 上扩缩容 api, master 和 worker？",
          "children": [],
          "anchor": "如何在-kubernetes-上扩缩容-api,-master-和-worker？"
        },
        {
          "title": "如何用 MySQL 替代 PostgreSQL 作为 DolphinScheduler 的数据库？",
          "children": [],
          "anchor": "如何用-mysql-替代-postgresql-作为-dolphinscheduler-的数据库？"
        },
        {
          "title": "如何在数据源中心支持 MySQL 或者 Oracle 数据源？",
          "children": [],
          "anchor": "如何在数据源中心支持-mysql-或者-oracle-数据源？"
        },
        {
          "title": "如何支持 Python 2 pip 以及自定义 requirements.txt？",
          "children": [],
          "anchor": "如何支持-python-2-pip-以及自定义-requirements.txt？"
        },
        {
          "title": "如何支持 Python 3？",
          "children": [],
          "anchor": "如何支持-python-3？"
        },
        {
          "title": "如何支持 Hadoop, Spark, Flink, Hive 或 DataX？",
          "children": [],
          "anchor": "如何支持-hadoop,-spark,-flink,-hive-或-datax？"
        },
        {
          "title": "如何在 Master、Worker 和 Api 服务之间支持共享存储？",
          "children": [],
          "anchor": "如何在-master、worker-和-api-服务之间支持共享存储？"
        },
        {
          "title": "如何支持本地文件存储而非 HDFS 和 S3？",
          "children": [],
          "anchor": "如何支持本地文件存储而非-hdfs-和-s3？"
        },
        {
          "title": "如何支持 S3 资源存储，例如 MinIO？",
          "children": [],
          "anchor": "如何支持-s3-资源存储，例如-minio？"
        },
        {
          "title": "如何单独部署特定组件?",
          "children": [],
          "anchor": "如何单独部署特定组件?"
        }
      ],
      "anchor": "访问-dolphinscheduler-前端页面"
    },
    {
      "title": "卸载 dolphinscheduler",
      "children": [
        {
          "title": "如何查看一个 pod 容器的日志？",
          "children": [],
          "anchor": "如何查看一个-pod-容器的日志？"
        },
        {
          "title": "如何在 Kubernetes 上扩缩容 api, master 和 worker？",
          "children": [],
          "anchor": "如何在-kubernetes-上扩缩容-api,-master-和-worker？"
        },
        {
          "title": "如何用 MySQL 替代 PostgreSQL 作为 DolphinScheduler 的数据库？",
          "children": [],
          "anchor": "如何用-mysql-替代-postgresql-作为-dolphinscheduler-的数据库？"
        },
        {
          "title": "如何在数据源中心支持 MySQL 或者 Oracle 数据源？",
          "children": [],
          "anchor": "如何在数据源中心支持-mysql-或者-oracle-数据源？"
        },
        {
          "title": "如何支持 Python 2 pip 以及自定义 requirements.txt？",
          "children": [],
          "anchor": "如何支持-python-2-pip-以及自定义-requirements.txt？"
        },
        {
          "title": "如何支持 Python 3？",
          "children": [],
          "anchor": "如何支持-python-3？"
        },
        {
          "title": "如何支持 Hadoop, Spark, Flink, Hive 或 DataX？",
          "children": [],
          "anchor": "如何支持-hadoop,-spark,-flink,-hive-或-datax？"
        },
        {
          "title": "如何在 Master、Worker 和 Api 服务之间支持共享存储？",
          "children": [],
          "anchor": "如何在-master、worker-和-api-服务之间支持共享存储？"
        },
        {
          "title": "如何支持本地文件存储而非 HDFS 和 S3？",
          "children": [],
          "anchor": "如何支持本地文件存储而非-hdfs-和-s3？"
        },
        {
          "title": "如何支持 S3 资源存储，例如 MinIO？",
          "children": [],
          "anchor": "如何支持-s3-资源存储，例如-minio？"
        },
        {
          "title": "如何单独部署特定组件?",
          "children": [],
          "anchor": "如何单独部署特定组件?"
        }
      ],
      "anchor": "卸载-dolphinscheduler"
    },
    {
      "title": "[试验性] worker 自动扩缩容",
      "children": [
        {
          "title": "如何查看一个 pod 容器的日志？",
          "children": [],
          "anchor": "如何查看一个-pod-容器的日志？"
        },
        {
          "title": "如何在 Kubernetes 上扩缩容 api, master 和 worker？",
          "children": [],
          "anchor": "如何在-kubernetes-上扩缩容-api,-master-和-worker？"
        },
        {
          "title": "如何用 MySQL 替代 PostgreSQL 作为 DolphinScheduler 的数据库？",
          "children": [],
          "anchor": "如何用-mysql-替代-postgresql-作为-dolphinscheduler-的数据库？"
        },
        {
          "title": "如何在数据源中心支持 MySQL 或者 Oracle 数据源？",
          "children": [],
          "anchor": "如何在数据源中心支持-mysql-或者-oracle-数据源？"
        },
        {
          "title": "如何支持 Python 2 pip 以及自定义 requirements.txt？",
          "children": [],
          "anchor": "如何支持-python-2-pip-以及自定义-requirements.txt？"
        },
        {
          "title": "如何支持 Python 3？",
          "children": [],
          "anchor": "如何支持-python-3？"
        },
        {
          "title": "如何支持 Hadoop, Spark, Flink, Hive 或 DataX？",
          "children": [],
          "anchor": "如何支持-hadoop,-spark,-flink,-hive-或-datax？"
        },
        {
          "title": "如何在 Master、Worker 和 Api 服务之间支持共享存储？",
          "children": [],
          "anchor": "如何在-master、worker-和-api-服务之间支持共享存储？"
        },
        {
          "title": "如何支持本地文件存储而非 HDFS 和 S3？",
          "children": [],
          "anchor": "如何支持本地文件存储而非-hdfs-和-s3？"
        },
        {
          "title": "如何支持 S3 资源存储，例如 MinIO？",
          "children": [],
          "anchor": "如何支持-s3-资源存储，例如-minio？"
        },
        {
          "title": "如何单独部署特定组件?",
          "children": [],
          "anchor": "如何单独部署特定组件?"
        }
      ],
      "anchor": "[试验性]-worker-自动扩缩容"
    },
    {
      "title": "配置",
      "children": [
        {
          "title": "如何查看一个 pod 容器的日志？",
          "children": [],
          "anchor": "如何查看一个-pod-容器的日志？"
        },
        {
          "title": "如何在 Kubernetes 上扩缩容 api, master 和 worker？",
          "children": [],
          "anchor": "如何在-kubernetes-上扩缩容-api,-master-和-worker？"
        },
        {
          "title": "如何用 MySQL 替代 PostgreSQL 作为 DolphinScheduler 的数据库？",
          "children": [],
          "anchor": "如何用-mysql-替代-postgresql-作为-dolphinscheduler-的数据库？"
        },
        {
          "title": "如何在数据源中心支持 MySQL 或者 Oracle 数据源？",
          "children": [],
          "anchor": "如何在数据源中心支持-mysql-或者-oracle-数据源？"
        },
        {
          "title": "如何支持 Python 2 pip 以及自定义 requirements.txt？",
          "children": [],
          "anchor": "如何支持-python-2-pip-以及自定义-requirements.txt？"
        },
        {
          "title": "如何支持 Python 3？",
          "children": [],
          "anchor": "如何支持-python-3？"
        },
        {
          "title": "如何支持 Hadoop, Spark, Flink, Hive 或 DataX？",
          "children": [],
          "anchor": "如何支持-hadoop,-spark,-flink,-hive-或-datax？"
        },
        {
          "title": "如何在 Master、Worker 和 Api 服务之间支持共享存储？",
          "children": [],
          "anchor": "如何在-master、worker-和-api-服务之间支持共享存储？"
        },
        {
          "title": "如何支持本地文件存储而非 HDFS 和 S3？",
          "children": [],
          "anchor": "如何支持本地文件存储而非-hdfs-和-s3？"
        },
        {
          "title": "如何支持 S3 资源存储，例如 MinIO？",
          "children": [],
          "anchor": "如何支持-s3-资源存储，例如-minio？"
        },
        {
          "title": "如何单独部署特定组件?",
          "children": [],
          "anchor": "如何单独部署特定组件?"
        }
      ],
      "anchor": "配置"
    },
    {
      "title": "支持矩阵",
      "children": [
        {
          "title": "如何查看一个 pod 容器的日志？",
          "children": [],
          "anchor": "如何查看一个-pod-容器的日志？"
        },
        {
          "title": "如何在 Kubernetes 上扩缩容 api, master 和 worker？",
          "children": [],
          "anchor": "如何在-kubernetes-上扩缩容-api,-master-和-worker？"
        },
        {
          "title": "如何用 MySQL 替代 PostgreSQL 作为 DolphinScheduler 的数据库？",
          "children": [],
          "anchor": "如何用-mysql-替代-postgresql-作为-dolphinscheduler-的数据库？"
        },
        {
          "title": "如何在数据源中心支持 MySQL 或者 Oracle 数据源？",
          "children": [],
          "anchor": "如何在数据源中心支持-mysql-或者-oracle-数据源？"
        },
        {
          "title": "如何支持 Python 2 pip 以及自定义 requirements.txt？",
          "children": [],
          "anchor": "如何支持-python-2-pip-以及自定义-requirements.txt？"
        },
        {
          "title": "如何支持 Python 3？",
          "children": [],
          "anchor": "如何支持-python-3？"
        },
        {
          "title": "如何支持 Hadoop, Spark, Flink, Hive 或 DataX？",
          "children": [],
          "anchor": "如何支持-hadoop,-spark,-flink,-hive-或-datax？"
        },
        {
          "title": "如何在 Master、Worker 和 Api 服务之间支持共享存储？",
          "children": [],
          "anchor": "如何在-master、worker-和-api-服务之间支持共享存储？"
        },
        {
          "title": "如何支持本地文件存储而非 HDFS 和 S3？",
          "children": [],
          "anchor": "如何支持本地文件存储而非-hdfs-和-s3？"
        },
        {
          "title": "如何支持 S3 资源存储，例如 MinIO？",
          "children": [],
          "anchor": "如何支持-s3-资源存储，例如-minio？"
        },
        {
          "title": "如何单独部署特定组件?",
          "children": [],
          "anchor": "如何单独部署特定组件?"
        }
      ],
      "anchor": "支持矩阵"
    },
    {
      "title": "FAQ",
      "children": [
        {
          "title": "如何查看一个 pod 容器的日志？",
          "children": [],
          "anchor": "如何查看一个-pod-容器的日志？"
        },
        {
          "title": "如何在 Kubernetes 上扩缩容 api, master 和 worker？",
          "children": [],
          "anchor": "如何在-kubernetes-上扩缩容-api,-master-和-worker？"
        },
        {
          "title": "如何用 MySQL 替代 PostgreSQL 作为 DolphinScheduler 的数据库？",
          "children": [],
          "anchor": "如何用-mysql-替代-postgresql-作为-dolphinscheduler-的数据库？"
        },
        {
          "title": "如何在数据源中心支持 MySQL 或者 Oracle 数据源？",
          "children": [],
          "anchor": "如何在数据源中心支持-mysql-或者-oracle-数据源？"
        },
        {
          "title": "如何支持 Python 2 pip 以及自定义 requirements.txt？",
          "children": [],
          "anchor": "如何支持-python-2-pip-以及自定义-requirements.txt？"
        },
        {
          "title": "如何支持 Python 3？",
          "children": [],
          "anchor": "如何支持-python-3？"
        },
        {
          "title": "如何支持 Hadoop, Spark, Flink, Hive 或 DataX？",
          "children": [],
          "anchor": "如何支持-hadoop,-spark,-flink,-hive-或-datax？"
        },
        {
          "title": "如何在 Master、Worker 和 Api 服务之间支持共享存储？",
          "children": [],
          "anchor": "如何在-master、worker-和-api-服务之间支持共享存储？"
        },
        {
          "title": "如何支持本地文件存储而非 HDFS 和 S3？",
          "children": [],
          "anchor": "如何支持本地文件存储而非-hdfs-和-s3？"
        },
        {
          "title": "如何支持 S3 资源存储，例如 MinIO？",
          "children": [],
          "anchor": "如何支持-s3-资源存储，例如-minio？"
        },
        {
          "title": "如何单独部署特定组件?",
          "children": [],
          "anchor": "如何单独部署特定组件?"
        }
      ],
      "anchor": "faq"
    },
    {
      "title": "附录-配置",
      "children": [
        {
          "title": "如何查看一个 pod 容器的日志？",
          "children": [],
          "anchor": "如何查看一个-pod-容器的日志？"
        },
        {
          "title": "如何在 Kubernetes 上扩缩容 api, master 和 worker？",
          "children": [],
          "anchor": "如何在-kubernetes-上扩缩容-api,-master-和-worker？"
        },
        {
          "title": "如何用 MySQL 替代 PostgreSQL 作为 DolphinScheduler 的数据库？",
          "children": [],
          "anchor": "如何用-mysql-替代-postgresql-作为-dolphinscheduler-的数据库？"
        },
        {
          "title": "如何在数据源中心支持 MySQL 或者 Oracle 数据源？",
          "children": [],
          "anchor": "如何在数据源中心支持-mysql-或者-oracle-数据源？"
        },
        {
          "title": "如何支持 Python 2 pip 以及自定义 requirements.txt？",
          "children": [],
          "anchor": "如何支持-python-2-pip-以及自定义-requirements.txt？"
        },
        {
          "title": "如何支持 Python 3？",
          "children": [],
          "anchor": "如何支持-python-3？"
        },
        {
          "title": "如何支持 Hadoop, Spark, Flink, Hive 或 DataX？",
          "children": [],
          "anchor": "如何支持-hadoop,-spark,-flink,-hive-或-datax？"
        },
        {
          "title": "如何在 Master、Worker 和 Api 服务之间支持共享存储？",
          "children": [],
          "anchor": "如何在-master、worker-和-api-服务之间支持共享存储？"
        },
        {
          "title": "如何支持本地文件存储而非 HDFS 和 S3？",
          "children": [],
          "anchor": "如何支持本地文件存储而非-hdfs-和-s3？"
        },
        {
          "title": "如何支持 S3 资源存储，例如 MinIO？",
          "children": [],
          "anchor": "如何支持-s3-资源存储，例如-minio？"
        },
        {
          "title": "如何单独部署特定组件?",
          "children": [],
          "anchor": "如何单独部署特定组件?"
        }
      ],
      "anchor": "附录-配置"
    }
  ],
  "title": "快速试用 Kubernetes 部署",
  "link": "/guide/installation/kubernetes"
}