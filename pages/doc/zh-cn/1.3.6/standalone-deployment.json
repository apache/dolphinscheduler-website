{
  "__html": "<h1 id=\"单机部署(standalone)\">单机部署(Standalone)</h1>\n<h1 id=\"1、基础软件安装(必装项请自行安装)\">1、基础软件安装(必装项请自行安装)</h1>\n<ul>\n<li><a href=\"https://www.postgresql.org/download/\">PostgreSQL</a> (8.2.15+) or <a href=\"https://dev.mysql.com/downloads/mysql/\">MySQL</a> (5.7系列)：两者任选其一即可，如 MySQL 则需要 JDBC Driver 5.1.47+</li>\n<li><a href=\"https://www.oracle.com/technetwork/java/javase/downloads/index.html\">JDK</a> (1.8+)：必装，请安装好后在/etc/profile下配置 JAVA_HOME 及 PATH 变量</li>\n<li><a href=\"https://zookeeper.apache.org/releases.html\">ZooKeeper</a> (3.4.6+)：必装</li>\n<li>pstree or psmisc：Mac OS必装pstree，Fedora/Red/Hat/CentOS/Ubuntu/Debian必装psmisc</li>\n<li><a href=\"https://hadoop.apache.org/releases.html\">Hadoop</a> (2.6+) or <a href=\"https://min.io/download\">MinIO</a>：选装，如果需要用到资源上传功能，针对单机可以选择本地文件目录作为上传文件夹(此操作不需要部署 Hadoop )；当然也可以选择上传到 Hadoop or MinIO 集群上</li>\n</ul>\n<pre><code class=\"language-markdown\"> 注意：DolphinScheduler 本身不依赖 Hadoop、Hive、Spark，仅会调用它们的 Client，用于运行对应的任务\n</code></pre>\n<h1 id=\"2、下载二进制tar.gz包\">2、下载二进制tar.gz包</h1>\n<ul>\n<li>请下载最新版本的后端安装包至服务器部署目录，比如创建 /opt/dolphinscheduler 做为安装部署目录，下载地址： <a href=\"/zh-cn/download/download.html\">下载</a>，下载后上传 tar 包到该目录中，并进行解压</li>\n</ul>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">创建部署目录，部署目录请不要创建在 /root、/home 等高权限目录</span> \nmkdir -p /opt/dolphinscheduler\ncd /opt/dolphinscheduler\n<span class=\"hljs-meta prompt_\">\n# </span><span class=\"language-bash\">解压缩</span>\ntar -zxvf apache-dolphinscheduler-1.3.6-bin.tar.gz -C /opt/dolphinscheduler\n \nmv apache-dolphinscheduler-1.3.6-bin  dolphinscheduler-bin\n</code></pre>\n<h1 id=\"3、创建部署用户并赋予目录操作权限\">3、创建部署用户并赋予目录操作权限</h1>\n<ul>\n<li>创建部署用户，并且一定要配置 sudo 免密。以创建 dolphinscheduler 用户为例</li>\n</ul>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">创建用户需使用 root 登录</span>\nuseradd dolphinscheduler\n<span class=\"hljs-meta prompt_\">\n# </span><span class=\"language-bash\">添加密码</span>\necho &quot;dolphinscheduler&quot; | passwd --stdin dolphinscheduler\n<span class=\"hljs-meta prompt_\">\n# </span><span class=\"language-bash\">配置 sudo 免密</span>\nsed -i &#x27;$adolphinscheduler  ALL=(ALL)  NOPASSWD: NOPASSWD: ALL&#x27; /etc/sudoers\nsed -i &#x27;s/Defaults    requirett/#Defaults    requirett/g&#x27; /etc/sudoers\n<span class=\"hljs-meta prompt_\">\n# </span><span class=\"language-bash\">修改目录权限，使得部署用户对 dolphinscheduler-bin 目录有操作权限</span>\nchown -R dolphinscheduler:dolphinscheduler dolphinscheduler-bin\n</code></pre>\n<p>注意：</p>\n<ul>\n<li>因为任务执行服务是以 sudo -u {linux-user} 切换不同 linux 用户的方式来实现多租户运行作业，所以部署用户需要有 sudo 权限，而且是免密的。初学习者不理解的话，完全可以暂时忽略这一点</li>\n<li>如果发现 /etc/sudoers 文件中有 &quot;Defaults requirett&quot; 这行，也请注释掉</li>\n<li>如果用到资源上传的话，还需要给该部署用户分配操作<code>本地文件系统或者 HDFS 或者 MinIO </code>的权限</li>\n</ul>\n<h1 id=\"4、ssh免密配置\">4、ssh免密配置</h1>\n<ul>\n<li>切换到部署用户并配置 ssh 本机免密登录</li>\n</ul>\n<pre><code class=\"language-shell\">su dolphinscheduler\n\nssh-keygen -t rsa -P &#x27;&#x27; -f ~/.ssh/id_rsa\ncat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys\nchmod 600 ~/.ssh/authorized_keys\n</code></pre>\n<p><em>注意：正常设置后，dolphinscheduler 用户在执行命令 <code>ssh localhost</code> 是不需要再输入密码的</em></p>\n<h1 id=\"5、数据库初始化\">5、数据库初始化</h1>\n<ul>\n<li>进入数据库，默认数据库是 PostgreSQL，如选择 MySQL 的话，后续需要添加 mysql-connector-java 驱动包到 DolphinScheduler 的 lib 目录下</li>\n</ul>\n<pre><code>mysql -uroot -p\n</code></pre>\n<ul>\n<li>进入数据库命令行窗口后，执行数据库初始化命令，设置访问账号和密码。<strong>注: {user} 和 {password} 需要替换为具体的数据库用户名和密码</strong></li>\n</ul>\n<pre><code class=\"language-mysql\">   mysql&gt; CREATE DATABASE dolphinscheduler DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;\n   mysql&gt; GRANT ALL PRIVILEGES ON dolphinscheduler.* TO '{user}'@'%' IDENTIFIED BY '{password}';\n   mysql&gt; GRANT ALL PRIVILEGES ON dolphinscheduler.* TO '{user}'@'localhost' IDENTIFIED BY '{password}';\n   mysql&gt; flush privileges;\n</code></pre>\n<ul>\n<li>\n<p>创建表和导入基础数据</p>\n<ul>\n<li>修改 conf 目录下 datasource.properties 中的下列配置</li>\n</ul>\n<pre><code class=\"language-shell\">vi conf/datasource.properties\n</code></pre>\n<ul>\n<li>如果选择 MySQL，请注释掉 PostgreSQL 相关配置(反之同理)，还需要手动添加 [<a href=\"https://downloads.MySQL.com/archives/c-j/\"> mysql-connector-java 驱动 jar </a>] 包到 lib 目录下，这里下载的是 mysql-connector-java-5.1.47.jar，然后正确配置数据库连接相关信息</li>\n</ul>\n<pre><code class=\"language-properties\"><span class=\"hljs-comment\">  # postgre</span>\n<span class=\"hljs-comment\">  # spring.datasource.driver-class-name=org.postgresql.Driver</span>\n<span class=\"hljs-comment\">  # spring.datasource.url=jdbc:postgresql://localhost:5432/dolphinscheduler</span>\n<span class=\"hljs-comment\">  # mysql</span>\n  <span class=\"hljs-attr\">spring.datasource.driver-class-name</span>=<span class=\"hljs-string\">com.mysql.jdbc.Driver</span>\n  <span class=\"hljs-attr\">spring.datasource.url</span>=<span class=\"hljs-string\">jdbc:mysql://xxx:3306/dolphinscheduler?useUnicode=true&amp;characterEncoding=UTF-8&amp;allowMultiQueries=true     # 需要修改ip，本机localhost即可</span>\n  <span class=\"hljs-attr\">spring.datasource.username</span>=<span class=\"hljs-string\">xxx\t\t\t\t\t\t# 需要修改为上面的{user}值</span>\n  <span class=\"hljs-attr\">spring.datasource.password</span>=<span class=\"hljs-string\">xxx\t\t\t\t\t\t# 需要修改为上面的{password}值</span>\n</code></pre>\n<ul>\n<li>修改并保存完后，执行 script 目录下的创建表及导入基础数据脚本</li>\n</ul>\n<pre><code class=\"language-shell\">sh script/create-dolphinscheduler.sh\n</code></pre>\n<p><em>注意: 如果执行上述脚本提示 “/bin/java: No such file or directory” 错误，请在 /etc/profile 下配置 JAVA_HOME 及 PATH 变量</em></p>\n</li>\n</ul>\n<h1 id=\"6、修改运行参数\">6、修改运行参数</h1>\n<ul>\n<li>修改 conf/env 目录下的 <code>dolphinscheduler_env.sh</code> 环境变量(以相关用到的软件都安装在 /opt/soft 下为例)</li>\n</ul>\n<pre><code class=\"language-shell\">export HADOOP_HOME=/opt/soft/hadoop\nexport HADOOP_CONF_DIR=/opt/soft/hadoop/etc/hadoop\n<span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\"><span class=\"hljs-built_in\">export</span> SPARK_HOME1=/opt/soft/spark1</span>\nexport SPARK_HOME2=/opt/soft/spark2\nexport PYTHON_HOME=/opt/soft/python\nexport JAVA_HOME=/opt/soft/java\nexport HIVE_HOME=/opt/soft/hive\nexport FLINK_HOME=/opt/soft/flink\nexport DATAX_HOME=/opt/soft/datax/bin/datax.py\nexport PATH=$HADOOP_HOME/bin:$SPARK_HOME2/bin:$PYTHON_HOME:$JAVA_HOME/bin:$HIVE_HOME/bin:$FLINK_HOME/bin:$DATAX_HOME:$PATH\n</code></pre>\n<p><em>注意: 这一步非常重要，例如 JAVA_HOME 和 PATH 是必须要配置的，没有用到的可以忽略或者注释掉；如果找不到 dolphinscheduler_env.sh，请运行 <code>ls -a</code></em></p>\n<ul>\n<li>将 jdk 软链到 /usr/bin/java 下(仍以 JAVA_HOME=/opt/soft/java 为例)</li>\n</ul>\n<pre><code class=\"language-shell\">sudo ln -s /opt/soft/java/bin/java /usr/bin/java\n</code></pre>\n<ul>\n<li>修改一键部署配置文件 <code>conf/config/install_config.conf</code> 中的各参数，特别注意以下参数的配置</li>\n</ul>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">这里填 mysql or postgresql</span>\ndbtype=&quot;mysql&quot;\n<span class=\"hljs-meta prompt_\">\n# </span><span class=\"language-bash\">数据库连接地址</span>\ndbhost=&quot;localhost:3306&quot;\n<span class=\"hljs-meta prompt_\">\n# </span><span class=\"language-bash\">数据库名</span>\ndbname=&quot;dolphinscheduler&quot;\n<span class=\"hljs-meta prompt_\">\n# </span><span class=\"language-bash\">数据库用户名，此处需要修改为上面设置的 {user} 具体值</span>\nusername=&quot;xxx&quot;    \n<span class=\"hljs-meta prompt_\">\n# </span><span class=\"language-bash\">数据库密码，如果有特殊字符，请使用 \\ 转义，需要修改为上面设置的 {password} 具体值</span>\npassword=&quot;xxx&quot;\n<span class=\"hljs-meta prompt_\">\n# </span><span class=\"language-bash\">Zookeeper地址，单机本机是 localhost:2181，记得把 2181 端口带上</span>\nzkQuorum=&quot;localhost:2181&quot;\n<span class=\"hljs-meta prompt_\">\n# </span><span class=\"language-bash\">将 DS 安装到哪个目录，如: /opt/soft/dolphinscheduler，不同于现在的目录</span>\ninstallPath=&quot;/opt/soft/dolphinscheduler&quot;\n<span class=\"hljs-meta prompt_\">\n# </span><span class=\"language-bash\">使用哪个用户部署，使用第 3 节创建的用户</span>\ndeployUser=&quot;dolphinscheduler&quot;\n<span class=\"hljs-meta prompt_\">\n# </span><span class=\"language-bash\">邮件配置，以 qq 邮箱为例</span>\n<span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">邮件协议</span>\nmailProtocol=&quot;SMTP&quot;\n<span class=\"hljs-meta prompt_\">\n# </span><span class=\"language-bash\">邮件服务地址</span>\nmailServerHost=&quot;smtp.qq.com&quot;\n<span class=\"hljs-meta prompt_\">\n# </span><span class=\"language-bash\">邮件服务端口</span>\nmailServerPort=&quot;25&quot;\n<span class=\"hljs-meta prompt_\">\n# </span><span class=\"language-bash\">mailSender 和 mailUser 配置成一样即可</span>\n<span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">发送者</span>\nmailSender=&quot;xxx@qq.com&quot;\n<span class=\"hljs-meta prompt_\">\n# </span><span class=\"language-bash\">发送用户</span>\nmailUser=&quot;xxx@qq.com&quot;\n<span class=\"hljs-meta prompt_\">\n# </span><span class=\"language-bash\">邮箱密码</span>\nmailPassword=&quot;xxx&quot;\n<span class=\"hljs-meta prompt_\">\n# </span><span class=\"language-bash\">TLS 协议的邮箱设置为 <span class=\"hljs-literal\">true</span>，否则设置为 <span class=\"hljs-literal\">false</span></span>\nstarttlsEnable=&quot;true&quot;\n<span class=\"hljs-meta prompt_\">\n# </span><span class=\"language-bash\">开启 SSL 协议的邮箱配置为 <span class=\"hljs-literal\">true</span>，否则为 <span class=\"hljs-literal\">false</span>。注意: starttlsEnable 和 sslEnable 不能同时为 <span class=\"hljs-literal\">true</span></span>\nsslEnable=&quot;false&quot;\n<span class=\"hljs-meta prompt_\">\n# </span><span class=\"language-bash\">邮件服务地址值，参考上面 mailServerHost</span>\nsslTrust=&quot;smtp.qq.com&quot;\n<span class=\"hljs-meta prompt_\">\n# </span><span class=\"language-bash\">业务用到的比如 sql 等资源文件上传到哪里，可以设置：HDFS,S3,NONE，单机如果想使用本地文件系统，请配置为 HDFS，因为 HDFS 支持本地文件系统；如果不需要资源上传功能请选择 NONE。强调一点：使用本地文件系统不需要部署 hadoop</span>\nresourceStorageType=&quot;HDFS&quot;\n<span class=\"hljs-meta prompt_\">\n# </span><span class=\"language-bash\">这里以保存到本地文件系统为例</span>\n<span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">注：但是如果你想上传到 HDFS 的话，NameNode 启用了 HA，则需要将 hadoop 的配置文件 core-site.xml 和 hdfs-site.xml 放到 conf 目录下，本例即是放到 /opt/dolphinscheduler/conf 下面，并配置 namenode cluster 名称；如果 NameNode 不是 HA，则修改为具体的 ip 或者主机名即可</span>\ndefaultFS=&quot;file:///data/dolphinscheduler&quot;    #hdfs://{具体的ip/主机名}:8020\n<span class=\"hljs-meta prompt_\">\n# </span><span class=\"language-bash\">如果没有使用到 Yarn，保持以下默认值即可；如果 ResourceManager 是 HA，则配置为 ResourceManager 节点的主备 ip 或者 hostname，比如 <span class=\"hljs-string\">&quot;192.168.xx.xx,192.168.xx.xx&quot;</span> ;如果是单 ResourceManager 请配置 yarnHaIps=<span class=\"hljs-string\">&quot;&quot;</span> 即可</span>\n<span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">注：依赖于yarn执行的任务，为了保证执行结果判断成功，需要确保yarn信息配置正确</span>\nyarnHaIps=&quot;192.168.xx.xx,192.168.xx.xx&quot;\n<span class=\"hljs-meta prompt_\">\n# </span><span class=\"language-bash\">如果 ResourceManager 是 HA 或者没有使用到 Yarn 保持默认值即可；如果是单 ResourceManager，请配置真实的 ResourceManager 主机名或者 ip</span>\nsingleYarnIp=&quot;yarnIp1&quot;\n<span class=\"hljs-meta prompt_\">\n# </span><span class=\"language-bash\">资源上传根路径，支持 HDFS 和 S3，由于 hdfs 支持本地文件系统，需要确保本地文件夹存在且有读写权限</span>\nresourceUploadPath=&quot;/data/dolphinscheduler&quot;\n<span class=\"hljs-meta prompt_\">\n# </span><span class=\"language-bash\">具备权限创建 resourceUploadPath的用户</span>\nhdfsRootUser=&quot;hdfs&quot;\n    \n<span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">配置 api server port</span>\napiServerPort=&quot;12345&quot;\n<span class=\"hljs-meta prompt_\">\n# </span><span class=\"language-bash\">在哪些机器上部署 DS 服务，本机选 localhost</span>\nips=&quot;localhost&quot;\n<span class=\"hljs-meta prompt_\">\n# </span><span class=\"language-bash\">ssh端口，默认22</span>\nsshPort=&quot;22&quot;\n<span class=\"hljs-meta prompt_\">\n# </span><span class=\"language-bash\">master服务部署在哪台机器上</span>\nmasters=&quot;localhost&quot;\n<span class=\"hljs-meta prompt_\">\n# </span><span class=\"language-bash\">worker服务部署在哪台机器上，并指定此 worker 属于哪一个 worker 组，下面示例的 default 即为组名</span>\nworkers=&quot;localhost:default&quot;\n<span class=\"hljs-meta prompt_\">\n# </span><span class=\"language-bash\">报警服务部署在哪台机器上</span>\nalertServer=&quot;localhost&quot;\n<span class=\"hljs-meta prompt_\">\n# </span><span class=\"language-bash\">后端api服务部署在在哪台机器上</span>\napiServers=&quot;localhost&quot;\n\n</code></pre>\n<p><em>注：如果打算用到 <code>资源中心</code> 功能，请执行以下命令：</em></p>\n<pre><code class=\"language-shell\">sudo mkdir /data/dolphinscheduler\nsudo chown -R dolphinscheduler:dolphinscheduler /data/dolphinscheduler\n</code></pre>\n<h1 id=\"7、一键部署\">7、一键部署</h1>\n<ul>\n<li>切换到部署用户，执行一键部署脚本</li>\n</ul>\n<pre><code class=\"language-shell\">sh install.sh \n</code></pre>\n<p>注意：第一次部署的话，在运行中第3步 <code>3,stop server</code> 出现 5 次以下信息，此信息可以忽略</p>\n<pre><code>sh: bin/dolphinscheduler-daemon.sh: No such file or directory\n</code></pre>\n<ul>\n<li>脚本完成后，会启动以下 5 个服务，使用 <code>jps</code>  命令查看服务是否启动( <code>jps</code> 为 <code>JDK</code> 自带)</li>\n</ul>\n<pre><code class=\"language-aidl\">    MasterServer         ----- master服务\n    WorkerServer         ----- worker服务\n    LoggerServer         ----- logger服务\n    ApiApplicationServer ----- api服务\n    AlertServer          ----- alert服务\n</code></pre>\n<p>如果以上服务都正常启动，说明自动部署成功</p>\n<p>部署成功后，可以进行日志查看，日志统一存放于 logs 文件夹内</p>\n<pre><code class=\"language-日志路径\"> logs/\n    ├── dolphinscheduler-alert-server.log\n    ├── dolphinscheduler-master-server.log\n    |—— dolphinscheduler-worker-server.log\n    |—— dolphinscheduler-api-server.log\n    |—— dolphinscheduler-logger-server.log\n</code></pre>\n<h1 id=\"8、登录系统\">8、登录系统</h1>\n<ul>\n<li>\n<p>访问前端页面地址，接口 ip (自行修改)\nhttp://localhost:12345/dolphinscheduler</p>\n <p align=\"center\">\n   <img src=\"/img/login.png\" width=\"60%\" />\n </p>\n</li>\n</ul>\n<h1 id=\"9、启停服务\">9、启停服务</h1>\n<ul>\n<li>一键停止集群所有服务</li>\n</ul>\n<pre><code class=\"language-shell\">sh ./bin/stop-all.sh\n</code></pre>\n<ul>\n<li>一键开启集群所有服务</li>\n</ul>\n<pre><code class=\"language-shell\">sh ./bin/start-all.sh\n</code></pre>\n<ul>\n<li>启停 Master</li>\n</ul>\n<pre><code class=\"language-shell\">sh ./bin/dolphinscheduler-daemon.sh start master-server\nsh ./bin/dolphinscheduler-daemon.sh stop master-server\n</code></pre>\n<ul>\n<li>启停 Worker</li>\n</ul>\n<pre><code class=\"language-shell\">sh ./bin/dolphinscheduler-daemon.sh start worker-server\nsh ./bin/dolphinscheduler-daemon.sh stop worker-server\n</code></pre>\n<ul>\n<li>启停 Api</li>\n</ul>\n<pre><code class=\"language-shell\">sh ./bin/dolphinscheduler-daemon.sh start api-server\nsh ./bin/dolphinscheduler-daemon.sh stop api-server\n</code></pre>\n<ul>\n<li>启停 Logger</li>\n</ul>\n<pre><code class=\"language-shell\">sh ./bin/dolphinscheduler-daemon.sh start logger-server\nsh ./bin/dolphinscheduler-daemon.sh stop logger-server\n</code></pre>\n<ul>\n<li>启停 Alert</li>\n</ul>\n<pre><code class=\"language-shell\">sh ./bin/dolphinscheduler-daemon.sh start alert-server\nsh ./bin/dolphinscheduler-daemon.sh stop alert-server\n</code></pre>\n<p><code>注：服务用途请具体参见《系统架构设计》小节</code></p>\n",
  "location": [
    "部署文档",
    "单机部署(Standalone)"
  ],
  "time": "2021-4-28",
  "structure": [],
  "title": "单机部署(Standalone)",
  "link": "/standalone-deployment"
}