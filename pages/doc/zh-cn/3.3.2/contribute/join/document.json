{
  "__html": "<h1 id=\"文档须知\">文档须知</h1>\n<p>良好的使用文档对任何类型的软件都是至关重要的。欢迎任何可以改进 DolphinScheduler 文档的贡献。</p>\n<h3 id=\"获取文档项目\">获取文档项目</h3>\n<p>DolphinScheduler 项目的文档维护在独立的 <a href=\"https://github.com/apache/dolphinscheduler-website\">git 仓库</a>中。</p>\n<p>首先你需要先将文档项目 fork 到自己的 github 仓库中，然后将 fork 的文档克隆到本地计算机中。</p>\n<pre><code>git clone https://github.com/&lt;your-github-user-name&gt;/dolphinscheduler-website\n</code></pre>\n<h3 id=\"文档构建指南\">文档构建指南</h3>\n<ol>\n<li>\n<p>在根目录中运行 <code>yarn</code> 以安装依赖项。</p>\n</li>\n<li>\n<p>运行命令收集资源：2.1.运行 <code>export PROTOCOL_MODE=ssh</code> 告诉Git克隆资源，通过SSH协议而不是HTTPS协议。 2.2.运行 <code>./scripts/prepare_docs.sh</code> 准备所有相关资源，关更多信息，您可以查看<a href=\"https://github.com/apache/dolphinscheduler-website/blob/master/HOW_PREPARE_WORK.md\">how prepare script work</a>。</p>\n</li>\n<li>\n<p>在根目录下运行 <code>yarn generate</code> 来格式化和准备数据。</p>\n</li>\n<li>\n<p>在根目录下运行 <code>yarn dev</code> 启动本地服务器，其将允许在 http://localhost:3000 。</p>\n</li>\n</ol>\n<pre><code>注意：如果您在 Windows 而非 Mac 或 Linux 中克隆代码。请阅读下面的详细信息。\n如果执行上述两个步骤中的命令，将出现异常 “UnhandledPromiseRejectionWarning.Error:”： Error： EPERM: operation not permitted, symlink ‘2.0.3’ -&gt; ‘latest’&quot;.\n如果出现异常 “Can't resolve ‘antd’ in xxx”，你可以运行 `yarn add antd` 和 `yarn install`。\n因为这两个步骤运行的命令`./scripts/prepare_docs.sh`应该是 Linux 环境，所以如果你是 Windows 系统，可以使用 WSL 来完成。\n遇到这个问题时。你可以以管理员身份运行 cmd.exe 中的两个步骤。\n</code></pre>\n<ol start=\"5\">\n<li>\n<p>运行 <code>yarn build</code> 来构建源代码，此时会自动生成一个名为 <code>build</code> 目录，等待执行完成之后进入 <code>build</code> 目录。</p>\n</li>\n<li>\n<p>在本地验证你的更改：<code>python -m SimpleHTTPServer 8000</code>，当 python 版本为 3 时，请使用：<code>python3 -m http.server 8000</code>。</p>\n</li>\n</ol>\n<p>如果本地安装了更高版本的 node，可以考虑使用 <code>nvm</code> 来允许不同版本的 <code>node</code> 在你的计算机上运行。</p>\n<ol>\n<li>\n<p>参考<a href=\"http://nvm.sh\">说明</a>安装 nvm</p>\n</li>\n<li>\n<p>运行 <code>nvm install v18.12.1</code> 安装 node v18</p>\n</li>\n<li>\n<p>运行 <code>nvm use v18.12.1</code> 将当前工作环境切换到 node v18</p>\n</li>\n</ol>\n<p>然后你就可以在本地环境运行和建立网站了。</p>\n<h3 id=\"文档规范\">文档规范</h3>\n<ol>\n<li>\n<p>汉字与英文、数字之间<strong>需空格</strong>，中文标点符号与英文、数字之间<strong>不需空格</strong>，以增强中英文混排的美观性和可读性。</p>\n</li>\n<li>\n<p>建议在一般情况下使用 “你” 即可。当然必要的时候可以使用 “您” 来称呼，比如有 warning 提示的时候。</p>\n</li>\n</ol>\n<h3 id=\"怎样提交文档-pull-request\">怎样提交文档 Pull Request</h3>\n<ol>\n<li>\n<p>不要使用 “git add.” 提交所有更改。</p>\n</li>\n<li>\n<p>只需推送更改的文件，例如：</p>\n</li>\n</ol>\n<ul>\n<li><code>*.md</code></li>\n<li><code>blog.js or docs.js or site.js</code></li>\n</ul>\n<ol start=\"3\">\n<li>向 <strong>master</strong> 分支提交 Pull Request。</li>\n</ol>\n<h3 id=\"参考文档\">参考文档</h3>\n<p><a href=\"https://cwiki.apache.org/confluence/display/FLINK/Flink+Translation+Specifications\">Apache Flink 中文文档规范</a></p>\n",
  "location": [
    "贡献指南",
    "如何参与",
    "文档须知"
  ],
  "time": "2025-10-30",
  "structure": [
    {
      "title": "获取文档项目",
      "children": [],
      "anchor": "获取文档项目"
    },
    {
      "title": "文档构建指南",
      "children": [],
      "anchor": "文档构建指南"
    },
    {
      "title": "文档规范",
      "children": [],
      "anchor": "文档规范"
    },
    {
      "title": "怎样提交文档 Pull Request",
      "children": [],
      "anchor": "怎样提交文档-pull-request"
    },
    {
      "title": "参考文档",
      "children": [],
      "anchor": "参考文档"
    }
  ],
  "title": "文档须知",
  "link": "/contribute/join/document"
}