{
  "__html": "<h1 id=\"集群部署(cluster)\">集群部署(Cluster)</h1>\n<p>DolphinScheduler集群部署分为后端部署和前端部署两部分：</p>\n<h1 id=\"1、后端部署\">1、后端部署</h1>\n<h3 id=\"1.1-:-基础软件安装(必装项请自行安装)\">1.1 : 基础软件安装(必装项请自行安装)</h3>\n<ul>\n<li><a href=\"https://www.postgresql.org/download/\">PostgreSQL</a> (8.2.15+) or <a href=\"https://dev.mysql.com/downloads/mysql/\">MySQL</a> (5.6或者5.7系列)：两者任选其一即可</li>\n<li><a href=\"https://www.oracle.com/technetwork/java/javase/downloads/index.html\">JDK</a> (1.8+)：必装，请安装好后在/etc/profile下配置 JAVA_HOME 及 PATH 变量</li>\n<li><a href=\"https://zookeeper.apache.org/releases.html\">ZooKeeper</a> (3.4.6+)：必装</li>\n<li>pstree or psmisc：Mac OS必装pstree，Fedora/Red/Hat/CentOS/Ubuntu/Debian必装psmisc</li>\n<li><a href=\"https://hadoop.apache.org/releases.html\">Hadoop</a> (2.6+) or <a href=\"https://min.io/download\">MinIO</a> ：选装，如果需要用到资源上传功能，可以选择上传到Hadoop or MinIO上</li>\n</ul>\n<pre><code class=\"language-markdown\"> 注意：DolphinScheduler本身不依赖Hadoop、Hive、Spark,仅是会调用他们的Client，用于对应任务的提交。\n</code></pre>\n<h3 id=\"1.2-:-下载后端tar.gz包\">1.2 : 下载后端tar.gz包</h3>\n<ul>\n<li>请下载最新版本的后端安装包至服务器部署目录,比如创建 /opt/dolphinscheduler 做为安装部署目录，下载地址： <a href=\"/zh-cn/download/download.html\">下载</a> (以1.2.0版本为例)，下载后上传tar包到该目录中，并进行解压</li>\n</ul>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">创建部署目录,部署目录请不要创建在/root、/home等高权限目录</span> \nmkdir -p /opt/dolphinscheduler;\ncd /opt/dolphinscheduler;\n<span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">解压缩</span>\ntar -zxvf apache-dolphinscheduler-incubating-1.2.0-dolphinscheduler-backend-bin.tar.gz -C /opt/dolphinscheduler;\n\nmv apache-dolphinscheduler-incubating-1.2.0-dolphinscheduler-backend-bin  dolphinscheduler-backend\n</code></pre>\n<h3 id=\"1.3：创建部署用户和hosts映射\">1.3：创建部署用户和hosts映射</h3>\n<ul>\n<li>在<strong>所有</strong>部署调度的机器上创建部署用户，并且一定要配置sudo免密。假如我们计划在ds1,ds2,ds3,ds4这4台机器上部署调度，首先需要在每台机器上都创建部署用户</li>\n</ul>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">创建用户需使用root登录，设置部署用户名，请自行修改，后面以dolphinscheduler为例</span>\nuseradd dolphinscheduler;\n<span class=\"hljs-meta prompt_\">\n# </span><span class=\"language-bash\">设置用户密码，请自行修改，后面以dolphinscheduler123为例</span>\necho &quot;dolphinscheduler123&quot; | passwd --stdin dolphinscheduler\n<span class=\"hljs-meta prompt_\">\n# </span><span class=\"language-bash\">配置sudo免密</span>\necho &#x27;dolphinscheduler  ALL=(ALL)  NOPASSWD: NOPASSWD: ALL&#x27; &gt;&gt; /etc/sudoers\nsed -i &#x27;s/Defaults    requirett/#Defaults    requirett/g&#x27; /etc/sudoers\n\n</code></pre>\n<pre><code> 注意：\n - 因为是以 sudo -u {linux-user} 切换不同linux用户的方式来实现多租户运行作业，所以部署用户需要有 sudo 权限，而且是免密的。\n - 如果发现/etc/sudoers文件中有&quot;Default requiretty&quot;这行，也请注释掉\n - 如果用到资源上传的话，还需要在`HDFS或者MinIO`上给该部署用户分配读写的权限\n</code></pre>\n<h3 id=\"1.4-:-配置hosts映射和ssh打通及修改目录权限\">1.4 : 配置hosts映射和ssh打通及修改目录权限</h3>\n<ul>\n<li>\n<p>以第一台机器(hostname为ds1)作为部署机，在ds1上配置所有待部署机器的hosts, 在ds1以root登录</p>\n<pre><code class=\"language-shell\">vi /etc/hosts\n<span class=\"hljs-meta prompt_\">\n#</span><span class=\"language-bash\">add ip hostname</span>\n192.168.xxx.xxx ds1\n192.168.xxx.xxx ds2\n192.168.xxx.xxx ds3\n192.168.xxx.xxx ds4\n</code></pre>\n<p><em>注意：请删掉或者注释掉127.0.0.1这行</em></p>\n</li>\n<li>\n<p>同步ds1上的/etc/hosts到所有部署机器</p>\n<pre><code class=\"language-shell\">for ip in ds2 ds3;     #请将此处ds2 ds3替换为自己要部署的机器的hostname\ndo\n    sudo scp -r /etc/hosts  $ip:/etc/          #在运行中需要输入root密码\ndone\n</code></pre>\n<p><em>备注：当然 通过<code>sshpass -p xxx sudo scp -r /etc/hosts $ip:/etc/</code>就可以省去输入密码了</em></p>\n<blockquote>\n<p>centos下sshpass的安装：</p>\n<ol>\n<li>\n<p>先安装epel</p>\n<p>yum install -y epel-release</p>\n<p>yum repolist</p>\n</li>\n<li>\n<p>安装完成epel之后，就可以按照sshpass了</p>\n<p>yum install -y sshpass</p>\n</li>\n</ol>\n</blockquote>\n</li>\n<li>\n<p>在ds1上，切换到部署用户并配置ssh本机免密登录</p>\n<pre><code class=\"language-shell\"> su dolphinscheduler;\n\nssh-keygen -t rsa -P &#x27;&#x27; -f ~/.ssh/id_rsa\ncat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys\nchmod 600 ~/.ssh/authorized_keys\n</code></pre>\n</li>\n</ul>\n<p>​      注意：<em>正常设置后，dolphinscheduler用户在执行命令<code>ssh localhost</code> 是不需要再输入密码的</em></p>\n<ul>\n<li>\n<p>在ds1上，配置部署用户dolphinscheduler ssh打通到其他待部署的机器</p>\n<pre><code class=\"language-shell\">su dolphinscheduler;\nfor ip in ds2 ds3;     #请将此处ds2 ds3替换为自己要部署的机器的hostname\ndo\n    ssh-copy-id  $ip   #该操作执行过程中需要手动输入dolphinscheduler用户的密码\ndone\n<span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">当然 通过 sshpass -p xxx ssh-copy-id <span class=\"hljs-variable\">$ip</span> 就可以省去输入密码了</span>\n</code></pre>\n</li>\n<li>\n<p>在ds1上，修改目录权限，使得部署用户对dolphinscheduler-backend目录有操作权限</p>\n<pre><code class=\"language-shell\">sudo chown -R dolphinscheduler:dolphinscheduler dolphinscheduler-backend\n</code></pre>\n</li>\n</ul>\n<h3 id=\"1.5-:-数据库初始化\">1.5 : 数据库初始化</h3>\n<ul>\n<li>进入数据库，默认数据库是PostgreSQL，如选择MySQL的话，后续需要添加mysql-connector-java驱动包到DolphinScheduler的lib目录下，这里以MySQL为例</li>\n</ul>\n<pre><code>mysql -uroot -p\n</code></pre>\n<ul>\n<li>进入数据库命令行窗口后，执行数据库初始化命令，设置访问账号和密码。<strong>注: {user} 和 {password} 需要替换为具体的数据库用户名和密码</strong></li>\n</ul>\n<pre><code class=\"language-mysql\">   mysql&gt; CREATE DATABASE dolphinscheduler DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;\n   mysql&gt; GRANT ALL PRIVILEGES ON dolphinscheduler.* TO '{user}'@'%' IDENTIFIED BY '{password}';\n   mysql&gt; GRANT ALL PRIVILEGES ON dolphinscheduler.* TO '{user}'@'localhost' IDENTIFIED BY '{password}';\n   mysql&gt; flush privileges;\n</code></pre>\n<ul>\n<li>\n<p>创建表和导入基础数据</p>\n<ul>\n<li>修改 conf 目录下 application-dao.properties 中的下列配置</li>\n</ul>\n<pre><code class=\"language-shell\">  vi conf/application-dao.properties \n</code></pre>\n<ul>\n<li>如果选择 MySQL，请注释掉 PostgreSQL 相关配置(反之同理), 还需要手动添加 [<a href=\"https://downloads.mysql.com/archives/c-j/\"> mysql-connector-java 驱动 jar </a>] 包到 lib 目录下，这里下载的是mysql-connector-java-5.1.47.jar，然后正确配置数据库连接相关信息</li>\n</ul>\n<pre><code class=\"language-properties\"><span class=\"hljs-comment\">  #postgre</span>\n<span class=\"hljs-comment\">  #spring.datasource.driver-class-name=org.postgresql.Driver</span>\n<span class=\"hljs-comment\">  #spring.datasource.url=jdbc:postgresql://localhost:5432/dolphinscheduler</span>\n<span class=\"hljs-comment\">  # mysql</span>\n  <span class=\"hljs-attr\">spring.datasource.driver-class-name</span>=<span class=\"hljs-string\">com.mysql.jdbc.Driver</span>\n  <span class=\"hljs-attr\">spring.datasource.url</span>=<span class=\"hljs-string\">jdbc:mysql://xxx:3306/dolphinscheduler?useUnicode=true&amp;characterEncoding=UTF-8     需要修改ip</span>\n  <span class=\"hljs-attr\">spring.datasource.username</span>=<span class=\"hljs-string\">xxx\t\t\t\t\t\t需要修改为上面的{user}值</span>\n  <span class=\"hljs-attr\">spring.datasource.password</span>=<span class=\"hljs-string\">xxx\t\t\t\t\t\t需要修改为上面的{password}值</span>\n</code></pre>\n<ul>\n<li>修改并保存完后，执行 script 目录下的创建表及导入基础数据脚本</li>\n</ul>\n<pre><code class=\"language-shell\">sh script/create-dolphinscheduler.sh\n</code></pre>\n</li>\n</ul>\n<p>​       <em>注意: 如果执行上述脚本报 ”/bin/java: No such file or directory“ 错误，请在/etc/profile下配置  JAVA_HOME 及 PATH 变量</em></p>\n<h3 id=\"1.6-:-修改运行参数\">1.6 : 修改运行参数</h3>\n<ul>\n<li>\n<p>修改 conf/env 目录下的 <code>.dolphinscheduler_env.sh</code> 环境变量(以相关用到的软件都安装在/opt/soft下为例)</p>\n<pre><code class=\"language-shell\">export HADOOP_HOME=/opt/soft/hadoop\nexport HADOOP_CONF_DIR=/opt/soft/hadoop/etc/hadoop\n<span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"><span class=\"hljs-built_in\">export</span> SPARK_HOME1=/opt/soft/spark1</span>\nexport SPARK_HOME2=/opt/soft/spark2\nexport PYTHON_HOME=/opt/soft/python\nexport JAVA_HOME=/opt/soft/java\nexport HIVE_HOME=/opt/soft/hive\nexport FLINK_HOME=/opt/soft/flink\nexport PATH=$HADOOP_HOME/bin:$SPARK_HOME2/bin:$PYTHON_HOME:$JAVA_HOME/bin:$HIVE_HOME/bin:$PATH:$FLINK_HOME/bin:$PATH\n\n</code></pre>\n<pre><code>`注: 这一步非常重要,例如 JAVA_HOME 和 PATH 是必须要配置的，没有用到的可以忽略或者注释掉；如果找不到.dolphinscheduler_env.sh, 请运行 ls -a`\n</code></pre>\n</li>\n<li>\n<p>将jdk软链到/usr/bin/java下(仍以 JAVA_HOME=/opt/soft/java 为例)</p>\n<pre><code class=\"language-shell\">sudo ln -s /opt/soft/java/bin/java /usr/bin/java\n</code></pre>\n</li>\n<li>\n<p>修改一键部署脚本 <code>install.sh</code>中的各参数，特别注意以下参数的配置</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">这里填 mysql or postgresql</span>\ndbtype=&quot;mysql&quot;\n<span class=\"hljs-meta prompt_\">\n# </span><span class=\"language-bash\">数据库连接地址</span>\ndbhost=&quot;192.168.xx.xx:3306&quot;\n<span class=\"hljs-meta prompt_\">\n# </span><span class=\"language-bash\">数据库名</span>\ndbname=&quot;dolphinscheduler&quot;\n<span class=\"hljs-meta prompt_\">\n# </span><span class=\"language-bash\">数据库用户名，此处需要修改为上面设置的{user}具体值</span>\nusername=&quot;xxx&quot;    \n<span class=\"hljs-meta prompt_\">\n# </span><span class=\"language-bash\">数据库密码, 如果有特殊字符，请使用\\转义，需要修改为上面设置的{passowrd}具体值</span>\npassowrd=&quot;xxx&quot;\n<span class=\"hljs-meta prompt_\">\n#</span><span class=\"language-bash\">将DS安装到哪个目录，如: /opt/soft/dolphinscheduler，不同于现在的目录</span>\ninstallPath=&quot;/opt/soft/dolphinscheduler&quot;\n<span class=\"hljs-meta prompt_\">\n#</span><span class=\"language-bash\">使用哪个用户部署，使用1.3小节创建的用户</span>\ndeployUser=&quot;dolphinscheduler&quot;\n<span class=\"hljs-meta prompt_\">\n#</span><span class=\"language-bash\">Zookeeper地址</span>\nzkQuorum=&quot;192.168.xx.xx:2181,192.168.xx.xx:2181,192.168.xx.xx:2181&quot;\n<span class=\"hljs-meta prompt_\">\n#</span><span class=\"language-bash\">在哪些机器上部署DS服务</span>\nips=&quot;ds1,ds2,ds3,ds4&quot;\n<span class=\"hljs-meta prompt_\">\n#</span><span class=\"language-bash\">master服务部署在哪台机器上</span>\nmasters=&quot;ds1,ds2&quot;\n<span class=\"hljs-meta prompt_\">\n#</span><span class=\"language-bash\">worker服务部署在哪台机器上</span>\nworkers=&quot;ds3,ds4&quot;\n<span class=\"hljs-meta prompt_\">\n#</span><span class=\"language-bash\">报警服务部署在哪台机器上</span>\nalertServer=&quot;ds2&quot;\n<span class=\"hljs-meta prompt_\">\n#</span><span class=\"language-bash\">后端api服务部署在在哪台机器上</span>\napiServers=&quot;ds1&quot;\n<span class=\"hljs-meta prompt_\">\n\n# </span><span class=\"language-bash\">邮件配置，以qq邮箱为例</span>\n<span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">邮件协议</span>\nmailProtocol=&quot;SMTP&quot;\n<span class=\"hljs-meta prompt_\">\n# </span><span class=\"language-bash\">邮件服务地址</span>\nmailServerHost=&quot;smtp.exmail.qq.com&quot;\n<span class=\"hljs-meta prompt_\">\n# </span><span class=\"language-bash\">邮件服务端口</span>\nmailServerPort=&quot;25&quot;\n<span class=\"hljs-meta prompt_\">\n# </span><span class=\"language-bash\">mailSender和mailUser配置成一样即可</span>\n<span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">发送者</span>\nmailSender=&quot;xxx@qq.com&quot;\n<span class=\"hljs-meta prompt_\">\n# </span><span class=\"language-bash\">发送用户</span>\nmailUser=&quot;xxx@qq.com&quot;\n<span class=\"hljs-meta prompt_\">\n# </span><span class=\"language-bash\">邮箱密码</span>\nmailPassword=&quot;xxx&quot;\n<span class=\"hljs-meta prompt_\">\n# </span><span class=\"language-bash\">TLS协议的邮箱设置为<span class=\"hljs-literal\">true</span>，否则设置为<span class=\"hljs-literal\">false</span></span>\nstarttlsEnable=&quot;true&quot;\n<span class=\"hljs-meta prompt_\">\n# </span><span class=\"language-bash\">邮件服务地址值，参考上面 mailServerHost</span>\nsslTrust=&quot;smtp.exmail.qq.com&quot;\n<span class=\"hljs-meta prompt_\">\n# </span><span class=\"language-bash\">开启SSL协议的邮箱配置为<span class=\"hljs-literal\">true</span>，否则为<span class=\"hljs-literal\">false</span>。注意: starttlsEnable和sslEnable不能同时为<span class=\"hljs-literal\">true</span></span>\nsslEnable=&quot;false&quot;\n<span class=\"hljs-meta prompt_\">\n# </span><span class=\"language-bash\">excel下载路径</span>\nxlsFilePath=&quot;/tmp/xls&quot;\n<span class=\"hljs-meta prompt_\">\n# </span><span class=\"language-bash\">业务用到的比如sql等资源文件上传到哪里，可以设置：HDFS,S3,NONE。如果想上传到HDFS，请配置为HDFS；如果不需要资源上传功能请选择NONE。</span>\nresUploadStartupType=&quot;HDFS&quot;\n<span class=\"hljs-meta prompt_\">\n# </span><span class=\"language-bash\">如果上传资源保存想保存在hadoop上，hadoop集群的NameNode启用了HA的话，需要将hadoop的配置文件core-site.xml和hdfs-site.xml放到安装路径(上面的installPath)的conf目录下，本例即是放到/opt/soft/dolphinscheduler/conf下面，并配置namenode cluster名称；如果NameNode不是HA,则只需要将mycluster修改为具体的ip或者主机名即可</span>\ndefaultFS=&quot;hdfs://mycluster:8020&quot;\n<span class=\"hljs-meta prompt_\">\n\n# </span><span class=\"language-bash\">如果ResourceManager是HA，则配置为ResourceManager节点的主备ip或者hostname,比如<span class=\"hljs-string\">&quot;192.168.xx.xx,192.168.xx.xx&quot;</span>，否则如果是单ResourceManager或者根本没用到yarn,请配置yarnHaIps=<span class=\"hljs-string\">&quot;&quot;</span>即可，我这里没用到yarn，配置为<span class=\"hljs-string\">&quot;&quot;</span></span>\nyarnHaIps=&quot;&quot;\n<span class=\"hljs-meta prompt_\">\n# </span><span class=\"language-bash\">如果是单ResourceManager，则配置为ResourceManager节点ip或主机名，否则保持默认值即可。我这里没用到yarn，保持默认</span>\nsingleYarnIp=&quot;ark1&quot;\n</code></pre>\n<p><em>特别注意：</em></p>\n<ul>\n<li>如果需要用资源上传到Hadoop集群功能， 并且Hadoop集群的NameNode 配置了 HA的话 ，需要开启 HDFS类型的资源上传，同时需要将Hadoop集群下的core-site.xml和hdfs-site.xml复制到/opt/dolphinscheduler/conf，非NameNode HA跳过次步骤</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1.7-:-安装python的zookeeper工具kazoo\">1.7 : 安装python的Zookeeper工具kazoo</h3>\n<ul>\n<li>安装python的 Zookeeper 工具 ，<code>此步骤仅在一键部署时候用到</code></li>\n</ul>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">安装pip</span>\nsudo yum -y install python-pip;  #ubuntu请使用 sudo apt-get install python-pip\nsudo pip install kazoo;\n</code></pre>\n<p><em>注意：如果yum没找到python-pip，也可以通过下面方式安装</em></p>\n<pre><code class=\"language-shell\">sudo curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py\nsudo python get-pip.py  # 如果是python3，使用sudo python3 get-pip.py \n<span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">然后</span>\nsudo pip install kazoo;\n</code></pre>\n<ul>\n<li>\n<p>切换到部署用户dolphinscheduler，然后执行一键部署脚本</p>\n<p><code>sh install.sh</code></p>\n<pre><code>注意：\n第一次部署的话，在运行中第3步`3,stop server`出现5次以下信息，此信息可以忽略\nsh: bin/dolphinscheduler-daemon.sh: No such file or directory\n</code></pre>\n</li>\n<li>\n<p>脚本完成后，会启动以下5个服务，使用<code>jps</code>命令查看服务是否启动(<code>jps</code>为<code>java JDK</code>自带)</p>\n</li>\n</ul>\n<pre><code class=\"language-aidl\">    MasterServer         ----- master服务\n    WorkerServer         ----- worker服务\n    LoggerServer         ----- logger服务\n    ApiApplicationServer ----- api服务\n    AlertServer          ----- alert服务\n</code></pre>\n<p>如果以上服务都正常启动，说明自动部署成功</p>\n<p>部署成功后，可以进行日志查看，日志统一存放于logs文件夹内</p>\n<pre><code class=\"language-日志路径\"> logs/\n    ├── dolphinscheduler-alert-server.log\n    ├── dolphinscheduler-master-server.log\n    |—— dolphinscheduler-worker-server.log\n    |—— dolphinscheduler-api-server.log\n    |—— dolphinscheduler-logger-server.log\n</code></pre>\n<h1 id=\"2、前端部署\">2、前端部署</h1>\n<p>请下载最新版本的前端安装包至服务器部署目录，下载地址： <a href=\"/zh-cn/download/download.html\">下载</a> (以1.2.0版本为例)，下载后上传tar包到该目录中，并进行解压</p>\n<pre><code class=\"language-shell\">cd /opt/dolphinscheduler;\n\ntar -zxvf apache-dolphinscheduler-incubating-1.2.0-dolphinscheduler-front-bin.tar.gz -C /opt/dolphinscheduler;\n\nmv apache-dolphinscheduler-incubating-1.2.0-dolphinscheduler-front-bin dolphinscheduler-ui\n</code></pre>\n<p><strong>以下两种部署方式任选其一种即可，推荐自动化部署</strong></p>\n<h3 id=\"2.1-自动化部署\">2.1 自动化部署</h3>\n<ul>\n<li>\n<p>进入dolphinscheduler-ui目录下执行(<code>注意：自动化部署会自动下载 nginx</code>)</p>\n<pre><code class=\"language-shell\">cd dolphinscheduler-ui;\nsh ./install-dolphinscheduler-ui.sh;\n</code></pre>\n<ul>\n<li>执行后，会在运行中请键入前端端口，默认端口是8888，如果选择默认，请直接回车，或者键入其他端口</li>\n<li>然后会让键入跟前端ui交互的api-server的ip</li>\n<li>接着是让键入跟前端ui交互的api-server的port</li>\n<li>接着是操作系统选择</li>\n<li>等待部署完成</li>\n</ul>\n</li>\n<li>\n<p>部署完，为防止资源过大无法上传到资源中心,建议修改nginx上传大小参数，具体如下</p>\n<ul>\n<li>添加nginx配置 client_max_body_size 1024m，在http方法体内添加即可</li>\n</ul>\n<pre><code class=\"language-shell\">vi /etc/nginx/nginx.conf\n<span class=\"hljs-meta prompt_\">\n# </span><span class=\"language-bash\">add param</span>\nclient_max_body_size 1024m;\n</code></pre>\n<ul>\n<li>然后重启Nginx服务</li>\n</ul>\n<pre><code class=\"language-shell\">systemctl restart nginx\n</code></pre>\n</li>\n<li>\n<p>访问前端页面地址: http://localhost:8888 ，出现前端登录页面，前端web也安装完成了</p>\n<p>默认用户名密码：admin/dolphinscheduler123</p>\n<p align=\"center\">\n   <img src=\"/img/login.png\" width=\"60%\" />\n </p>\n</li>\n</ul>\n<h3 id=\"2.2-手动部署\">2.2 手动部署</h3>\n<ul>\n<li>\n<p>自行安装nginx，去官网下载: http://nginx.org/en/download.html  或者 <code>yum install nginx -y</code></p>\n</li>\n<li>\n<p>修改nginx配置文件(注意<code>自行修改</code>的几处)</p>\n</li>\n</ul>\n<pre><code class=\"language-html\">vi /etc/nginx/nginx.conf\n\nserver {\n    listen       8888;# 访问端口(自行修改)\n    server_name  localhost;\n    #charset koi8-r;\n    #access_log  /var/log/nginx/host.access.log  main;\n    location / {\n        root   /opt/soft/dolphinscheduler-ui/dist;      # 前端解压的dist目录地址(自行修改)\n        index  index.html index.html;\n    }\n    location /dolphinscheduler {\n        proxy_pass http://localhost:12345;    # 接口地址(自行修改)\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header x_real_ipP $remote_addr;\n        proxy_set_header remote_addr $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_http_version 1.1;\n        proxy_connect_timeout 4s;\n        proxy_read_timeout 30s;\n        proxy_send_timeout 12s;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection &quot;upgrade&quot;;\n    }\n    #error_page  404              /404.html;\n    # redirect server error pages to the static page /50x.html\n    #\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   /usr/share/nginx/html;\n    }\n}\n</code></pre>\n<ul>\n<li>\n<p>然后重启Nginx服务</p>\n<pre><code class=\"language-shell\">systemctl restart nginx\n</code></pre>\n</li>\n<li>\n<p>访问前端页面地址: http://localhost:8888 ，出现前端登录页面，前端web也安装完成了</p>\n<p>默认用户名密码：admin/dolphinscheduler123</p>\n<p align=\"center\">\n   <img src=\"/img/login.png\" width=\"60%\" />\n </p>\n</li>\n</ul>\n<h1 id=\"3、启停服务\">3、启停服务</h1>\n<ul>\n<li>\n<p>一键停止集群所有服务</p>\n<p><code> sh ./bin/stop-all.sh</code></p>\n</li>\n<li>\n<p>一键开启集群所有服务</p>\n<p><code> sh ./bin/start-all.sh</code></p>\n</li>\n<li>\n<p>启停Master</p>\n</li>\n</ul>\n<pre><code class=\"language-shell\">sh ./bin/dolphinscheduler-daemon.sh start master-server\nsh ./bin/dolphinscheduler-daemon.sh stop master-server\n</code></pre>\n<ul>\n<li>启停Worker</li>\n</ul>\n<pre><code class=\"language-shell\">sh ./bin/dolphinscheduler-daemon.sh start worker-server\nsh ./bin/dolphinscheduler-daemon.sh stop worker-server\n</code></pre>\n<ul>\n<li>启停Api</li>\n</ul>\n<pre><code class=\"language-shell\">sh ./bin/dolphinscheduler-daemon.sh start api-server\nsh ./bin/dolphinscheduler-daemon.sh stop api-server\n</code></pre>\n<ul>\n<li>启停Logger</li>\n</ul>\n<pre><code class=\"language-shell\">sh ./bin/dolphinscheduler-daemon.sh start logger-server\nsh ./bin/dolphinscheduler-daemon.sh stop logger-server\n</code></pre>\n<ul>\n<li>启停Alert</li>\n</ul>\n<pre><code class=\"language-shell\">sh ./bin/dolphinscheduler-daemon.sh start alert-server\nsh ./bin/dolphinscheduler-daemon.sh stop alert-server\n</code></pre>\n<p><code>注：服务用途请具体参见《系统架构设计》小节</code></p>\n",
  "location": [
    "部署文档",
    "集群部署(Cluster)"
  ],
  "time": "2020-1-2",
  "structure": [
    {
      "title": "1.1 : 基础软件安装(必装项请自行安装)",
      "children": [],
      "anchor": "1.1-:-基础软件安装(必装项请自行安装)"
    },
    {
      "title": "1.2 : 下载后端tar.gz包",
      "children": [],
      "anchor": "1.2-:-下载后端tar.gz包"
    },
    {
      "title": "1.3：创建部署用户和hosts映射",
      "children": [],
      "anchor": "1.3：创建部署用户和hosts映射"
    },
    {
      "title": "1.4 : 配置hosts映射和ssh打通及修改目录权限",
      "children": [],
      "anchor": "1.4-:-配置hosts映射和ssh打通及修改目录权限"
    },
    {
      "title": "1.5 : 数据库初始化",
      "children": [],
      "anchor": "1.5-:-数据库初始化"
    },
    {
      "title": "1.6 : 修改运行参数",
      "children": [],
      "anchor": "1.6-:-修改运行参数"
    },
    {
      "title": "1.7 : 安装python的Zookeeper工具kazoo",
      "children": [],
      "anchor": "1.7-:-安装python的zookeeper工具kazoo"
    },
    {
      "title": "2.1 自动化部署",
      "children": [],
      "anchor": "2.1-自动化部署"
    },
    {
      "title": "2.2 手动部署",
      "children": [],
      "anchor": "2.2-手动部署"
    }
  ],
  "title": "集群部署(Cluster)",
  "link": "/cluster-deployment"
}