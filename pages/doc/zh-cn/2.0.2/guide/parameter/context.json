{
  "__html": "<h1 id=\"参数的引用\">参数的引用</h1>\n<p>DolphinScheduler 提供参数间相互引用的能力，包括：本地参数引用全局参数、上下游参数传递。因为有引用的存在，就涉及当参数名相同时，参数的优先级问题，详见<a href=\"/zh-cn/docs/2.0.2/guide/parameter/priority\">参数优先级</a></p>\n<h2 id=\"本地任务引用全局参数\">本地任务引用全局参数</h2>\n<p>本地任务引用全局参数的前提是，你已经定义了<a href=\"/zh-cn/docs/2.0.2/guide/parameter/global\">全局参数</a>，使用方式和<a href=\"/zh-cn/docs/2.0.2/guide/parameter/local\">本地参数</a>中的使用方式类似，但是参数的值需要配置成全局参数中的key</p>\n<p><img src=\"/img/global_parameter.png\" alt=\"parameter-call-global-in-local\"></p>\n<p>如上图中的<code>${biz_date}</code>以及<code>${biz_curdate}</code>，就是本地参数引用全局参数的例子。观察上图的最后一行，local_param_bizdate通过${global_bizdate}来引用全局参数，在shell脚本中可以通过${local_param_bizdate}来引全局变量 global_bizdate的值，或通过JDBC直接将local_param_bizdate的值set进去。同理，local_param通过${local_param}引用上一节中定义的全局参数。​biz_date、biz_curdate、system.datetime都是用户自定义的参数，通过${全局参数}进行赋值。</p>\n<h2 id=\"上游任务传递给下游任务\">上游任务传递给下游任务</h2>\n<p>DolphinScheduler 允许在任务间进行参数传递，目前传递方向仅支持上游单向传递给下游。目前支持这个特性的任务类型有：</p>\n<ul>\n<li><a href=\"/zh-cn/docs/2.0.2/guide/task/shell\">Shell</a></li>\n<li><a href=\"/zh-cn/docs/2.0.2/guide/task/sql\">SQL</a></li>\n<li><a href=\"/zh-cn/docs/2.0.2/guide/task/stored-procedure\">Procedure</a></li>\n</ul>\n<p>当定义上游节点时，如果有需要将该节点的结果传递给有依赖关系的下游节点，需要在【当前节点设置】的【自定义参数】设置一个方向是 OUT 的变量。目前我们主要针对 SQL 和 SHELL 节点做了可以向下传递参数的功能。</p>\n<h3 id=\"sql\">SQL</h3>\n<p>prop 为用户指定；方向选择为 OUT，只有当方向为 OUT 时才会被定义为变量输出；数据类型可以根据需要选择不同数据结构；value 部分不需要填写。</p>\n<p>如果 SQL 节点的结果只有一行，一个或多个字段，prop 的名字需要和字段名称一致。数据类型可选择为除 LIST 以外的其他类型。变量会选择 SQL 查询结果中的列名中与该变量名称相同的列对应的值。</p>\n<p>如果 SQL 节点的结果为多行，一个或多个字段，prop 的名字需要和字段名称一致。数据类型选择为LIST。获取到 SQL 查询结果后会将对应列转化为 LIST<VARCHAR>，并将该结果转化为 JSON 后作为对应变量的值。</p>\n<p>我们再以上图中包含 SQL 节点的流程举例说明：</p>\n<p>上图中节点【createParam1】的定义如下：</p>\n<img src=\"/img/globalParam/image-20210723104957031.png\" alt=\"image-20210723104957031\" style=\"zoom:50%;\" />\n<p>节点【createParam2】的定义如下：</p>\n<img src=\"/img/globalParam/image-20210723105026924.png\" alt=\"image-20210723105026924\" style=\"zoom:50%;\" />\n<p>您可以在【工作流实例】页面，找到对应的节点实例，便可以查看该变量的值。</p>\n<p>节点实例【createParam1】如下：</p>\n<img src=\"/img/globalParam/image-20210723105131381.png\" alt=\"image-20210723105131381\" style=\"zoom:50%;\" />\n<p>这里当然 &quot;id&quot; 的值会等于 12.</p>\n<p>我们再来看节点实例【createParam2】的情况。</p>\n<img src=\"/img/globalParam/image-20210723105255850.png\" alt=\"image-20210723105255850\" style=\"zoom:50%;\" />\n<p>这里只有 &quot;id&quot; 的值。尽管用户定义的 sql 查到的是 &quot;id&quot; 和 &quot;database_name&quot; 两个字段，但是由于只定义了一个为 out 的变量 &quot;id&quot;，所以只会设置一个变量。由于显示的原因，这里已经替您查好了该 list 的长度为 10。</p>\n<h3 id=\"shell\">SHELL</h3>\n<p>prop 为用户指定；方向选择为 OUT，只有当方向为 OUT 时才会被定义为变量输出；数据类型可以根据需要选择不同数据结构；value 部分不需要填写。</p>\n<p>用户需要传递参数，在定义 shell 脚本时，需要输出格式为 ${setValue(key=value)} 的语句，key 为对应参数的 prop，value 为该参数的值。</p>\n<p>例如下图中, 通过 <code>echo '${setValue(trans=hello trans)}'</code>, 将'trans'设置为&quot;hello trans&quot;, 在下游任务中就可以使用trans这个变量了：</p>\n<img src=\"/img/globalParam/trans-shell.png\" alt=\"trans-shell\" style=\"zoom:50%;\" />\n<p>shell 节点定义时当日志检测到 ${setValue(key=value1)} 的格式时，会将 value1 赋值给 key，下游节点便可以直接使用变量 key 的值。同样，您可以在【工作流实例】页面，找到对应的节点实例，便可以查看该变量的值。</p>\n<img src=\"/img/globalParam/use-parameter-shell.png\" alt=\"use-parameter-shell\" style=\"zoom:50%;\" />\n",
  "location": [
    "功能介绍",
    "参数",
    "参数传递"
  ],
  "time": "2022-1-5",
  "structure": [
    {
      "title": "本地任务引用全局参数",
      "children": [
        {
          "title": "SQL",
          "children": [],
          "anchor": "sql"
        },
        {
          "title": "SHELL",
          "children": [],
          "anchor": "shell"
        }
      ],
      "anchor": "本地任务引用全局参数"
    },
    {
      "title": "上游任务传递给下游任务",
      "children": [
        {
          "title": "SQL",
          "children": [],
          "anchor": "sql"
        },
        {
          "title": "SHELL",
          "children": [],
          "anchor": "shell"
        }
      ],
      "anchor": "上游任务传递给下游任务"
    }
  ],
  "title": "参数的引用",
  "link": "/guide/parameter/context"
}