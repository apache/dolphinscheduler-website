{
  "__html": "<h2 id=\"system-architecture-design\">System Architecture Design</h2>\n<p>Before explaining the architecture of the scheduling system, let's first understand the commonly used terms of the\nscheduling system</p>\n<h3 id=\"1.glossary\">1.Glossary</h3>\n<p><strong>DAG：</strong> The full name is Directed Acyclic Graph, referred to as DAG. Tasks in the workflow are assembled in the\nform of a directed acyclic graph, and topological traversal is performed from nodes with zero in-degree until\nthere are no subsequent nodes. An example is shown below:</p>\n<p><img src=\"/img/new_ui/dev/about/glossary.png\" alt=\"about-glossary\"></p>\n<p><strong>Process definition</strong>: Visualization of a <strong>DAG</strong> formed by dragging task nodes and establishing associations between them.</p>\n<p><strong>Process instance</strong>: A process instance is the instantiation of a process definition, which can be generated by\nmanual start or scheduled triggering. Each time a process definition runs, a process instance is generated</p>\n<p><strong>Task instance</strong>: An instantiation of a task node within a process definition, representing a specific execution\nof that task.</p>\n<p><strong>Task type</strong>: Currently supports SHELL, SQL, SUB_WORKFLOW, PROCEDURE, MR, SPARK, PYTHON, DEPENDENT (\ndepends), and plans to support dynamic plug-in expansion, note: <strong>SUB_WORKFLOW</strong>  need be associated with another\nworkflow definition which is a separate process definition that can be started and executed separately</p>\n<p><strong>Scheduling method</strong>: The system supports scheduled triggering (based on cron expressions) and manual triggering.\nCommand types support: start workflow, start execution from current node, resume fault-tolerant workflow,\nresume pause process, start execution from failed node, complement, timing, rerun, pause, stop, resume waiting thread.\nAmong them the command types <strong>Resume fault-tolerant workflow</strong> and <strong>Resume waiting thread</strong> are used by the internal\nscheduling control and cannot be invoked externally.</p>\n<p><strong>Scheduled</strong>: The system adopts <strong>quartz</strong> distributed scheduler, and supports visual generation of cron expressions</p>\n<p><strong>Dependencies</strong>: The system not only supports simple <strong>DAG</strong> dependencies between predecessor and successor nodes, but also\nprovides <strong>task dependent</strong> nodes, supporting dependencies <strong>between processes</strong></p>\n<p><strong>Priority</strong>: Supports priority settings for both process instances and task instances. If no priority is specified,\nthe system defaults to a first-in, first-out (FIFO) execution order.</p>\n<p><strong>Email alert</strong>: Support <strong>SQL task</strong> Query result email sending, process instance running result email alert and fault\ntolerance alert notification</p>\n<p><strong>Failure strategy</strong>: For workflows with parallel task execution, the system provides two failure handling strategies.\n<strong>Continue</strong> If a task fails, the system continues executing other parallel tasks to completion, regardless of the failure.\nThe overall process is marked as failed only after all parallel tasks have finished running.\n<strong>End</strong> means that upon a task failure, the system immediately marks the process as failed and terminates any currently\nrunning parallel tasks</p>\n<p><strong>Complement</strong>: backfilling historical data，supports <strong>interval parallel</strong> and <strong>serial</strong> two complement modes,\nand two date selection methods including <strong>date range</strong> and <strong>date enumeration</strong>.</p>\n<h3 id=\"2.module-introduction\">2.Module introduction</h3>\n<ul>\n<li>\n<p>dolphinscheduler-master master module, provides workflow management and orchestration.</p>\n</li>\n<li>\n<p>dolphinscheduler-worker worker module, provides task execution management.</p>\n</li>\n<li>\n<p>dolphinscheduler-alert alarm module, providing AlertServer service.</p>\n</li>\n<li>\n<p>dolphinscheduler-api web application module, providing ApiServer service.</p>\n</li>\n<li>\n<p>dolphinscheduler-common General constant enumeration, utility class, data structure or base class</p>\n</li>\n<li>\n<p>dolphinscheduler-dao provides operations such as database access.</p>\n</li>\n<li>\n<p>dolphinscheduler-extract dolphinscheduler extract module, providing master/worker/alert sdk.</p>\n</li>\n<li>\n<p>dolphinscheduler-service service module, including Quartz, Zookeeper, log client access service, easy to call server\nmodule and api module</p>\n</li>\n<li>\n<p>dolphinscheduler-ui front-end module</p>\n</li>\n</ul>\n<h3 id=\"sum-up\">Sum up</h3>\n<p>From the perspective of scheduling, this article preliminarily introduces the architecture principles and implementation\nideas of the big data distributed workflow scheduling system — DolphinScheduler. To be continued</p>\n",
  "location": [
    "About",
    "Glossary"
  ],
  "structure": [
    {
      "title": "System Architecture Design",
      "children": [
        {
          "title": "1.Glossary",
          "children": [],
          "anchor": "1.glossary"
        },
        {
          "title": "2.Module introduction",
          "children": [],
          "anchor": "2.module-introduction"
        },
        {
          "title": "Sum up",
          "children": [],
          "anchor": "sum-up"
        }
      ],
      "anchor": "system-architecture-design"
    }
  ],
  "title": "System Architecture Design",
  "link": "/about/glossary"
}