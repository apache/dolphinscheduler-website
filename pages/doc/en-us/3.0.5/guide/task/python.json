{
  "__html": "<h1 id=\"python-node\">Python Node</h1>\n<h2 id=\"overview\">Overview</h2>\n<p>Use <code>Python Task</code> to create a python-type task and execute python scripts. When the worker executes <code>Python Task</code>,\nit will generate a temporary python script, and executes the script by the Linux user with the same name as the tenant.</p>\n<h2 id=\"create-task\">Create Task</h2>\n<ul>\n<li>Click <code>Project Management -&gt; Project Name -&gt; Workflow Definition</code>, and click the <code>Create Workflow</code> button to enter the DAG editing page.</li>\n<li>Drag <img src=\"/img/tasks/icons/python.png\" width=\"15\"/> from the toolbar to the canvas.</li>\n</ul>\n<h2 id=\"task-parameter\">Task Parameter</h2>\n<table>\n<thead>\n<tr>\n<th><strong>Parameter</strong></th>\n<th><strong>Description</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Node Name</td>\n<td>Set the name of the task. Node names within a workflow definition are unique.</td>\n</tr>\n<tr>\n<td>Run flag</td>\n<td>Indicates whether the node can be scheduled normally. If it is not necessary to execute, you can turn on the prohibiting execution switch.</td>\n</tr>\n<tr>\n<td>Description</td>\n<td>Describes the function of this node.</td>\n</tr>\n<tr>\n<td>Task priority</td>\n<td>When the number of worker threads is insufficient, they are executed in order from high to low according to the priority, and they are executed according to the first-in, first-out principle when the priority is the same.</td>\n</tr>\n<tr>\n<td>Worker group</td>\n<td>The task is assigned to the machines in the worker group for execution. If Default is selected, a worker machine will be randomly selected for execution.</td>\n</tr>\n<tr>\n<td>Task group name</td>\n<td>The group in Resources, if not configured, it will not be used.</td>\n</tr>\n<tr>\n<td>Environment Name</td>\n<td>Configure the environment in which to run the script.</td>\n</tr>\n<tr>\n<td>Number of failed retries</td>\n<td>The number of times the task is resubmitted after failure. It supports drop-down and manual filling.</td>\n</tr>\n<tr>\n<td>Failure Retry Interval</td>\n<td>The time interval for resubmitting the task if the task fails. It supports drop-down and manual filling.</td>\n</tr>\n<tr>\n<td>Timeout alarm</td>\n<td>Check Timeout Alarm and Timeout Failure. When the task exceeds the &quot;timeout duration&quot;, an alarm email will be sent and the task execution will fail.</td>\n</tr>\n<tr>\n<td>Cpu quota</td>\n<td>Assign the specified CPU time quota to the task executed. Takes a percentage value. Default -1 means unlimited. For example, the full CPU load of one core is 100%,and that of 16 cores is 1600%. This function is controlled by <a href=\"/en-us/docs/3.0.5/architecture/configuration\">task.resource.limit.state</a>.</td>\n</tr>\n<tr>\n<td>Max memory</td>\n<td>Assign the specified max memory to the task executed. Exceeding this limit will trigger oom to be killed and will not automatically retry. Takes an MB value. Default -1 means unlimited. This function is controlled by <a href=\"/en-us/docs/3.0.5/architecture/configuration\">task.resource.limit.state</a>.</td>\n</tr>\n<tr>\n<td>Timeout alarm</td>\n<td>Check the timeout alarm and timeout failure. When the task exceeds the &quot;timeout period&quot;, an alarm email will send and the task execution will fail.</td>\n</tr>\n<tr>\n<td>Script</td>\n<td>Python program developed by the user.</td>\n</tr>\n<tr>\n<td>Resource</td>\n<td>Refers to the list of resource files that need to be called in the script, and the files uploaded or created by the resource center-file management.</td>\n</tr>\n<tr>\n<td>Custom parameters</td>\n<td>It is the user-defined parameters of Python, which will replace the content with ${variable} in the script.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"task-example\">Task Example</h2>\n<h3 id=\"simply-print\">Simply Print</h3>\n<p>This example simulates a common task that runs by a simple command. The example is to print one line in the log file, as shown in the following figure:\n&quot;This is a demo of python task&quot;.</p>\n<p><img src=\"/img/tasks/demo/python_ui_next.jpg\" alt=\"demo-python-simple\"></p>\n<pre><code class=\"language-python\"><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;This is a demo of python task&quot;</span>)\n</code></pre>\n<h3 id=\"custom-parameters\">Custom Parameters</h3>\n<p>This example simulates a custom parameter task. We use parameters for reusing existing tasks as template or coping with the dynamic task. In this case,\nwe declare a custom parameter named &quot;param_key&quot;, with the value &quot;param_val&quot;. Then we use echo to print the parameter &quot;${param_key}&quot; we just declared.\nAfter running this example, we would see &quot;param_val&quot; print in the log.</p>\n<p><img src=\"/img/tasks/demo/python_custom_param_ui_next.jpg\" alt=\"demo-python-custom-param\"></p>\n<pre><code class=\"language-python\"><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;${param_key}&quot;</span>)\n</code></pre>\n",
  "location": [
    "Introduction to Functions",
    "Task",
    "Python"
  ],
  "time": "2023-4-3",
  "structure": [
    {
      "title": "Overview",
      "children": [
        {
          "title": "Simply Print",
          "children": [],
          "anchor": "simply-print"
        },
        {
          "title": "Custom Parameters",
          "children": [],
          "anchor": "custom-parameters"
        }
      ],
      "anchor": "overview"
    },
    {
      "title": "Create Task",
      "children": [
        {
          "title": "Simply Print",
          "children": [],
          "anchor": "simply-print"
        },
        {
          "title": "Custom Parameters",
          "children": [],
          "anchor": "custom-parameters"
        }
      ],
      "anchor": "create-task"
    },
    {
      "title": "Task Parameter",
      "children": [
        {
          "title": "Simply Print",
          "children": [],
          "anchor": "simply-print"
        },
        {
          "title": "Custom Parameters",
          "children": [],
          "anchor": "custom-parameters"
        }
      ],
      "anchor": "task-parameter"
    },
    {
      "title": "Task Example",
      "children": [
        {
          "title": "Simply Print",
          "children": [],
          "anchor": "simply-print"
        },
        {
          "title": "Custom Parameters",
          "children": [],
          "anchor": "custom-parameters"
        }
      ],
      "anchor": "task-example"
    }
  ],
  "title": "Python Node",
  "link": "/guide/task/python"
}