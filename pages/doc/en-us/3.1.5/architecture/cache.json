{
  "__html": "<h1 id=\"cache\">Cache</h1>\n<h2 id=\"purpose\">Purpose</h2>\n<p>Due to the large database read operations during the master-server scheduling process. Such as read tables like <code>tenant</code>, <code>user</code>, <code>processDefinition</code>, etc. Operations stress read pressure to the DB, and slow down the entire core scheduling process.</p>\n<p>By considering this part of the business data is a high-read and low-write scenario, a cache module is introduced to reduce the DB read pressure and speed up the core scheduling process.</p>\n<h2 id=\"cache-settings\">Cache Settings</h2>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">spring:</span>\n  <span class=\"hljs-attr\">cache:</span>\n    <span class=\"hljs-comment\"># default disable cache, you can enable by `type: caffeine`</span>\n    <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">none</span>\n    <span class=\"hljs-attr\">cache-names:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">tenant</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">user</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">processDefinition</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">processTaskRelation</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">taskDefinition</span>\n    <span class=\"hljs-attr\">caffeine:</span>\n      <span class=\"hljs-attr\">spec:</span> <span class=\"hljs-string\">maximumSize=100,expireAfterWrite=300s,recordStats</span>\n</code></pre>\n<p>The cache module uses <a href=\"https://spring.io/guides/gs/caching/\">spring-cache</a>, so you can set cache config like whether to enable cache (<code>none</code> to disable by default), cache types in the spring <code>application.yaml</code> directly.</p>\n<p>Currently, implements the config of <a href=\"https://github.com/ben-manes/caffeine\">caffeine</a>, you can assign cache configs like cache size, expire time, etc.</p>\n<h2 id=\"cache-read\">Cache Read</h2>\n<p>The cache module adopts the <code>@Cacheable</code> annotation from spring-cache and you can annotate the annotation in the related mapper layer. Refer to the <code>TenantMapper</code>.</p>\n<h2 id=\"cache-evict\">Cache Evict</h2>\n<p>The business data updates come from the api-server, and the cache side is in the master-server. Then it is necessary to monitor the data updates from the api-server (use aspect point cut interceptor <code>@CacheEvict</code>), and notify the master-server of <code>cacheEvictCommand</code> when processing a cache eviction.</p>\n<p>Note: the final strategy for cache update comes from the expiration strategy configuration in caffeine, therefore configure it under the business scenarios;</p>\n<p>The sequence diagram shows below:</p>\n<img src=\"/img/cache-evict.png\" alt=\"cache-evict\" style=\"zoom: 67%;\" />\n",
  "location": [
    "Architecture Guide",
    "Cache"
  ],
  "time": "2023-04-06",
  "structure": [
    {
      "title": "Purpose",
      "children": [],
      "anchor": "purpose"
    },
    {
      "title": "Cache Settings",
      "children": [],
      "anchor": "cache-settings"
    },
    {
      "title": "Cache Read",
      "children": [],
      "anchor": "cache-read"
    },
    {
      "title": "Cache Evict",
      "children": [],
      "anchor": "cache-evict"
    }
  ],
  "title": "Cache",
  "link": "/architecture/cache"
}