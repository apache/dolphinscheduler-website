{
  "__html": "<h1 id=\"dynamic-task\">Dynamic Task</h1>\n<h2 id=\"overview\">Overview</h2>\n<p>Dynamic task can input multiple parameter lists, calculate all parameter combinations through Cartesian product, and then execute each parameter combination as a sub-workflow node.</p>\n<p>For example, we have a workflow with two input parameters, a, b.</p>\n<p>We can use the dynamic node to define this workflow definition as a node, and then enter the parameter list</p>\n<ul>\n<li>Parameter a: a1, a2</li>\n<li>Parameter b: b1, b2</li>\n</ul>\n<p>Then the dynamic node will calculate four parameter combinations, which are</p>\n<ul>\n<li>a1, b1</li>\n<li>a1, b2</li>\n<li>a2, b1</li>\n<li>a2, b2</li>\n</ul>\n<p>Then execute these four parameter combinations as the startup parameters of the sub-workflow node, and a total of four sub-workflow nodes are generated.</p>\n<h2 id=\"create-task\">Create Task</h2>\n<ul>\n<li>Click <code>Project -&gt; Management-Project -&gt; Name-Workflow Definition</code>, and click the &quot;Create Workflow&quot; button to enter the\nDAG editing page.</li>\n<li>Drag from the toolbar <img src=\"/img/tasks/icons/dynamic.png\" width=\"15\"/> task node to canvas.</li>\n</ul>\n<p>The task definition is shown in the following figure:</p>\n<p><img src=\"/img/tasks/demo/dynamic_definition.png\" alt=\"dynamic_definition\"></p>\n<h2 id=\"task-parameters\">Task Parameters</h2>\n<ul>\n<li>Please refer to <a href=\"/en-us/docs/3.2.2/guide/task/appendix\">DolphinScheduler Task Parameters Appendix</a> <code>Default Task Parameters</code> section for default parameters.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>Task Parameters</strong></th>\n<th><strong>Description</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Child Node</td>\n<td>Select the workflow definition of the sub-workflow. You can jump to the workflow definition of the selected sub-workflow by entering the sub-node in the upper right corner.</td>\n</tr>\n<tr>\n<td>max num of sub workflow instances</td>\n<td>The maximum number of sub-workflow instances dynamically generated. After exceeding this upper limit, the dynamically generated sub-workflow instances will no longer be executed.</td>\n</tr>\n<tr>\n<td>Parallelism</td>\n<td>The parallelism of the sub-workflow instances dynamically generated, that is, the number of sub-workflow instances executed at the same time.</td>\n</tr>\n<tr>\n<td>Param Value</td>\n<td>The parameter of the sub-workflow instance dynamically generated, supports multiple parameters, and the parameters are separated by delimiters.</td>\n</tr>\n<tr>\n<td>Filter Condition</td>\n<td>The filter condition of the sub-workflow instance dynamically generated, supports multiple filter values, and the filter conditions are separated by commas, such as <code>2022,2023</code>, which will filter the parameter groups containing the values of 2022 and 2023.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"task-parameters-output\">Task Parameters Output</h2>\n<p>The output parameters of the dynamic node refer to the output parameters of the sub-workflow. The output parameters of all sub-workflows will be collected into a list as the output parameters of the dynamic node.</p>\n<p>When the downstream task is referenced, it can be referenced by <code>${dynamic.out(TaskName)}</code>.</p>\n<p>The value is a json, as shown below</p>\n<pre><code class=\"language-Json\"><span class=\"hljs-punctuation\">[</span>\n    <span class=\"hljs-punctuation\">{</span> <span class=\"hljs-attr\">&quot;dynParams&quot;</span><span class=\"hljs-punctuation\">:</span><span class=\"hljs-punctuation\">{</span> <span class=\"hljs-attr\">&quot;a&quot;</span><span class=\"hljs-punctuation\">:</span><span class=\"hljs-string\">&quot;a1&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-attr\">&quot;b&quot;</span><span class=\"hljs-punctuation\">:</span><span class=\"hljs-string\">&quot;b1&quot;</span> <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-attr\">&quot;outputValue&quot;</span><span class=\"hljs-punctuation\">:</span><span class=\"hljs-punctuation\">{</span> <span class=\"hljs-attr\">&quot;p&quot;</span><span class=\"hljs-punctuation\">:</span><span class=\"hljs-string\">&quot;a1-b1&quot;</span> <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-attr\">&quot;mappedTimes&quot;</span><span class=\"hljs-punctuation\">:</span><span class=\"hljs-number\">1</span> <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-punctuation\">{</span> <span class=\"hljs-attr\">&quot;dynParams&quot;</span><span class=\"hljs-punctuation\">:</span><span class=\"hljs-punctuation\">{</span> <span class=\"hljs-attr\">&quot;a&quot;</span><span class=\"hljs-punctuation\">:</span><span class=\"hljs-string\">&quot;a2&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-attr\">&quot;b&quot;</span><span class=\"hljs-punctuation\">:</span><span class=\"hljs-string\">&quot;b1&quot;</span> <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-attr\">&quot;outputValue&quot;</span><span class=\"hljs-punctuation\">:</span><span class=\"hljs-punctuation\">{</span> <span class=\"hljs-attr\">&quot;p&quot;</span><span class=\"hljs-punctuation\">:</span><span class=\"hljs-string\">&quot;a2-b1&quot;</span> <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-attr\">&quot;mappedTimes&quot;</span><span class=\"hljs-punctuation\">:</span><span class=\"hljs-number\">2</span> <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-punctuation\">{</span> <span class=\"hljs-attr\">&quot;dynParams&quot;</span><span class=\"hljs-punctuation\">:</span><span class=\"hljs-punctuation\">{</span> <span class=\"hljs-attr\">&quot;a&quot;</span><span class=\"hljs-punctuation\">:</span><span class=\"hljs-string\">&quot;a3&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-attr\">&quot;b&quot;</span><span class=\"hljs-punctuation\">:</span><span class=\"hljs-string\">&quot;b1&quot;</span> <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-attr\">&quot;outputValue&quot;</span><span class=\"hljs-punctuation\">:</span><span class=\"hljs-punctuation\">{</span> <span class=\"hljs-attr\">&quot;p&quot;</span><span class=\"hljs-punctuation\">:</span><span class=\"hljs-string\">&quot;a3-b1&quot;</span> <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-attr\">&quot;mappedTimes&quot;</span><span class=\"hljs-punctuation\">:</span><span class=\"hljs-number\">3</span> <span class=\"hljs-punctuation\">}</span>\n<span class=\"hljs-punctuation\">]</span>\n</code></pre>\n<ul>\n<li><code>dynParams</code> the input parameters of the sub-workflow</li>\n<li><code>outputValue</code> is the output parameter of the sub-workflow. For example, the <code>p</code> here is a string that splices the output parameters <code>a</code> and <code>b</code> of the sub-workflow and outputs them in the form of variables <code>p</code></li>\n<li><code>mappedTimes</code> is the index of the execution of the sub-workflow, starting from 1</li>\n</ul>\n<h2 id=\"running-status\">Running Status</h2>\n<p>After the dynamic task is started, all parameter combinations will be calculated according to the input parameter list, and then a sub-workflow instance will be created for each parameter combination.</p>\n<p>When the dynamic task is running, it will periodically check the statistical information of all current sub-workflow instances. If the parallelism is greater than the number of sub-workflow instances running, it will trigger the start of the appropriate number of sub-workflow instances (the sub-workflow instances are created first, and then the start is triggered later).</p>\n<p>As shown below.</p>\n<p><img src=\"/img/tasks/demo/dynamic_running.png\" alt=\"dynamic_running\"></p>\n<p>The dynamic task will run successfully only when all sub-workflow instances are running successfully.</p>\n",
  "location": [
    "Introduction to Functions",
    "Task",
    "Dynamic"
  ],
  "time": "2024-7-16",
  "structure": [
    {
      "title": "Overview",
      "children": [],
      "anchor": "overview"
    },
    {
      "title": "Create Task",
      "children": [],
      "anchor": "create-task"
    },
    {
      "title": "Task Parameters",
      "children": [],
      "anchor": "task-parameters"
    },
    {
      "title": "Task Parameters Output",
      "children": [],
      "anchor": "task-parameters-output"
    },
    {
      "title": "Running Status",
      "children": [],
      "anchor": "running-status"
    }
  ],
  "title": "Dynamic Task",
  "link": "/guide/task/dynamic"
}