{
  "__html": "<h1 id=\"parameter-priority\">Parameter Priority</h1>\n<p>DolphinScheduler definition of parameter values ​​involved in may come from three types:</p>\n<ul>\n<li><a href=\"/en-us/docs/2.0.0/guide/parameter/global\">Global Parameter</a>: Parameters defined when the workflow saves page definitions</li>\n<li><a href=\"/en-us/docs/2.0.0/guide/parameter/context\">Parameter Context</a>: Parameters passed by upstream nodes</li>\n<li><a href=\"/en-us/docs/2.0.0/guide/parameter/local\">Local Parameter</a>：The node's own parameters, which is the parameters defined by the user in [Custom Parameters]. The user can define the value of this part of the parameters at the time of workflow definition.</li>\n</ul>\n<p>Because the value of a parameter has multiple sources, when the parameter name is the same, there needs to be a parameter priority problem. The priority of DolphinScheduler parameters from high to low is: <code>Global Parameter &gt; Parameter Context &gt; Local Parameter</code></p>\n<p>In the case of parameters passed by the upstream task, there may be multiple tasks upstream to pass parameters to the downstream. When the parameter names passed upstream are the same:</p>\n<ul>\n<li>Downstream nodes will preferentially use parameters with non-empty values</li>\n<li>If there are multiple parameters with non-empty values, sort according to the completion time of the upstream task, and select the parameter corresponding to the upstream task with the earliest completion time</li>\n</ul>\n<h2 id=\"example\">Example</h2>\n<p>For example, the relationships are shown in the figures below:</p>\n<p>1: The first case is explained by the shell nodes.</p>\n<p><img src=\"/img/globalParam/image-20210723102938239.png\" alt=\"png01\"></p>\n<p>The [useParam] node can use the parameters which is set in the [createParam] node. The [useParam] node does not have a dependency on the [noUseParam] node, so it does not get the parameters of the [noUseParam] node. The above picture is just an example of a shell node, other types of nodes have the same usage rules.</p>\n<p><img src=\"/img/globalParam/image-20210723103316896.png\" alt=\"png02\"></p>\n<p>Among all, the [createParam] node can use parameters directly. In addition, the node sets two parameters named &quot;key&quot; and &quot;key1&quot;. Here the user defines a parameter named &quot;key1&quot; with the same name as the one passed by the upstream node and copies the value &quot;12&quot;. However, due to the priority we set, the value &quot;12&quot; here would be discarded and the parameter value set by the upstream node would be finally used.</p>\n<p>2: Let's explain another situation in SQL nodes.</p>\n<p><img src=\"/img/globalParam/image-20210723103937052.png\" alt=\"png03\"></p>\n<p>The definition of the [use_create] node is as follows:</p>\n<p><img src=\"/img/globalParam/image-20210723104411489.png\" alt=\"png04\"></p>\n<p>&quot;status&quot; is the own parameters of the node set by the current node. However, the user also sets the &quot;status&quot; parameter when saving, assigning its value to -1. Then the value of status will be -1 with higher priority when the SQL is executed. The value of the node's own variable is discarded.</p>\n<p>The &quot;ID&quot; here is the parameter set by the upstream node. The user sets the parameters of the same parameter name &quot;ID&quot; for the [createparam1] node and [createparam2] node. And the [use_create] node uses the value of [createParam1] which is finished first.</p>\n",
  "location": [
    "Introduction to Functions",
    "Parameter",
    "Parameter Priority"
  ],
  "time": "2021-11-25",
  "structure": [
    {
      "title": "Example",
      "children": [],
      "anchor": "example"
    }
  ],
  "title": "Parameter Priority",
  "link": "/guide/parameter/priority"
}