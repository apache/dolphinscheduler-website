{
  "__html": "<h3 id=\"cache\">Cache</h3>\n<h4 id=\"purpose\">Purpose</h4>\n<p>Due to the master-server scheduling process, there will be a large number of database read operations, such as <code>tenant</code>, <code>user</code>, <code>processDefinition</code>, etc. On the one hand, it will put a lot of pressure on the DB, and on the other hand, it will slow down the entire core scheduling process.</p>\n<p>Considering that this part of the business data is a scenario where more reads and less writes are performed, a cache module is introduced to reduce the DB read pressure and speed up the core scheduling process;</p>\n<h4 id=\"cache-settings\">Cache settings</h4>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">spring:</span>\n  <span class=\"hljs-attr\">cache:</span>\n    <span class=\"hljs-comment\"># default disable cache, you can enable by `type: caffeine`</span>\n    <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">none</span>\n    <span class=\"hljs-attr\">cache-names:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">tenant</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">user</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">processDefinition</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">processTaskRelation</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">taskDefinition</span>\n    <span class=\"hljs-attr\">caffeine:</span>\n      <span class=\"hljs-attr\">spec:</span> <span class=\"hljs-string\">maximumSize=100,expireAfterWrite=300s,recordStats</span>\n</code></pre>\n<p>The cache-module use <a href=\"https://spring.io/guides/gs/caching/\">spring-cache</a>, so you can set cache config in the spring application.yaml directly. Default disable cache, and you can enable it by <code>type: caffeine</code>.</p>\n<p>With the config of <a href=\"https://github.com/ben-manes/caffeine\">caffeine</a>, you can set the cache size, expire time, etc.</p>\n<h4 id=\"cache-read\">Cache Read</h4>\n<p>The cache adopts the annotation <code>@Cacheable</code> of spring-cache and is configured in the mapper layer. For example: <code>TenantMapper</code>.</p>\n<h4 id=\"cache-evict\">Cache Evict</h4>\n<p>The business data update comes from the api-server, and the cache end is in the master-server. So it is necessary to monitor the data update of the api-server (aspect intercept <code>@CacheEvict</code>), and the master-server will be notified when the cache eviction is required.</p>\n<p>It should be noted that the final strategy for cache update comes from the user's expiration strategy configuration in caffeine, so please configure it in conjunction with the business;</p>\n<p>The sequence diagram is shown in the following figure:</p>\n<img src=\"/img/cache-evict.png\" alt=\"cache-evict\" style=\"zoom: 67%;\" />",
  "location": [
    "Advanced Guide",
    "Cache"
  ],
  "time": "2023-02-08",
  "structure": [
    {
      "title": "Cache",
      "children": [
        {
          "title": "Purpose",
          "children": [],
          "anchor": "purpose"
        },
        {
          "title": "Cache settings",
          "children": [],
          "anchor": "cache-settings"
        },
        {
          "title": "Cache Read",
          "children": [],
          "anchor": "cache-read"
        },
        {
          "title": "Cache Evict",
          "children": [],
          "anchor": "cache-evict"
        }
      ],
      "anchor": "cache"
    }
  ],
  "title": "Cache",
  "link": "/architecture/cache"
}