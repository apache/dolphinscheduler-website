{
  "filename": "standalone-deployment.md",
  "__html": "<h1>Standalone Deployment</h1>\n<p>DolphinScheduler Standalone deployment is divided into two parts: backend deployment and frontend deployment.</p>\n<h1>1. Backend Deployment</h1>\n<h3>1.1: Before you begin (please install requirement basic software by yourself)</h3>\n<ul>\n<li><a href=\"https://www.postgresql.org/download/\">PostgreSQL</a> (8.2.15+) or <a href=\"https://dev.mysql.com/downloads/mysql/\">MySQL</a> (5.6 or 5.7): Choose One</li>\n<li><a href=\"https://www.oracle.com/technetwork/java/javase/downloads/index.html\">JDK</a> (1.8+):  Required. Double-check configure JAVA_HOME and PATH environment variables in /etc/profile</li>\n<li><a href=\"https://zookeeper.apache.org/releases.html\">ZooKeeper</a> (3.4.6+): Required</li>\n<li><a href=\"https://hadoop.apache.org/releases.html\">Hadoop</a> (2.6+) or <a href=\"https://min.io/download\">MinIO</a>: Optional. If you need to upload a resource function, you can choose a local file directory as the upload folder for a single machine (this operation does not need to deploy Hadoop). Of course, you can also choose to upload to Hadoop or MinIO.</li>\n</ul>\n<pre><code class=\"language-markdown\"> Tips：DolphinScheduler itself does not rely on Hadoop, Hive, Spark, only use their clients for the corresponding task of running.\n</code></pre>\n<h3>1.2: Download the backend package.</h3>\n<ul>\n<li>Please download the latest version of the default installation package to the server deployment directory. For example, use /opt/dolphinscheduler as the installation and deployment directory. Download address: <a href=\"/en-us/download/download.html\">download</a> (Take 1.2.0 for an example). Download the package and move to the installation and deployment directory. Then uncompress it.</li>\n</ul>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> Create the deployment directory. Do not choose a deployment directory with a high-privilege directory such as / root or / home.</span>\nmkdir -p /opt/dolphinscheduler;\ncd /opt/dolphinscheduler;\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> uncompress</span>\ntar -zxvf apache-dolphinscheduler-incubating-1.2.0-dolphinscheduler-backend-bin.tar.gz -C /opt/dolphinscheduler;\n \nmv apache-dolphinscheduler-incubating-1.2.0-dolphinscheduler-backend-bin  dolphinscheduler-backend\n</code></pre>\n<p>###1.3: Create an individual user for deployment and grant directory operation permissions</p>\n<ul>\n<li>Create an individual user, and be sure to configure sudo passwordless. Take creating 'dolphinscheduler' user as an example.</li>\n</ul>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> useradd need root permission</span>\nuseradd dolphinscheduler;\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> setup password</span>\necho &quot;dolphinscheduler&quot; | passwd --stdin dolphinscheduler\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> setup sudo passwordless</span>\nsed -i &#x27;$adolphinscheduler  ALL=(ALL)  NOPASSWD: NOPASSWD: ALL&#x27; /etc/sudoers\nsed -i &#x27;s/Defaults    requirett/#Defaults    requirett/g&#x27; /etc/sudoers\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> Modify the directory permissions so that the deployment user has operation permissions on the dolphinscheduler-backend directory</span> \nchown -R dolphinscheduler:dolphinscheduler dolphinscheduler-backend\n</code></pre>\n<pre><code> Notes：\n - Because the task execution service is based on 'sudo -u {linux-user}' to switch between different Linux users to implement multi-tenant running jobs, the deployment user needs to have sudo permissions and is passwordless. The first-time learners who can ignore it if they don't understand.\n - If find the &quot;Default requiretty&quot; in the &quot;/etc/sudoers&quot; file, also comment out.\n - If you need to use resource upload, you need to assign the user of permission to operate the local file system, HDFS or MinIO.\n</code></pre>\n<h3>1.4: ssh passwordless configuration</h3>\n<ul>\n<li>Switch to deployment user and configure ssh passwordless login</li>\n</ul>\n<pre><code class=\"language-shell\">su dolphinscheduler;\n\nssh-keygen -t rsa -P &#x27;&#x27; -f ~/.ssh/id_rsa\ncat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys\nchmod 600 ~/.ssh/authorized_keys\n</code></pre>\n<p>Note: <em>If configure success, the dolphinscheduler user does not need to enter a password when executing the command <code>ssh localhost</code></em></p>\n<h3>1.5: Database initialization</h3>\n<ul>\n<li>Into the database. The default database is PostgreSQL. If you select MySQL, you need to add the mysql-connector-java driver package to the lib directory of DolphinScheduler.</li>\n</ul>\n<pre><code>mysql -uroot -p\n</code></pre>\n<ul>\n<li>\n<p>After entering the database command line window, execute the database initialization command and set the user and password. <strong>Note: {user} and {password} need to be replaced with a specific database username and password</strong></p>\n<pre><code class=\"language-mysql\">mysql&gt; CREATE DATABASE dolphinscheduler DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;\nmysql&gt; GRANT ALL PRIVILEGES ON dolphinscheduler.* TO &#x27;{user}&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;{password}&#x27;;\nmysql&gt; GRANT ALL PRIVILEGES ON dolphinscheduler.* TO &#x27;{user}&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;{password}&#x27;;\nmysql&gt; flush privileges;\n</code></pre>\n</li>\n<li>\n<p>Create tables and import basic data</p>\n<ul>\n<li>\n<p>Modify the following configuration in application-dao.properties under the conf directory</p>\n<ul>\n<li>\n<pre><code class=\"language-shell\">vi conf/application-dao.properties \n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>If you choose MySQL, please comment out the relevant configuration of PostgreSQL (vice versa), you also need to manually add the [[mysql-connector-java driver jar] (<a href=\"https://downloads.MySQL.com/archives/c-j/\">https://downloads.MySQL.com/archives/c-j/</a>) package to lib under the directory, and then configure the database connection information correctly.</p>\n</li>\n</ul>\n<pre><code class=\"language-properties\"><span class=\"hljs-comment\">  # postgre</span>\n<span class=\"hljs-comment\">  # spring.datasource.driver-class-name=org.postgresql.Driver</span>\n<span class=\"hljs-comment\">  # spring.datasource.url=jdbc:postgresql://localhost:5432/dolphinscheduler</span>\n<span class=\"hljs-comment\">  # mysql</span>\n  <span class=\"hljs-meta\">spring.datasource.driver-class-name</span>=<span class=\"hljs-string\">com.mysql.jdbc.Driver</span>\n  <span class=\"hljs-meta\">spring.datasource.url</span>=<span class=\"hljs-string\">jdbc:mysql://xxx:3306/dolphinscheduler?useUnicode=true&amp;characterEncoding=UTF-8     # Replace the correct IP address</span>\n  <span class=\"hljs-meta\">spring.datasource.username</span>=<span class=\"hljs-string\">xxx\t\t\t\t\t\t# replace the currect {user} value</span>\n  <span class=\"hljs-meta\">spring.datasource.password</span>=<span class=\"hljs-string\">xxx\t\t\t\t\t\t# replace the currect {password} value</span>\n</code></pre>\n<ul>\n<li>After modifying and saving, execute the create table and import data script in the script directory.</li>\n</ul>\n<pre><code class=\"language-shell\">sh script/create-dolphinscheduler.sh\n</code></pre>\n</li>\n</ul>\n<p>​       <em>Note: If you execute the above script and report &quot;/bin/java: No such file or directory&quot; error, please configure JAVA_HOME and PATH variables in /etc/profile</em></p>\n<h3>1.6: Modify runtime parameters.</h3>\n<ul>\n<li>\n<p>Modify the environment variable in <code>.dolphinscheduler_env.sh</code> file which on the 'conf/env' directory (take the relevant software installed under '/opt/soft' as an example)</p>\n<pre><code class=\"language-shell\">export HADOOP_HOME=/opt/soft/hadoop\nexport HADOOP_CONF_DIR=/opt/soft/hadoop/etc/hadoop\n<span class=\"hljs-meta\">#</span><span class=\"bash\"><span class=\"hljs-built_in\">export</span> SPARK_HOME1=/opt/soft/spark1</span>\nexport SPARK_HOME2=/opt/soft/spark2\nexport PYTHON_HOME=/opt/soft/python\nexport JAVA_HOME=/opt/soft/java\nexport HIVE_HOME=/opt/soft/hive\nexport FLINK_HOME=/opt/soft/flink\nexport PATH=$HADOOP_HOME/bin:$SPARK_HOME2/bin:$PYTHON_HOME:$JAVA_HOME/bin:$HIVE_HOME/bin:$PATH:$FLINK_HOME/bin:$PATH\n</code></pre>\n<p><code>Note: This step is very important. For example, JAVA_HOME and PATH must be configured. Those that are not used can be ignored or commented out. If &quot;.dolphinscheduler_env.sh&quot; cannot be found, run &quot;ls -a&quot;</code></p>\n</li>\n<li>\n<p>Create Soft link jdk to /usr/bin/java (still JAVA_HOME=/opt/soft/java as an example)</p>\n<pre><code class=\"language-shell\">sudo ln -s /opt/soft/java/bin/java /usr/bin/java\n</code></pre>\n</li>\n<li>\n<p>Modify the parameters in the one-click deployment script <code>install.sh</code>, pay special attention to the configuration of the following parameters.</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> Choose mysql or postgresql</span>\ndbtype=&quot;mysql&quot;\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> Database connection address</span>\ndbhost=&quot;localhost:3306&quot;\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> Database schema name</span>\ndbname=&quot;dolphinscheduler&quot;\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> Database username</span>\nusername=&quot;xxx&quot;    \n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> Database password, <span class=\"hljs-keyword\">if</span> there are special characters, please use <span class=\"hljs-string\">&#x27;\\&#x27;</span> escape, you need to modify the specific value of {passowrd} <span class=\"hljs-built_in\">set</span> above</span>\npassowrd=&quot;xxx&quot;\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> The directory <span class=\"hljs-built_in\">where</span> DS is installed, such as: <span class=\"hljs-string\">&#x27;/opt/soft/dolphinscheduler&#x27;</span>, <span class=\"hljs-built_in\">which</span> is different from the current directory.</span>\ninstallPath=&quot;/opt/soft/dolphinscheduler&quot;\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> The system user created <span class=\"hljs-keyword\">in</span> section 1.3.</span>\ndeployUser=&quot;dolphinscheduler&quot;\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> Zookeeper connection address, standalone machine is localhost:2181, port must be provided.</span>\nzkQuorum=&quot;localhost:2181&quot;\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> On machine <span class=\"hljs-built_in\">which</span> the DS service is deployed, <span class=\"hljs-built_in\">set</span> localhost</span>\nips=&quot;localhost&quot;\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> On machine <span class=\"hljs-built_in\">which</span> the master service is deployed, <span class=\"hljs-built_in\">set</span> localhost</span>\nmasters=&quot;localhost&quot;\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> On machine <span class=\"hljs-built_in\">which</span> the worker service is deployed, <span class=\"hljs-built_in\">set</span> localhost</span>\nworkers=&quot;localhost&quot;\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> On machine <span class=\"hljs-built_in\">which</span> the alert service is deployed, <span class=\"hljs-built_in\">set</span> localhost</span>\nalertServer=&quot;localhost&quot;\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> On machine <span class=\"hljs-built_in\">which</span> the api service is deployed, <span class=\"hljs-built_in\">set</span> localhost</span>\napiServers=&quot;localhost&quot;\n<span class=\"hljs-meta\">\n\n#</span><span class=\"bash\"> EMail configuration, taking QQ mailbox as an example</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> EMail protocol</span>\nmailProtocol=&quot;SMTP&quot;\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> EMail server address</span>\nmailServerHost=&quot;smtp.exmail.qq.com&quot;\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> EMail server Port</span>\nmailServerPort=&quot;25&quot;\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> mailSender and mailUser can be the same one.</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> Sender</span>\nmailSender=&quot;xxx@qq.com&quot;\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> Receiver</span>\nmailUser=&quot;xxx@qq.com&quot;\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> EMail password</span>\nmailPassword=&quot;xxx&quot;\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> Set <span class=\"hljs-literal\">true</span> <span class=\"hljs-keyword\">if</span> the mailbox is TLS protocol, otherwise <span class=\"hljs-built_in\">set</span> to <span class=\"hljs-literal\">false</span>.</span>\nstarttlsEnable=&quot;true&quot;\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> Mail service address value, refer to mailServerHost above.</span>\nsslTrust=&quot;smtp.exmail.qq.com&quot;\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> Set <span class=\"hljs-literal\">true</span> <span class=\"hljs-keyword\">if</span> the mailbox is SSL protocol, otherwise <span class=\"hljs-built_in\">set</span> to <span class=\"hljs-literal\">false</span>. Note: starttlsEnable and sslEnable cannot be <span class=\"hljs-literal\">true</span> at the same time.</span>\nsslEnable=&quot;false&quot;\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> Download path of excel</span>\nxlsFilePath=&quot;/tmp/xls&quot;\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> Where are some sql and other resource files used <span class=\"hljs-keyword\">for</span> business uploaded. Can be <span class=\"hljs-built_in\">set</span>: HDFS, S3, NONE. If a standalone wants to use the <span class=\"hljs-built_in\">local</span> file system, please configure it as HDFS, because HDFS supports the <span class=\"hljs-built_in\">local</span> file system; <span class=\"hljs-keyword\">if</span> you <span class=\"hljs-keyword\">do</span> not need the resource upload <span class=\"hljs-keyword\">function</span>, select NONE. One important point: using a <span class=\"hljs-built_in\">local</span> file system does not require the deployment of Hadoop.</span>\nresUploadStartupType=&quot;HDFS&quot;\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> Take the <span class=\"hljs-built_in\">local</span> file system as an example.</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> Note: If you want to upload resource files to HDFS and the NameNode has HA enabled, you need to put core-site.xml and hdfs-site.xml <span class=\"hljs-keyword\">in</span> the installPath/conf directory. In this example, it is placed under /opt/soft/dolphinscheduler/conf, and Configure the namenode cluster name; <span class=\"hljs-keyword\">if</span> the NameNode is not HA, modify it to a specific IP or host name.</span>\ndefaultFS=&quot;file:///data/dolphinscheduler&quot;    # hdfs://{ip|hostname}:8020\n<span class=\"hljs-meta\">\n\n#</span><span class=\"bash\"> If the ResourceManager is HA, configure it as the active-standby IP or hostname of the ResourceManager node, such as <span class=\"hljs-string\">&quot;192.168.xx.xx, 192.168.xx.xx&quot;</span>; otherwise, <span class=\"hljs-keyword\">if</span> it is a single ResourceManager or yarn is not used at all, please configure yarnHaIps = <span class=\"hljs-string\">&quot;&quot;</span>. That<span class=\"hljs-string\">&#x27;s it, I don&#x27;</span>t use yarn here, the configuration is <span class=\"hljs-string\">&quot;&quot;</span>.</span>\nyarnHaIps=&quot;&quot;\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> If it is a single ResourceManager, configure it as the ResourceManager node ip or hostname, otherwise, keep the default value. Yarn is not used here, keep the default.</span>\nsingleYarnIp=&quot;ark1&quot;\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> Since HDFS supports the <span class=\"hljs-built_in\">local</span> file system, you need to ensure that the <span class=\"hljs-built_in\">local</span> folder exists and has <span class=\"hljs-built_in\">read</span> and write permissions.</span>\nhdfsPath=&quot;/data/dolphinscheduler&quot;\n</code></pre>\n<p><em>Note: If you plan to use the <code>Resource Center</code> function, execute the following command:</em></p>\n<pre><code class=\"language-shell\">sudo mkdir /data/dolphinscheduler\nsudo chown -R dolphinscheduler:dolphinscheduler /data/dolphinscheduler\n</code></pre>\n</li>\n</ul>\n<h3>1.7: Install python's Zookeeper tool kazoo</h3>\n<ul>\n<li>Install python's Zookeeper tool. <code>This step is only used for one-click deployment.</code></li>\n</ul>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> Install pip</span>\nsudo yum -y install python-pip;  # ubuntu: sudo apt-get install python-pip\nsudo pip install kazoo;\n</code></pre>\n<p><em>Note: If yum does not find python-pip, you can also install it by following commands</em></p>\n<pre><code class=\"language-shell\">sudo curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py\nsudo python get-pip.py  # python3: sudo python3 get-pip.py \n<span class=\"hljs-meta\">#</span><span class=\"bash\"> <span class=\"hljs-keyword\">then</span></span>\nsudo pip install kazoo;\n</code></pre>\n<ul>\n<li>\n<p>Switch to the deployment user and execute the one-click deployment script</p>\n<p><code>sh install.sh</code></p>\n</li>\n</ul>\n<pre><code>Note:\nFor the first deployment, the following message appears in step 3 of `3, stop server` during operation. This message can be ignored.\nsh: bin/dolphinscheduler-daemon.sh: No such file or directory\n</code></pre>\n<ul>\n<li>After the script is completed, the following 5 services will be started. Use the <code>jps</code> command to check whether the services are started (<code>jps</code> comes with <code>java JDK</code>)</li>\n</ul>\n<pre><code class=\"language-aidl\">    MasterServer         ----- master service\n    WorkerServer         ----- worker service\n    LoggerServer         ----- logger service\n    ApiApplicationServer ----- api service\n    AlertServer          ----- alert service\n</code></pre>\n<p>If the above services are started normally, the automatic deployment is successful.</p>\n<p>After the deployment is successful, you can view the logs. The logs are stored in the logs folder.</p>\n<pre><code class=\"language-log\"> logs/\n    ├── dolphinscheduler-alert-server.log\n    ├── dolphinscheduler-master-server.log\n    |—— dolphinscheduler-worker-server.log\n    |—— dolphinscheduler-api-server.log\n    |—— dolphinscheduler-logger-server.log\n</code></pre>\n<h1>2. Frontend Deployment</h1>\n<p>Please download the latest version of the frontend installation package to the server deployment directory, download address: [Download] (/en-us/download/download.html) (Take 1.2.0 version as an example ), Upload the tar.gz package to this directory after downloading and uncompress it.</p>\n<pre><code class=\"language-shell\">cd /opt/dolphinscheduler;\n\ntar -zxvf apache-dolphinscheduler-incubating-1.2.0-dolphinscheduler-front-bin.tar.gz -C /opt/dolphinscheduler;\n\nmv apache-dolphinscheduler-incubating-1.2.0-dolphinscheduler-front-bin dolphinscheduler-ui\n</code></pre>\n<p><strong>Choose any one of the following methods, automated deployment is recommended.</strong></p>\n<h3>2.1 Automated Deployment</h3>\n<ul>\n<li>\n<p>Enter the dolphinscheduler-ui directory and execute (<code>Note: Automated deployment will automatically download nginx</code>)</p>\n<pre><code class=\"language-shell\">cd dolphinscheduler-ui;\nsh ./install-dolphinscheduler-ui.sh;\n</code></pre>\n<ul>\n<li>After the execution, please type the frontend port during operation, the default port is 8888, if you choose the default, please press enter directly, or type another port.</li>\n<li>Then it will let you type the api-server ip that interacts with the frontend UI.</li>\n<li>Next is the port of the api-server that lets you type to interact with the frontend UI.</li>\n<li>Next is the operating system selection.</li>\n<li>Wait for deployment to complete.</li>\n</ul>\n</li>\n<li>\n<p>After deployment, in order to prevent too large resources from uploading to the resource center, it is recommended to modify the nginx upload size parameters, as follows:</p>\n<ul>\n<li>Add Nginx configuration client_max_body_size 1024m, you can add it in the http method body.</li>\n</ul>\n<pre><code class=\"language-shell\">vi /etc/nginx/nginx.conf\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> add param</span>\nclient_max_body_size 1024m;\n</code></pre>\n<ul>\n<li>Then restart Nginx service</li>\n</ul>\n<pre><code class=\"language-shell\">systemctl restart nginx\n</code></pre>\n</li>\n<li>\n<p>Visit the front page address: <a href=\"http://localhost:8888\">http://localhost:8888</a>. If the front login page appears, the front web installation is complete.</p>\n<p>default user password：admin/dolphinscheduler123</p>\n<p align=\"center\">\n   <img src=\"/img/login.png\" width=\"60%\" />\n </p>\n</li>\n</ul>\n<h3>2.2 Manual Deployment</h3>\n<ul>\n<li>\n<p>Install nginx by yourself, download it from the official website: Or <code>yum install nginx -y</code></p>\n</li>\n<li>\n<p>Modify the nginx configuration file (Note: some place need to be modified by yourself)</p>\n</li>\n</ul>\n<pre><code class=\"language-html\">vi /etc/nginx/nginx.conf\n\nserver {\n    listen       8888; # Your Port\n    server_name  localhost;\n    #charset koi8-r;\n    #access_log  /var/log/nginx/host.access.log  main;\n    location / {\n        root   /opt/soft/dolphinscheduler-ui/dist;      # Your dist directory which you uncompress\n        index  index.html index.html;\n    }\n    location /dolphinscheduler {\n        proxy_pass http://localhost:12345;    # Your ApiApplicationServer address\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header x_real_ipP $remote_addr;\n        proxy_set_header remote_addr $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_http_version 1.1;\n        proxy_connect_timeout 4s;\n        proxy_read_timeout 30s;\n        proxy_send_timeout 12s;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection &quot;upgrade&quot;;\n    }\n    #error_page  404              /404.html;\n    # redirect server error pages to the static page /50x.html\n    #\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   /usr/share/nginx/html;\n    }\n}\n</code></pre>\n<ul>\n<li>\n<p>Then restart Nginx service</p>\n<pre><code class=\"language-shell\">systemctl restart nginx\n</code></pre>\n</li>\n<li>\n<p>Visit the front page address: <a href=\"http://localhost:8888\">http://localhost:8888</a>. If the front login page appears, the front web installation is complete.</p>\n<p>default user password：admin/dolphinscheduler123</p>\n<p align=\"center\">\n   <img src=\"/img/login.png\" width=\"60%\" />\n </p>\n</li>\n</ul>\n<h1>3. Start and stop service</h1>\n<ul>\n<li>\n<p>Stop all services</p>\n<p><code>sh ./bin/stop-all.sh</code></p>\n</li>\n<li>\n<p>Start all services</p>\n<p><code>sh ./bin/start-all.sh</code></p>\n</li>\n<li>\n<p>Start and stop master service</p>\n</li>\n</ul>\n<pre><code class=\"language-shell\">sh ./bin/dolphinscheduler-daemon.sh start master-server\nsh ./bin/dolphinscheduler-daemon.sh stop master-server\n</code></pre>\n<ul>\n<li>Start and stop worker Service</li>\n</ul>\n<pre><code class=\"language-shell\">sh ./bin/dolphinscheduler-daemon.sh start worker-server\nsh ./bin/dolphinscheduler-daemon.sh stop worker-server\n</code></pre>\n<ul>\n<li>Start and stop api Service</li>\n</ul>\n<pre><code class=\"language-shell\">sh ./bin/dolphinscheduler-daemon.sh start api-server\nsh ./bin/dolphinscheduler-daemon.sh stop api-server\n</code></pre>\n<ul>\n<li>Start and stop logger Service</li>\n</ul>\n<pre><code class=\"language-shell\">sh ./bin/dolphinscheduler-daemon.sh start logger-server\nsh ./bin/dolphinscheduler-daemon.sh stop logger-server\n</code></pre>\n<ul>\n<li>Start and stop alert service</li>\n</ul>\n<pre><code class=\"language-shell\">sh ./bin/dolphinscheduler-daemon.sh start alert-server\nsh ./bin/dolphinscheduler-daemon.sh stop alert-server\n</code></pre>\n<p><code>Note: Please refer to the &quot;Architecture Design&quot; section for service usage</code></p>\n",
  "link": "/dist/en-us/docs/1.2.0/user_doc/standalone-deployment.html",
  "meta": {}
}