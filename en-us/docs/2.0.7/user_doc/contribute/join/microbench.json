{
  "filename": "microbench.md",
  "__html": "<h1>Micro BenchMark Notice</h1>\n<p>All optimization must be based on data verification, and blind optimization is rejected. Based on this, we provide the MicroBench module.</p>\n<p>The MicroBench module is based on the OpenJDK JMH component (HotSpot's recommended benchmark test program). When you start benchmarking, you don't need additional dependencies.</p>\n<p>JMH, the Java MicroBenchmark Harness, is a tool suite dedicated to code microbenchmark testing. What is Micro Benchmark? Simply put, it is based on method-level benchmark testing, with an accuracy of microseconds. When you locate a hot method and want to further optimize the performance of the method, you can use JMH to quantitatively analyze the optimized results.</p>\n<h3>Several points to note in Java benchmark testing:</h3>\n<ul>\n<li>\n<p>Prevent useless code from entering the test method.</p>\n</li>\n<li>\n<p>Concurrent testing.</p>\n</li>\n<li>\n<p>The test results are presented.</p>\n</li>\n</ul>\n<h3>Typical application scenarios of JMH are:</h3>\n<ul>\n<li>\n<p>1: Quantitatively analyze the optimization effect of a hotspot function</p>\n</li>\n<li>\n<p>2: Want to quantitatively know how long a function needs to be executed, and the correlation between execution time and input variables</p>\n</li>\n<li>\n<p>3: Compare multiple implementations of a function</p>\n</li>\n</ul>\n<p>DolphinScheduler-MicroBench provides AbstractBaseBenchmark, you can inherit from it, write your benchmark code, AbstractMicroBenchmark can guarantee to run in JUnit mode.</p>\n<h3>Customized operating parameters</h3>\n<p>The default AbstractMicrobenchmark configuration is</p>\n<p>Warmup times 10 (warmupIterations)</p>\n<p>Number of tests 10 (measureIterations)</p>\n<p>Fork quantity 2 (forkCount)</p>\n<p>You can specify these parameters at startup，-DmeasureIterations, -DperfReportDir (output benchmark test result file directory), -DwarmupIterations, -DforkCount</p>\n<h3>DolphinScheduler-MicroBench Introduction</h3>\n<p>It is generally not recommended to use fewer cycles when running tests. However, a smaller number of tests helps to verify the work during the benchmark test. After the verification is over, run a large number of benchmark tests.</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Warmup(iterations = 2, time = 1)</span>\n<span class=\"hljs-meta\">@Measurement(iterations = 4, time = 1)</span>\n<span class=\"hljs-meta\">@State(Scope.Benchmark)</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">EnumBenchMark</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AbstractBaseBenchmark</span> </span>{\n\n}\n</code></pre>\n<p>This can run benchmarks at the method level or the class level. Command line parameters will override the parameters on the annotation.</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Benchmark</span> <span class=\"hljs-comment\">// Method annotation, indicating that the method is an object that needs to be benchmarked.</span>\n<span class=\"hljs-meta\">@BenchmarkMode(Mode.AverageTime)</span> <span class=\"hljs-comment\">// Optional benchmark test mode is obtained through enumeration</span>\n<span class=\"hljs-meta\">@OutputTimeUnit(TimeUnit.MICROSECONDS)</span> <span class=\"hljs-comment\">// Output time unit</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">enumStaticMapTest</span><span class=\"hljs-params\">()</span> </span>{\n    TestTypeEnum.newGetNameByType(testNum);\n}\n</code></pre>\n<p>When your benchmark test is written, you can run it to view the specific test conditions: (The actual results depend on your system configuration)</p>\n<p>First, it will warm up our code,</p>\n<pre><code class=\"language-java\"># Warmup Iteration   1: 0.007 us/op\n# Warmup Iteration   2: 0.008 us/op\nIteration   1: 0.004 us/op\nIteration   2: 0.004 us/op\nIteration   3: 0.004 us/op\nIteration   4: 0.004 us/op\n</code></pre>\n<p>After warmup, we usually get the following results</p>\n<pre><code class=\"language-java\">Benchmark                        (testNum)   Mode  Cnt          Score           Error  Units\nEnumBenchMark.simpleTest               <span class=\"hljs-number\">101</span>  thrpt    <span class=\"hljs-number\">8</span>  <span class=\"hljs-number\">428750972.826</span> ±  <span class=\"hljs-number\">66511362.350</span>  ops/s\nEnumBenchMark.simpleTest               <span class=\"hljs-number\">108</span>  thrpt    <span class=\"hljs-number\">8</span>  <span class=\"hljs-number\">299615240.337</span> ± <span class=\"hljs-number\">290089561.671</span>  ops/s\nEnumBenchMark.simpleTest               <span class=\"hljs-number\">103</span>  thrpt    <span class=\"hljs-number\">8</span>  <span class=\"hljs-number\">288423221.721</span> ± <span class=\"hljs-number\">130542990.747</span>  ops/s\nEnumBenchMark.simpleTest               <span class=\"hljs-number\">104</span>  thrpt    <span class=\"hljs-number\">8</span>  <span class=\"hljs-number\">236811792.152</span> ± <span class=\"hljs-number\">155355935.479</span>  ops/s\nEnumBenchMark.simpleTest               <span class=\"hljs-number\">105</span>  thrpt    <span class=\"hljs-number\">8</span>  <span class=\"hljs-number\">472247775.246</span> ±  <span class=\"hljs-number\">45769877.951</span>  ops/s\nEnumBenchMark.simpleTest               <span class=\"hljs-number\">103</span>  thrpt    <span class=\"hljs-number\">8</span>  <span class=\"hljs-number\">455473025.252</span> ±  <span class=\"hljs-number\">61212956.944</span>  ops/s\nEnumBenchMark.enumStaticMapTest        <span class=\"hljs-number\">101</span>   avgt    <span class=\"hljs-number\">8</span>          <span class=\"hljs-number\">0.006</span> ±         <span class=\"hljs-number\">0.003</span>  us/op\nEnumBenchMark.enumStaticMapTest        <span class=\"hljs-number\">108</span>   avgt    <span class=\"hljs-number\">8</span>          <span class=\"hljs-number\">0.005</span> ±         <span class=\"hljs-number\">0.002</span>  us/op\nEnumBenchMark.enumStaticMapTest        <span class=\"hljs-number\">103</span>   avgt    <span class=\"hljs-number\">8</span>          <span class=\"hljs-number\">0.006</span> ±         <span class=\"hljs-number\">0.005</span>  us/op\nEnumBenchMark.enumStaticMapTest        <span class=\"hljs-number\">104</span>   avgt    <span class=\"hljs-number\">8</span>          <span class=\"hljs-number\">0.006</span> ±         <span class=\"hljs-number\">0.004</span>  us/op\nEnumBenchMark.enumStaticMapTest        <span class=\"hljs-number\">105</span>   avgt    <span class=\"hljs-number\">8</span>          <span class=\"hljs-number\">0.004</span> ±         <span class=\"hljs-number\">0.001</span>  us/op\nEnumBenchMark.enumStaticMapTest        <span class=\"hljs-number\">103</span>   avgt    <span class=\"hljs-number\">8</span>          <span class=\"hljs-number\">0.004</span> ±         <span class=\"hljs-number\">0.001</span>  us/op\nEnumBenchMark.enumValuesTest           <span class=\"hljs-number\">101</span>   avgt    <span class=\"hljs-number\">8</span>          <span class=\"hljs-number\">0.011</span> ±         <span class=\"hljs-number\">0.004</span>  us/op\nEnumBenchMark.enumValuesTest           <span class=\"hljs-number\">108</span>   avgt    <span class=\"hljs-number\">8</span>          <span class=\"hljs-number\">0.025</span> ±         <span class=\"hljs-number\">0.016</span>  us/op\nEnumBenchMark.enumValuesTest           <span class=\"hljs-number\">103</span>   avgt    <span class=\"hljs-number\">8</span>          <span class=\"hljs-number\">0.019</span> ±         <span class=\"hljs-number\">0.010</span>  us/op\nEnumBenchMark.enumValuesTest           <span class=\"hljs-number\">104</span>   avgt    <span class=\"hljs-number\">8</span>          <span class=\"hljs-number\">0.018</span> ±         <span class=\"hljs-number\">0.018</span>  us/op\nEnumBenchMark.enumValuesTest           <span class=\"hljs-number\">105</span>   avgt    <span class=\"hljs-number\">8</span>          <span class=\"hljs-number\">0.014</span> ±         <span class=\"hljs-number\">0.012</span>  us/op\nEnumBenchMark.enumValuesTest           <span class=\"hljs-number\">103</span>   avgt    <span class=\"hljs-number\">8</span>          <span class=\"hljs-number\">0.012</span> ±         <span class=\"hljs-number\">0.009</span>  us/op\n</code></pre>\n<p>OpenJDK officially gave a lot of sample codes, interested students can query and learn JMH by themselves:<a href=\"http://hg.openjdk.java.net/code-tools/jmh/file/tip/jmh-samples/src/main/java/org/openjdk/jmh/samples/\">OpenJDK-JMH-Example</a></p>\n",
  "link": "/dist/en-us/docs/2.0.7/user_doc/contribute/join/microbench.html",
  "meta": {}
}