{
  "filename": "standalone-deployment.md",
  "__html": "<h1>Standalone Deployment</h1>\n<h1>1、Install basic softwares (please install required softwares by yourself)</h1>\n<ul>\n<li>PostgreSQL (8.2.15+) or MySQL (5.7)  :  Choose One</li>\n<li><a href=\"https://www.oracle.com/technetwork/java/javase/downloads/index.html\">JDK</a> (1.8+) :  Required. Double-check configure JAVA_HOME and PATH environment variables in /etc/profile</li>\n<li>ZooKeeper (3.4.6+) ：Required</li>\n<li>Hadoop (2.6+) or MinIO ：Optional. If you need resource function, for Standalone Deployment you can choose a local directory as the upload destination (this does not need Hadoop deployed). Of course, you can also choose to upload to Hadoop or MinIO.</li>\n</ul>\n<pre><code class=\"language-markdown\"> Tips：DolphinScheduler itself does not rely on Hadoop, Hive, Spark, only use their clients to run corresponding task.\n</code></pre>\n<h1>2、Download the binary tar.gz package.</h1>\n<ul>\n<li>Please download the latest version installation package to the server deployment directory. For example, use /opt/dolphinscheduler as the installation and deployment directory. Download address: <a href=\"https://dolphinscheduler.apache.org/en-us/docs/release/download.html\">Download</a>, download package, move to deployment directory and unzip it.</li>\n</ul>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> Create the deployment directory. Please <span class=\"hljs-keyword\">do</span> not choose a high-privilege directory such as /root or /home.</span>\nmkdir -p /opt/dolphinscheduler;\ncd /opt/dolphinscheduler;\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> unzip</span>\ntar -zxvf apache-dolphinscheduler-incubating-1.3.2-dolphinscheduler-bin.tar.gz -C /opt/dolphinscheduler;\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> rename</span>\nmv apache-dolphinscheduler-incubating-1.3.2-dolphinscheduler-bin  dolphinscheduler-bin\n</code></pre>\n<h1>3、Create deployment user and assign directory operation permissions</h1>\n<ul>\n<li>Create a deployment user, and be sure to configure sudo secret-free. Here take the creation of a dolphinscheduler user as example.</li>\n</ul>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> To create a user, you need to <span class=\"hljs-built_in\">log</span> <span class=\"hljs-keyword\">in</span> as root and <span class=\"hljs-built_in\">set</span> the deployment user name.</span>\nuseradd dolphinscheduler;\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> Set the user password, please modify it yourself.</span>\necho \"dolphinscheduler123\" | passwd --stdin dolphinscheduler\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> Configure sudo secret-free</span>\necho 'dolphinscheduler  ALL=(ALL)  NOPASSWD: NOPASSWD: ALL' &gt;&gt; /etc/sudoers\nsed -i 's/Defaults    requirett/#Defaults    requirett/g' /etc/sudoers\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> Modify the directory permissions so that the deployment user has operation permissions on the dolphinscheduler-bin directory</span>\nchown -R dolphinscheduler:dolphinscheduler dolphinscheduler-bin\n</code></pre>\n<pre><code> Notes：\n - Because the task execution is based on 'sudo -u {linux-user}' to switch among different Linux users to implement multi-tenant job running, so the deployment user must have sudo permissions and is secret-free. If beginner learners don’t understand, you can ignore this point for now.\n - Please comment out line &quot;Default requiretty&quot;, if it present in &quot;/etc/sudoers&quot; file. \n - If you need to use resource upload, you need to assign user the permission to operate the local file system, HDFS or MinIO.\n</code></pre>\n<h1>4、SSH secret-free configuration</h1>\n<ul>\n<li>\n<p>Switch to the deployment user and configure SSH local secret-free login</p>\n<pre><code class=\"language-shell\">su dolphinscheduler;\n\nssh-keygen -t rsa -P '' -f ~/.ssh/id_rsa\ncat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys\nchmod 600 ~/.ssh/authorized_keys\n</code></pre>\n</li>\n</ul>\n<p>​  Note: <em>If configure successed, the dolphinscheduler user does not need to enter a password when executing the command <code>ssh localhost</code>.</em></p>\n<h1>5、Database initialization</h1>\n<ul>\n<li>Log in to the database, the default database type is PostgreSQL. If you choose MySQL, you need to add the mysql-connector-java driver package to the lib directory of DolphinScheduler.</li>\n</ul>\n<pre><code>mysql -uroot -p\n</code></pre>\n<ul>\n<li>After log into the database command line window, execute the database initialization command and set the user and password.</li>\n</ul>\n<p><strong>Note: {user} and {password} need to be replaced with a specific database username and password.</strong></p>\n<pre><code class=\"language-mysql\">   mysql&gt; CREATE DATABASE dolphinscheduler DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;\n   mysql&gt; GRANT ALL PRIVILEGES ON dolphinscheduler.* TO '{user}'@'%' IDENTIFIED BY '{password}';\n   mysql&gt; GRANT ALL PRIVILEGES ON dolphinscheduler.* TO '{user}'@'localhost' IDENTIFIED BY '{password}';\n   mysql&gt; flush privileges;\n</code></pre>\n<ul>\n<li>\n<p>Create tables and import basic data</p>\n<ul>\n<li>Modify the following configuration in datasource.properties under the conf directory.</li>\n</ul>\n<pre><code class=\"language-shell\">  vi conf/datasource.properties\n</code></pre>\n<ul>\n<li>If you choose Mysql, please comment out the relevant configuration of PostgreSQL (vice versa), you also need to manually add the [[mysql-connector-java driver jar] (<a href=\"https://downloads.mysql.com/archives/c-j/\">https://downloads.mysql.com/archives/c-j/</a>)] package to lib directory, and then configure the database connection information correctly.</li>\n</ul>\n<pre><code class=\"language-properties\"><span class=\"hljs-comment\">  #postgre</span>\n<span class=\"hljs-comment\">  #spring.datasource.driver-class-name=org.postgresql.Driver</span>\n<span class=\"hljs-comment\">  #spring.datasource.url=jdbc:postgresql://localhost:5432/dolphinscheduler</span>\n<span class=\"hljs-comment\">  # mysql</span>\n  <span class=\"hljs-meta\">spring.datasource.driver-class-name</span>=<span class=\"hljs-string\">com.mysql.jdbc.Driver</span>\n  <span class=\"hljs-meta\">spring.datasource.url</span>=<span class=\"hljs-string\">jdbc:mysql://xxx:3306/dolphinscheduler?useUnicode=true&amp;characterEncoding=UTF-8&amp;allowMultiQueries=true     # Replace the correct IP address</span>\n  <span class=\"hljs-meta\">spring.datasource.username</span>=<span class=\"hljs-string\">xxx\t\t\t\t\t\t# replace the correct {username} value</span>\n  <span class=\"hljs-meta\">spring.datasource.password</span>=<span class=\"hljs-string\">xxx\t\t\t\t\t\t# replace the correct {password} value</span>\n</code></pre>\n<ul>\n<li>After modifying and saving, execute <strong><a href=\"http://create-dolphinscheduler.sh\">create-dolphinscheduler.sh</a></strong> in the script directory.</li>\n</ul>\n<pre><code class=\"language-shell\">sh script/create-dolphinscheduler.sh\n</code></pre>\n</li>\n</ul>\n<p>​       <em>Note: If you execute the above script and report &quot;/bin/java: No such file or directory&quot; error, please configure JAVA_HOME and PATH variables in /etc/profile.</em></p>\n<h1>6、Modify runtime parameters.</h1>\n<ul>\n<li>\n<p>Modify the environment variable in <code>dolphinscheduler_env.sh</code> file under 'conf/env' directory (take the relevant software installed under '/opt/soft' as example)</p>\n<pre><code class=\"language-shell\">    export HADOOP_HOME=/opt/soft/hadoop\n    export HADOOP_CONF_DIR=/opt/soft/hadoop/etc/hadoop\n    #export SPARK_HOME1=/opt/soft/spark1\n    export SPARK_HOME2=/opt/soft/spark2\n    export PYTHON_HOME=/opt/soft/python\n    export JAVA_HOME=/opt/soft/java\n    export HIVE_HOME=/opt/soft/hive\n    export FLINK_HOME=/opt/soft/flink\n    export DATAX_HOME=/opt/soft/datax/bin/datax.py\n    export PATH=$HADOOP_HOME/bin:$SPARK_HOME2/bin:$PYTHON_HOME:$JAVA_HOME/bin:$HIVE_HOME/bin:$PATH:$FLINK_HOME/bin:$DATAX_HOME:$PATH\n\n    ```\n\n `Note: This step is very important. For example, JAVA_HOME and PATH must be configured. Those that are not used can be ignored or commented out. If you can not find dolphinscheduler_env.sh, please run ls -a.`\n\n</code></pre>\n</li>\n<li>\n<p>Create JDK soft link to /usr/bin/java (still JAVA_HOME=/opt/soft/java as an example)</p>\n<pre><code class=\"language-shell\">sudo ln -s /opt/soft/java/bin/java /usr/bin/java\n</code></pre>\n</li>\n<li>\n<p>Modify the parameters in the one-click deployment config file <code>conf/config/install_config.conf</code>, pay special attention to the configuration of the following parameters.</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> choose mysql or postgresql</span>\ndbtype=\"mysql\"\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> Database connection address and port</span>\ndbhost=\"localhost:3306\"\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> database name</span>\ndbname=\"dolphinscheduler\"\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> database username</span>\nusername=\"xxx\"\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> database password</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> NOTICE: <span class=\"hljs-keyword\">if</span> there are special characters, please use the \\ to escape, <span class=\"hljs-keyword\">for</span> example, `[` escape to `\\[`</span>\npassword=\"xxx\"\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> Zookeeper address, localhost:2181, remember port 2181</span>\nzkQuorum=\"localhost:2181\"\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> Note: the target installation path <span class=\"hljs-keyword\">for</span> dolphinscheduler, please <span class=\"hljs-keyword\">do</span> not use current path (<span class=\"hljs-built_in\">pwd</span>)</span>\ninstallPath=\"/opt/soft/dolphinscheduler\"\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> deployment user</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> Note: the deployment user needs to have sudo privileges and permissions to operate hdfs. If hdfs is enabled, the root directory needs to be created by itself</span>\ndeployUser=\"dolphinscheduler\"\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> alert config，take QQ email <span class=\"hljs-keyword\">for</span> example</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> mail protocol</span>\nmailProtocol=\"SMTP\"\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> mail server host</span>\nmailServerHost=\"smtp.qq.com\"\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> mail server port</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> note: Different protocols and encryption methods correspond to different ports, when SSL/TLS is enabled, port may be different, make sure the port is correct.</span>\nmailServerPort=\"25\"\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> mail sender</span>\nmailSender=\"xxx@qq.com\"\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> mail user</span>\nmailUser=\"xxx@qq.com\"\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> mail sender password</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> note: The mail.passwd is email service authorization code, not the email login password.</span>\nmailPassword=\"xxx\"\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> Whether TLS mail protocol is supported,<span class=\"hljs-literal\">true</span> is supported and <span class=\"hljs-literal\">false</span> is not supported</span>\nstarttlsEnable=\"true\"\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> Whether TLS mail protocol is supported,<span class=\"hljs-literal\">true</span> is supported and <span class=\"hljs-literal\">false</span> is not supported。</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> note: only one of TLS and SSL can be <span class=\"hljs-keyword\">in</span> the <span class=\"hljs-literal\">true</span> state.</span>\nsslEnable=\"false\"\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> note: sslTrust is the same as mailServerHost</span>\nsslTrust=\"smtp.qq.com\"\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> resource storage <span class=\"hljs-built_in\">type</span>：HDFS,S3,NONE</span>\nresourceStorageType=\"HDFS\"\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> here is an example of saving to a <span class=\"hljs-built_in\">local</span> file system</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> Note: If you want to upload resource file(jar file and so on)to HDFS and the NameNode has HA enabled, you need to put core-site.xml and hdfs-site.xml of hadoop cluster <span class=\"hljs-keyword\">in</span> the installPath/conf directory. In this example, it is placed under /opt/soft/dolphinscheduler/conf, and Configure the namenode cluster name; <span class=\"hljs-keyword\">if</span> the NameNode is not HA, modify it to a specific IP or host name.</span>\ndefaultFS=\"file:///data/dolphinscheduler\"\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> <span class=\"hljs-keyword\">if</span> not use hadoop resourcemanager, please keep default value; <span class=\"hljs-keyword\">if</span> resourcemanager HA <span class=\"hljs-built_in\">enable</span>, please <span class=\"hljs-built_in\">type</span> the HA ips ; <span class=\"hljs-keyword\">if</span> resourcemanager is single, make this value empty</span>\nyarnHaIps=\"192.168.xx.xx,192.168.xx.xx\"\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> <span class=\"hljs-keyword\">if</span> resourcemanager HA <span class=\"hljs-built_in\">enable</span> or not use resourcemanager, please skip this value setting; If resourcemanager is single, you only need to replace yarnIp1 to actual resourcemanager hostname.</span>\nsingleYarnIp=\"yarnIp1\"\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> resource store on HDFS/S3 path, resource file will store to this hadoop hdfs path, self configuration, please make sure the directory exists on hdfs and have <span class=\"hljs-built_in\">read</span> write permissions。/dolphinscheduler is recommended</span>\nresourceUploadPath=\"/data/dolphinscheduler\"\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> specify the user who have permissions to create directory under HDFS/S3 root path</span>\nhdfsRootUser=\"hdfs\"\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> On <span class=\"hljs-built_in\">which</span> machines to deploy the DS service, choose localhost <span class=\"hljs-keyword\">for</span> this machine</span>\nips=\"localhost\"\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> ssh port, default 22</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> Note: <span class=\"hljs-keyword\">if</span> ssh port is not default, modify here</span>\nsshPort=\"22\"\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> run master machine</span>\nmasters=\"localhost\"\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> run worker machine</span>\nworkers=\"localhost\"\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> run alert machine</span>\nalertServer=\"localhost\"\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> run api machine</span>\napiServers=\"localhost\"\n\n</code></pre>\n<p><em>Attention:</em> if you need upload resource function, please execute below command:</p>\n<pre><code>\nsudo mkdir /data/dolphinscheduler\nsudo chown -R dolphinscheduler:dolphinscheduler /data/dolphinscheduler \n\n</code></pre>\n</li>\n</ul>\n<h1>7、Automated Deployment</h1>\n<ul>\n<li>\n<p>Switch to the deployment user and execute the one-click deployment script</p>\n<p><code>sh install.sh</code></p>\n<pre><code>Note:\nFor the first deployment, the following message appears in step 3 of `3, stop server` during operation. This message can be ignored.\nsh: bin/dolphinscheduler-daemon.sh: No such file or directory\n</code></pre>\n</li>\n<li>\n<p>After script completed, the following 5 services will be started. Use <code>jps</code> command to check whether the services started (<code>jps</code> comes with <code>java JDK</code>)</p>\n</li>\n</ul>\n<pre><code class=\"language-aidl\">    MasterServer         ----- master service\n    WorkerServer         ----- worker service\n    LoggerServer         ----- logger service\n    ApiApplicationServer ----- api service\n    AlertServer          ----- alert service\n</code></pre>\n<p>If the above services started normally, the automatic deployment is successful.</p>\n<p>After the deployment is success, you can view logs. Logs stored in the logs folder.</p>\n<pre><code class=\"language-log\"> logs/\n    ├── dolphinscheduler-alert-server.log\n    ├── dolphinscheduler-master-server.log\n    |—— dolphinscheduler-worker-server.log\n    |—— dolphinscheduler-api-server.log\n    |—— dolphinscheduler-logger-server.log\n</code></pre>\n<h1>8、login</h1>\n<ul>\n<li>\n<p>Access the front page address, interface IP (self-modified)\n<a href=\"http://192.168.xx.xx:12345/dolphinscheduler\">http://192.168.xx.xx:12345/dolphinscheduler</a></p>\n <p align=\"center\">\n   <img src=\"/img/login.png\" width=\"60%\" />\n </p>\n</li>\n</ul>\n<h1>9、Start and stop service</h1>\n<ul>\n<li>\n<p>Stop all services</p>\n<p><code>sh ./bin/stop-all.sh</code></p>\n</li>\n<li>\n<p>Start all services</p>\n<p><code>sh ./bin/start-all.sh</code></p>\n</li>\n<li>\n<p>Start and stop master service</p>\n</li>\n</ul>\n<pre><code class=\"language-shell\">sh ./bin/dolphinscheduler-daemon.sh start master-server\nsh ./bin/dolphinscheduler-daemon.sh stop master-server\n</code></pre>\n<ul>\n<li>Start and stop worker Service</li>\n</ul>\n<pre><code class=\"language-shell\">sh ./bin/dolphinscheduler-daemon.sh start worker-server\nsh ./bin/dolphinscheduler-daemon.sh stop worker-server\n</code></pre>\n<ul>\n<li>Start and stop api Service</li>\n</ul>\n<pre><code class=\"language-shell\">sh ./bin/dolphinscheduler-daemon.sh start api-server\nsh ./bin/dolphinscheduler-daemon.sh stop api-server\n</code></pre>\n<ul>\n<li>Start and stop logger Service</li>\n</ul>\n<pre><code class=\"language-shell\">sh ./bin/dolphinscheduler-daemon.sh start logger-server\nsh ./bin/dolphinscheduler-daemon.sh stop logger-server\n</code></pre>\n<ul>\n<li>Start and stop alert service</li>\n</ul>\n<pre><code class=\"language-shell\">sh ./bin/dolphinscheduler-daemon.sh start alert-server\nsh ./bin/dolphinscheduler-daemon.sh stop alert-server\n</code></pre>\n<p><code>Note: Please refer to the &quot;Architecture Design&quot; section for service usage</code></p>\n",
  "link": "/en-us/docs/1.3.4/user_doc/standalone-deployment.html",
  "meta": {}
}