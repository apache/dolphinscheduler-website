{
  "filename": "docker-deployment.md",
  "__html": "<h1>QuickStart in Docker</h1>\n<h2>Prerequisites</h2>\n<ul>\n<li><a href=\"https://docs.docker.com/engine/install/\">Docker</a> 1.13.1+</li>\n<li><a href=\"https://docs.docker.com/compose/\">Docker Compose</a> 1.11.0+</li>\n</ul>\n<h2>How to use this Docker image</h2>\n<p>Here're 3 ways to quickly install DolphinScheduler</p>\n<h3>The First Way: Start a DolphinScheduler by docker-compose (recommended)</h3>\n<p>In this way, you need to install <a href=\"https://docs.docker.com/compose/\">docker-compose</a> as a prerequisite, please install it yourself according to the rich docker-compose installation guidance on the Internet</p>\n<h4>1. Download the Source Code Package</h4>\n<p>Please download the source code package apache-dolphinscheduler-incubating-1.3.5-src.zip, download address: <a href=\"/en-us/download/download.html\">download</a></p>\n<h4>2. Pull Image and Start the Service</h4>\n<pre><code>$ unzip apache-dolphinscheduler-incubating-1.3.5-src.zip\n$ cd apache-dolphinscheduler-incubating-1.3.5-src-release/docker/docker-swarm\n$ docker pull dolphinscheduler.docker.scarf.sh/apache/dolphinscheduler:1.3.5\n$ docker tag apache/dolphinscheduler:1.3.5 apache/dolphinscheduler:latest\n$ docker-compose up -d\n</code></pre>\n<p>The <strong>PostgreSQL</strong> (with username <code>root</code>, password <code>root</code> and database <code>dolphinscheduler</code>) and <strong>ZooKeeper</strong> services will start by default</p>\n<h4>3. Login</h4>\n<p>Visit the Web UI: <a href=\"http://localhost:12345/dolphinscheduler\">http://localhost:12345/dolphinscheduler</a> (The local address is <a href=\"http://localhost:12345/dolphinscheduler\">http://localhost:12345/dolphinscheduler</a>)</p>\n<p>The default username is <code>admin</code> and the default password is <code>dolphinscheduler123</code></p>\n<p align=\"center\">\n  <img src=\"/img/login_en.png\" width=\"60%\" />\n</p>\n<p>Please refer to the <code>Quick Start</code> in the chapter <a href=\"./quick-start.md\">Quick Start</a> to explore how to use DolphinScheduler</p>\n<h3>The Second Way: Start via specifying the existing PostgreSQL and ZooKeeper service</h3>\n<p>In this way, you need to install <a href=\"https://docs.docker.com/engine/install/\">docker</a> as a prerequisite, please install it yourself according to the rich docker installation guidance on the Internet</p>\n<h4>1. Basic Required Software (please install by yourself)</h4>\n<ul>\n<li><a href=\"https://www.postgresql.org/download/\">PostgreSQL</a> (8.2.15+)</li>\n<li><a href=\"https://zookeeper.apache.org/releases.html\">ZooKeeper</a> (3.4.6+)</li>\n<li><a href=\"https://docs.docker.com/engine/install/\">Docker</a> (1.13.1+)</li>\n</ul>\n<h4>2. Please login to the PostgreSQL database and create a database named <code>dolphinscheduler</code></h4>\n<h4>3. Initialize the database, import <code>sql/dolphinscheduler-postgre.sql</code> to create tables and initial data</h4>\n<h4>4. Download the DolphinScheduler Image</h4>\n<p>We have already uploaded user-oriented DolphinScheduler image to the Docker repository so that you can pull the image from the docker repository:</p>\n<pre><code>docker pull dolphinscheduler.docker.scarf.sh/apache/dolphinscheduler:1.3.5\n</code></pre>\n<h4>5. Run a DolphinScheduler Instance</h4>\n<pre><code>$ docker run -d --name dolphinscheduler \\\n-e DATABASE_HOST=&quot;192.168.x.x&quot; -e DATABASE_PORT=&quot;5432&quot; -e DATABASE_DATABASE=&quot;dolphinscheduler&quot; \\\n-e DATABASE_USERNAME=&quot;test&quot; -e DATABASE_PASSWORD=&quot;test&quot; \\\n-e ZOOKEEPER_QUORUM=&quot;192.168.x.x:2181&quot; \\\n-p 12345:12345 \\\napache/dolphinscheduler:1.3.5 all\n</code></pre>\n<p>Note: database username test and password test need to be replaced with your actual PostgreSQL username and password, 192.168.x.x need to be replaced with your relate PostgreSQL and ZooKeeper host IP</p>\n<h4>6. Login</h4>\n<p>Same as above</p>\n<h3>The Third Way: Start a standalone DolphinScheduler server</h3>\n<p>The following services are automatically started when the container starts:</p>\n<pre><code>     MasterServer         ----- master service\n     WorkerServer         ----- worker service\n     LoggerServer         ----- logger service\n     ApiApplicationServer ----- api service\n     AlertServer          ----- alert service\n</code></pre>\n<p>If you just want to run part of the services in the DolphinScheduler</p>\n<p>You can start some services in DolphinScheduler by running the following commands.</p>\n<ul>\n<li>Start a <strong>master server</strong>, For example:</li>\n</ul>\n<pre><code>$ docker run -d --name dolphinscheduler-master \\\n-e DATABASE_HOST=&quot;192.168.x.x&quot; -e DATABASE_PORT=&quot;5432&quot; -e DATABASE_DATABASE=&quot;dolphinscheduler&quot; \\\n-e DATABASE_USERNAME=&quot;test&quot; -e DATABASE_PASSWORD=&quot;test&quot; \\\n-e ZOOKEEPER_QUORUM=&quot;192.168.x.x:2181&quot; \\\napache/dolphinscheduler:1.3.5 master-server\n</code></pre>\n<ul>\n<li>Start a <strong>worker server</strong> (including <strong>logger server</strong>), For example:</li>\n</ul>\n<pre><code>$ docker run -d --name dolphinscheduler-worker \\\n-e DATABASE_HOST=&quot;192.168.x.x&quot; -e DATABASE_PORT=&quot;5432&quot; -e DATABASE_DATABASE=&quot;dolphinscheduler&quot; \\\n-e DATABASE_USERNAME=&quot;test&quot; -e DATABASE_PASSWORD=&quot;test&quot; \\\n-e ZOOKEEPER_QUORUM=&quot;192.168.x.x:2181&quot; \\\napache/dolphinscheduler:1.3.5 worker-server\n</code></pre>\n<ul>\n<li>Start a <strong>api server</strong>, For example:</li>\n</ul>\n<pre><code>$ docker run -d --name dolphinscheduler-api \\\n-e DATABASE_HOST=&quot;192.168.x.x&quot; -e DATABASE_PORT=&quot;5432&quot; -e DATABASE_DATABASE=&quot;dolphinscheduler&quot; \\\n-e DATABASE_USERNAME=&quot;test&quot; -e DATABASE_PASSWORD=&quot;test&quot; \\\n-e ZOOKEEPER_QUORUM=&quot;192.168.x.x:2181&quot; \\\n-p 12345:12345 \\\napache/dolphinscheduler:1.3.5 api-server\n</code></pre>\n<ul>\n<li>Start a <strong>alert server</strong>, For example:</li>\n</ul>\n<pre><code>$ docker run -d --name dolphinscheduler-alert \\\n-e DATABASE_HOST=&quot;192.168.x.x&quot; -e DATABASE_PORT=&quot;5432&quot; -e DATABASE_DATABASE=&quot;dolphinscheduler&quot; \\\n-e DATABASE_USERNAME=&quot;test&quot; -e DATABASE_PASSWORD=&quot;test&quot; \\\napache/dolphinscheduler:1.3.5 alert-server\n</code></pre>\n<p><strong>Note</strong>: You must be specify <code>DATABASE_HOST</code>, <code>DATABASE_PORT</code>, <code>DATABASE_DATABASE</code>, <code>DATABASE_USERNAME</code>, <code>DATABASE_PASSWORD</code>, <code>ZOOKEEPER_QUORUM</code> when start a standalone dolphinscheduler server.</p>\n<h2>Environment Variables</h2>\n<p>The Docker container is configured through environment variables, and the <a href=\"https://github.com/apache/dolphinscheduler/blob/1.3.5/docker/build/README.md#environment-variables\">DolphinScheduler Docker Environment Variables</a> lists the configurable environment variables of the DolphinScheduler and their default values</p>\n<p>Especially, it can be configured through the environment variable configuration file <code>docker-compose.yml</code> and <code>docker-stack.yml</code> in Docker Compose and Docker Swarm separately</p>\n<h2>FAQ</h2>\n<h3>How to manage DolphinScheduler by docker-compose?</h3>\n<p>Start, restart, stop or list containers:</p>\n<pre><code>docker-compose start\ndocker-compose restart\ndocker-compose stop\ndocker-compose ps\n</code></pre>\n<p>Stop containers and remove containers, networks:</p>\n<pre><code>docker-compose down\n</code></pre>\n<p>Stop containers and remove containers, networks and volumes:</p>\n<pre><code>docker-compose down -v\n</code></pre>\n<h3>How to view the logs of a container?</h3>\n<p>List all running containers:</p>\n<pre><code>docker ps\ndocker ps --format &quot;{{.Names}}&quot; # only print names\n</code></pre>\n<p>View the logs of a container named dolphinscheduler-api:</p>\n<pre><code>docker logs dolphinscheduler-api\ndocker logs -f dolphinscheduler-api # follow log output\ndocker logs --tail 10 dolphinscheduler-api # show last 10 lines from the end of the logs\n</code></pre>\n<h3>How to scale master and worker by docker-compose?</h3>\n<p><strong>Important</strong>: Please delete the <code>container_name</code> and <code>ports</code> field of <code>dolphinscheduler-master</code> and <code>dolphinscheduler-worker</code> in <code>docker-compose.yml</code></p>\n<p>Scale master to 2 instances:</p>\n<pre><code>docker-compose up -d --scale dolphinscheduler-master=2 dolphinscheduler-master\n</code></pre>\n<p>Scale worker to 3 instances:</p>\n<pre><code>docker-compose up -d --scale dolphinscheduler-worker=3 dolphinscheduler-worker\n</code></pre>\n<h3>How to deploy DolphinScheduler on Docker Swarm?</h3>\n<p>Assuming that the Docker Swarm cluster has been created (If there is no Docker Swarm cluster, please refer to <a href=\"https://docs.docker.com/engine/swarm/swarm-tutorial/create-swarm/\">create-swarm</a>)</p>\n<p>Start a stack named dolphinscheduler:</p>\n<pre><code>docker stack deploy -c docker-stack.yml dolphinscheduler\n</code></pre>\n<p>List the services in the stack named dolphinscheduler:</p>\n<pre><code>docker stack services dolphinscheduler\n</code></pre>\n<p>Stop and remove the stack named dolphinscheduler:</p>\n<pre><code>docker stack rm dolphinscheduler\n</code></pre>\n<p>Remove the volumes of the stack named dolphinscheduler:</p>\n<pre><code>docker volume rm -f $(docker volume ls --format &quot;{{.Name}}&quot; | grep -e &quot;^dolphinscheduler&quot;)\n</code></pre>\n<h3>How to scale master and worker on Docker Swarm?</h3>\n<p><strong>Important</strong>: Please delete the <code>ports</code> field of <code>dolphinscheduler-master</code> and <code>dolphinscheduler-worker</code> in <code>docker-stack.yml</code></p>\n<p>Scale master of the stack named dolphinscheduler to 2 instances:</p>\n<pre><code>docker service scale dolphinscheduler_dolphinscheduler-master=2\n</code></pre>\n<p>Scale worker of the stack named dolphinscheduler to 3 instances:</p>\n<pre><code>docker service scale dolphinscheduler_dolphinscheduler-worker=3\n</code></pre>\n<h3>How to build a Docker image?</h3>\n<h4>1. Build from the source code (Require Maven 3.3+ &amp; JDK 1.8+)</h4>\n<p>In Unix-Like, execute in Terminal:</p>\n<pre><code class=\"language-bash\">$ bash ./docker/build/hooks/build\n</code></pre>\n<p>In Windows, execute in cmd or PowerShell:</p>\n<pre><code class=\"language-bat\"><span class=\"hljs-function\">C:\\<span class=\"hljs-title\">dolphinscheduler</span>-<span class=\"hljs-title\">src</span>&gt;.\\<span class=\"hljs-title\">docker</span>\\<span class=\"hljs-title\">build</span>\\<span class=\"hljs-title\">hooks</span>\\<span class=\"hljs-title\">build.bat</span>\n</span></code></pre>\n<p>Please read <code>./docker/build/hooks/build</code> <code>./docker/build/hooks/build.bat</code> script files if you don't understand</p>\n<h4>2. Build from the binary distribution (Not require Maven 3.3+ &amp; JDK 1.8+)</h4>\n<p>Please download the binary distribution package apache-dolphinscheduler-incubating-1.3.5-dolphinscheduler-bin.tar.gz, download address: <a href=\"/en-us/download/download.html\">download</a>. And put apache-dolphinscheduler-incubating-1.3.5-dolphinscheduler-bin.tar.gz into the <code>apache-dolphinscheduler-incubating-1.3.5-src-release/docker/build</code> directory, execute in Terminal or PowerShell:</p>\n<pre><code>$ cd apache-dolphinscheduler-incubating-1.3.5-src-release/docker/build\n$ docker build --build-arg VERSION=1.3.5 -t apache/dolphinscheduler:1.3.5 .\n</code></pre>\n<blockquote>\n<p>PowerShell should use <code>cd apache-dolphinscheduler-incubating-1.3.5-src-release/docker/build</code></p>\n</blockquote>\n<h3>How to add an environment variable for Docker?</h3>\n<p>If you would like to do additional initialization in an image derived from this one, add one or more environment variables under <code>/root/start-init-conf.sh</code>, and modify template files in <code>/opt/dolphinscheduler/conf/*.tpl</code>.</p>\n<p>For example, to add an environment variable <code>SECURITY_AUTHENTICATION_TYPE</code> in <code>/root/start-init-conf.sh</code>:</p>\n<pre><code>export SECURITY_AUTHENTICATION_TYPE=PASSWORD\n</code></pre>\n<p>and to modify <code>application-api.properties.tpl</code> template file, add the <code>SECURITY_AUTHENTICATION_TYPE</code>:</p>\n<pre><code>security.authentication.type=${SECURITY_AUTHENTICATION_TYPE}\n</code></pre>\n<p><code>/root/start-init-conf.sh</code> will dynamically generate config file:</p>\n<pre><code class=\"language-sh\"><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;generate dolphinscheduler config&quot;</span>\nls <span class=\"hljs-variable\">${DOLPHINSCHEDULER_HOME}</span>/conf/ | grep <span class=\"hljs-string\">&quot;.tpl&quot;</span> | <span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">read</span> line; <span class=\"hljs-keyword\">do</span>\n<span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">&quot;cat &lt;&lt; EOF\n<span class=\"hljs-subst\">$(cat ${DOLPHINSCHEDULER_HOME}/conf/${line})</span>\nEOF\n&quot;</span> &gt; <span class=\"hljs-variable\">${DOLPHINSCHEDULER_HOME}</span>/conf/<span class=\"hljs-variable\">${line%.*}</span>\n<span class=\"hljs-keyword\">done</span>\n</code></pre>\n<h3>How to use MySQL as the DolphinScheduler's database instead of PostgreSQL?</h3>\n<blockquote>\n<p>Because of the commercial license, we cannot directly use the driver and client of MySQL.</p>\n<p>If you want to use MySQL, you can build a new image based on the <code>apache/dolphinscheduler</code> image as follows.</p>\n</blockquote>\n<ol>\n<li>\n<p>Download the MySQL driver <a href=\"https://repo1.maven.org/maven2/mysql/mysql-connector-java/5.1.49/mysql-connector-java-5.1.49.jar\">mysql-connector-java-5.1.49.jar</a> (require <code>&gt;=5.1.47</code>)</p>\n</li>\n<li>\n<p>Create a new <code>Dockerfile</code> to add MySQL driver and client:</p>\n</li>\n</ol>\n<pre><code>FROM dolphinscheduler.docker.scarf.sh/apache/dolphinscheduler:1.3.5\nCOPY mysql-connector-java-5.1.49.jar /opt/dolphinscheduler/lib\nRUN apk add --update --no-cache mysql-client\n</code></pre>\n<ol start=\"3\">\n<li>Build a new docker image including MySQL driver and client:</li>\n</ol>\n<pre><code>docker build -t apache/dolphinscheduler:mysql .\n</code></pre>\n<ol start=\"4\">\n<li>Modify all <code>image</code> fields to <code>apache/dolphinscheduler:mysql</code> in <code>docker-compose.yml</code></li>\n</ol>\n<blockquote>\n<p>If you want to deploy dolphinscheduler on Docker Swarm, you need modify <code>docker-stack.yml</code></p>\n</blockquote>\n<ol start=\"5\">\n<li>\n<p>Comment the <code>dolphinscheduler-postgresql</code> block in <code>docker-compose.yml</code></p>\n</li>\n<li>\n<p>Add <code>dolphinscheduler-mysql</code> service in <code>docker-compose.yml</code> (<strong>Optional</strong>, you can directly use a external MySQL database)</p>\n</li>\n<li>\n<p>Modify all DATABASE environment variables in <code>docker-compose.yml</code></p>\n</li>\n</ol>\n<pre><code>DATABASE_TYPE: mysql\nDATABASE_DRIVER: com.mysql.jdbc.Driver\nDATABASE_HOST: dolphinscheduler-mysql\nDATABASE_PORT: 3306\nDATABASE_USERNAME: root\nDATABASE_PASSWORD: root\nDATABASE_DATABASE: dolphinscheduler\nDATABASE_PARAMS: useUnicode=true&amp;characterEncoding=UTF-8\n</code></pre>\n<blockquote>\n<p>If you have added <code>dolphinscheduler-mysql</code> service in <code>docker-compose.yml</code>, just set <code>DATABASE_HOST</code> to <code>dolphinscheduler-mysql</code></p>\n</blockquote>\n<ol start=\"8\">\n<li>Run a dolphinscheduler (See <strong>How to use this docker image</strong>)</li>\n</ol>\n<h3>How to support MySQL datasource in <code>Datasource manage</code>?</h3>\n<blockquote>\n<p>Because of the commercial license, we cannot directly use the driver of MySQL.</p>\n<p>If you want to add MySQL datasource, you can build a new image based on the <code>apache/dolphinscheduler</code> image as follows.</p>\n</blockquote>\n<ol>\n<li>\n<p>Download the MySQL driver <a href=\"https://repo1.maven.org/maven2/mysql/mysql-connector-java/5.1.49/mysql-connector-java-5.1.49.jar\">mysql-connector-java-5.1.49.jar</a> (require <code>&gt;=5.1.47</code>)</p>\n</li>\n<li>\n<p>Create a new <code>Dockerfile</code> to add MySQL driver:</p>\n</li>\n</ol>\n<pre><code>FROM dolphinscheduler.docker.scarf.sh/apache/dolphinscheduler:1.3.5\nCOPY mysql-connector-java-5.1.49.jar /opt/dolphinscheduler/lib\n</code></pre>\n<ol start=\"3\">\n<li>Build a new docker image including MySQL driver:</li>\n</ol>\n<pre><code>docker build -t apache/dolphinscheduler:mysql-driver .\n</code></pre>\n<ol start=\"4\">\n<li>Modify all <code>image</code> fields to <code>apache/dolphinscheduler:mysql-driver</code> in <code>docker-compose.yml</code></li>\n</ol>\n<blockquote>\n<p>If you want to deploy dolphinscheduler on Docker Swarm, you need modify <code>docker-stack.yml</code></p>\n</blockquote>\n<ol start=\"5\">\n<li>\n<p>Run a dolphinscheduler (See <strong>How to use this docker image</strong>)</p>\n</li>\n<li>\n<p>Add a MySQL datasource in <code>Datasource manage</code></p>\n</li>\n</ol>\n<h3>How to support Oracle datasource in <code>Datasource manage</code>?</h3>\n<blockquote>\n<p>Because of the commercial license, we cannot directly use the driver of Oracle.</p>\n<p>If you want to add Oracle datasource, you can build a new image based on the <code>apache/dolphinscheduler</code> image as follows.</p>\n</blockquote>\n<ol>\n<li>\n<p>Download the Oracle driver <a href=\"https://repo1.maven.org/maven2/com/oracle/database/jdbc/ojdbc8/\">ojdbc8.jar</a> (such as <code>ojdbc8-19.9.0.0.jar</code>)</p>\n</li>\n<li>\n<p>Create a new <code>Dockerfile</code> to add Oracle driver:</p>\n</li>\n</ol>\n<pre><code>FROM dolphinscheduler.docker.scarf.sh/apache/dolphinscheduler:1.3.5\nCOPY ojdbc8-19.9.0.0.jar /opt/dolphinscheduler/lib\n</code></pre>\n<ol start=\"3\">\n<li>Build a new docker image including Oracle driver:</li>\n</ol>\n<pre><code>docker build -t apache/dolphinscheduler:oracle-driver .\n</code></pre>\n<ol start=\"4\">\n<li>Modify all <code>image</code> fields to <code>apache/dolphinscheduler:oracle-driver</code> in <code>docker-compose.yml</code></li>\n</ol>\n<blockquote>\n<p>If you want to deploy dolphinscheduler on Docker Swarm, you need modify <code>docker-stack.yml</code></p>\n</blockquote>\n<ol start=\"5\">\n<li>\n<p>Run a dolphinscheduler (See <strong>How to use this docker image</strong>)</p>\n</li>\n<li>\n<p>Add a Oracle datasource in <code>Datasource manage</code></p>\n</li>\n</ol>\n",
  "link": "/dist/en-us/docs/1.3.5/user_doc/docker-deployment.html",
  "meta": {}
}