{
  "filename": "frontend-development.md",
  "__html": "<h1>Front-end development documentation</h1>\n<h3>Technical selection</h3>\n<pre><code>Vue mvvm framework\n\nEs6 ECMAScript 6.0\n\nAns-ui Analysys-ui\n\nD3  Visual Library Chart Library\n\nJsplumb connection plugin library\n\nLodash high performance JavaScript utility library\n</code></pre>\n<h3>Development environment</h3>\n<ul>\n<li>\n<h4>Node installation</h4>\n</li>\n</ul>\n<p>Node package download (note version 8.9.4) <code>https://nodejs.org/download/release/v8.9.4/</code></p>\n<ul>\n<li>\n<h4>Front-end project construction</h4>\n</li>\n</ul>\n<p>Use the command line mode <code>cd</code>  enter the <code>dolphinscheduler-ui</code> project directory and execute <code>npm install</code> to pull the project dependency package.</p>\n<blockquote>\n<p>If <code>npm install</code> is very slow</p>\n</blockquote>\n<blockquote>\n<p>You can enter the Taobao image command line to enter <code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p>\n</blockquote>\n<blockquote>\n<p>Run <code>cnpm install</code></p>\n</blockquote>\n<ul>\n<li>Create a new <code>.env</code>  file or the interface that interacts with the backend</li>\n</ul>\n<p>Create a new<code>.env</code> file in the <code>dolphinscheduler-ui</code>directory, add the ip address and port of the backend service to the file, and use it to interact with the backend. The contents of the<code>.env</code> file are as follows:</p>\n<pre><code># Proxy interface address (modified by yourself)\nAPI_BASE = http://192.168.xx.xx:12345\n\n# If you need to access the project with ip, you can remove the &quot;#&quot; (example)\n#DEV_HOST = 192.168.xx.xx\n</code></pre>\n<blockquote>\n<h5>! ! ! Special attention here. If the project reports a &quot;node-sass error&quot; error while pulling the dependency package, execute the following command again after execution.</h5>\n</blockquote>\n<pre><code>npm install node-sass --unsafe-perm //单独安装node-sass依赖\n</code></pre>\n<ul>\n<li>\n<h4>Development environment operation</h4>\n</li>\n<li><code>npm start</code> project development environment (after startup address <a href=\"http://localhost:8888/#/\">http://localhost:8888/#/</a>)</li>\n</ul>\n<h4>Front-end project release</h4>\n<ul>\n<li><code>npm run build</code> project packaging (after packaging, the root directory will create a folder called dist for publishing Nginx online)</li>\n</ul>\n<p>Run the <code>npm run build</code> command to generate a package file (dist) package</p>\n<p>Copy it to the corresponding directory of the server (front-end service static page storage directory)</p>\n<p>Visit address<code>http://localhost:8888/#/</code></p>\n<h4>Start with node and daemon under Linux</h4>\n<p>Install pm2 <code>npm install -g pm2</code></p>\n<p>Execute <code>pm2 start npm -- run dev</code> to start the project in the project <code>dolphinscheduler-ui</code>root directory</p>\n<h4>command</h4>\n<ul>\n<li>\n<p>Start <code>pm2 start npm -- run dev</code></p>\n</li>\n<li>\n<p>Stop <code>pm2 stop npm</code></p>\n</li>\n<li>\n<p>delete <code>pm2 delete npm</code></p>\n</li>\n<li>\n<p>Status  <code>pm2 list</code></p>\n</li>\n</ul>\n<pre><code>\n[root@localhost dolphinscheduler-ui]# pm2 start npm -- run dev\n[PM2] Applying action restartProcessId on app [npm](ids: 0)\n[PM2] [npm](0) ✓\n[PM2] Process successfully started\n┌──────────┬────┬─────────┬──────┬──────┬────────┬─────────┬────────┬─────┬──────────┬──────┬──────────┐\n│ App name │ id │ version │ mode │ pid  │ status │ restart │ uptime │ cpu │ mem      │ user │ watching │\n├──────────┼────┼─────────┼──────┼──────┼────────┼─────────┼────────┼─────┼──────────┼──────┼──────────┤\n│ npm      │ 0  │ N/A     │ fork │ 6168 │ online │ 31      │ 0s     │ 0%  │ 5.6 MB   │ root │ disabled │\n└──────────┴────┴─────────┴──────┴──────┴────────┴─────────┴────────┴─────┴──────────┴──────┴──────────┘\n Use `pm2 show &lt;id|name&gt;` to get more details about an app\n\n</code></pre>\n<h3>Project directory structure</h3>\n<p><code>build</code> some webpack configurations for packaging and development environment projects</p>\n<p><code>node_modules</code> development environment node dependency package</p>\n<p><code>src</code> project required documents</p>\n<p><code>src =&gt; combo</code> project third-party resource localization <code>npm run combo</code> specific view <code>build/combo.js</code></p>\n<p><code>src =&gt; font</code> Font icon library can be added by visiting <a href=\"https://www.iconfont.cn\">https://www.iconfont.cn</a> Note: The font library uses its own secondary development to reintroduce its own library <code>src/sass/common/_font.scss</code></p>\n<p><code>src =&gt; images</code> public image storage</p>\n<p><code>src =&gt; js</code> js/vue</p>\n<p><code>src =&gt; lib</code> internal components of the company (company component library can be deleted after open source)</p>\n<p><code>src =&gt; sass</code> sass file One page corresponds to a sass file</p>\n<p><code>src =&gt; view</code> page file One page corresponds to an html file</p>\n<pre><code>&gt; Projects are developed using vue single page application (SPA)\n- All page entry files are in the `src/js/conf/${ corresponding page filename =&gt; home} index.js` entry file\n- The corresponding sass file is in `src/sass/conf/${corresponding page filename =&gt; home}/index.scss`\n- The corresponding html file is in `src/view/${corresponding page filename =&gt; home}/index.html`\n</code></pre>\n<p>Public module and utill <code>src/js/module</code></p>\n<p><code>components</code> =&gt; internal project common components</p>\n<p><code>download</code> =&gt; download component</p>\n<p><code>echarts</code> =&gt; chart component</p>\n<p><code>filter</code> =&gt; filter and vue pipeline</p>\n<p><code>i18n</code> =&gt; internationalization</p>\n<p><code>io</code> =&gt; io request encapsulation based on axios</p>\n<p><code>mixin</code> =&gt; vue mixin public part for disabled operation</p>\n<p><code>permissions</code> =&gt; permission operation</p>\n<p><code>util</code> =&gt; tool</p>\n<h3>System function module</h3>\n<p>Home  =&gt; <code>http://localhost:8888/#/home</code></p>\n<p>Project Management =&gt; <code>http://localhost:8888/#/projects/list</code></p>\n<pre><code>| Project Home\n| Workflow\n  - Workflow definition\n  - Workflow instance\n  - Task instance\n</code></pre>\n<p>Resource Management =&gt; <code>http://localhost:8888/#/resource/file</code></p>\n<pre><code>| File Management\n| udf Management\n  - Resource Management\n  - Function management\n\n\n\n</code></pre>\n<p>Data Source Management =&gt; <code>http://localhost:8888/#/datasource/list</code></p>\n<p>Security Center =&gt; <code>http://localhost:8888/#/security/tenant</code></p>\n<pre><code>| Tenant Management\n| User Management\n| Alarm Group Management\n  - master\n  - worker\n</code></pre>\n<p>User Center =&gt; <code>http://localhost:8888/#/user/account</code></p>\n<h2>Routing and state management</h2>\n<p>The project <code>src/js/conf/home</code> is divided into</p>\n<p><code>pages</code> =&gt; route to page directory</p>\n<pre><code> The page file corresponding to the routing address\n</code></pre>\n<p><code>router</code> =&gt; route management</p>\n<pre><code>vue router, the entry file index.js in each page will be registered. Specific operations: https://router.vuejs.org/zh/\n</code></pre>\n<p><code>store</code> =&gt; status management</p>\n<pre><code>The page corresponding to each route has a state management file divided into:\n\nactions =&gt; mapActions =&gt; Details：https://vuex.vuejs.org/zh/guide/actions.html\n\ngetters =&gt; mapGetters =&gt; Details：https://vuex.vuejs.org/zh/guide/getters.html\n\nindex =&gt; entrance\nmutations =&gt; mapMutations =&gt; Details：https://vuex.vuejs.org/zh/guide/mutations.html\n\nstate =&gt; mapState =&gt; Details：https://vuex.vuejs.org/zh/guide/state.html\n\nSpecific action：https://vuex.vuejs.org/zh/\n\n</code></pre>\n<h2>specification</h2>\n<h2>Vue specification</h2>\n<h5>1.Component name</h5>\n<p>The component is named multiple words and is connected with a wire (-) to avoid conflicts with HTML tags and a clearer structure.</p>\n<pre><code>// positive example\nexport default {\n    name: 'page-article-item'\n}\n</code></pre>\n<h5>2.Component files</h5>\n<p>The internal common component of the <code>src/js/module/components</code> project writes the folder name with the same name as the file name. The subcomponents and util tools that are split inside the common component are placed in the internal <code>_source</code> folder of the component.</p>\n<pre><code>└── components\n    ├── header\n        ├── header.vue\n        └── _source\n            └── nav.vue\n            └── util.js\n    ├── conditions\n        ├── conditions.vue\n        └── _source\n            └── search.vue\n            └── util.js\n</code></pre>\n<h5>3.Prop</h5>\n<p>When you define Prop, you should always name it in camel format (camelCase) and use the connection line (-) when assigning values to the parent component.This follows the characteristics of each language, because it is case-insensitive in HTML tags, and the use of links is more friendly; in JavaScript, the more natural is the hump name.</p>\n<pre><code>// Vue\nprops: {\n    articleStatus: Boolean\n}\n// HTML\n&lt;article-item :article-status=&quot;true&quot;&gt;&lt;/article-item&gt;\n</code></pre>\n<p>The definition of Prop should specify its type, defaults, and validation as much as possible.</p>\n<p>Example：</p>\n<pre><code>props: {\n    attrM: Number,\n    attrA: {\n        type: String,\n        required: true\n    },\n    attrZ: {\n        type: Object,\n        //  The default value of the array/object should be returned by a factory function\n        default: function () {\n            return {\n                msg: 'achieve you and me'\n            }\n        }\n    },\n    attrE: {\n        type: String,\n        validator: function (v) {\n            return !(['success', 'fail'].indexOf(v) === -1) \n        }\n    }\n}\n</code></pre>\n<h5>4.v-for</h5>\n<p>When performing v-for traversal, you should always bring a key value to make rendering more efficient when updating the DOM.</p>\n<pre><code>&lt;ul&gt;\n    &lt;li v-for=&quot;item in list&quot; :key=&quot;item.id&quot;&gt;\n        {{ item.title }}\n    &lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n<p>v-for should be avoided on the same element as v-if (<code>for example: &lt;li&gt;</code>) because v-for has a higher priority than v-if. To avoid invalid calculations and rendering, you should try to use v-if Put it on top of the container's parent element.</p>\n<pre><code>&lt;ul v-if=&quot;showList&quot;&gt;\n    &lt;li v-for=&quot;item in list&quot; :key=&quot;item.id&quot;&gt;\n        {{ item.title }}\n    &lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n<h5>5.v-if / v-else-if / v-else</h5>\n<p>If the elements in the same set of v-if logic control are logically identical, Vue reuses the same part for more efficient element switching, <code>such as: value</code>. In order to avoid the unreasonable effect of multiplexing, you should add key to the same element for identification.</p>\n<pre><code>&lt;div v-if=&quot;hasData&quot; key=&quot;mazey-data&quot;&gt;\n    &lt;span&gt;{{ mazeyData }}&lt;/span&gt;\n&lt;/div&gt;\n&lt;div v-else key=&quot;mazey-none&quot;&gt;\n    &lt;span&gt;no data&lt;/span&gt;\n&lt;/div&gt;\n</code></pre>\n<h5>6.Instruction abbreviation</h5>\n<p>In order to unify the specification, the instruction abbreviation is always used. Using <code>v-bind</code>, <code>v-on</code> is not bad. Here is only a unified specification.</p>\n<pre><code>&lt;input :value=&quot;mazeyUser&quot; @click=&quot;verifyUser&quot;&gt;\n</code></pre>\n<h5>7.Top-level element order of single file components</h5>\n<p>Styles are packaged in a file, all the styles defined in a single vue file, the same name in other files will also take effect. All will have a top class name before creating a component.\nNote: The sass plugin has been added to the project, and the sas syntax can be written directly in a single vue file.\nFor uniformity and ease of reading, they should be placed in the order of  <code>&lt;template&gt;</code>、<code>&lt;script&gt;</code>、<code>&lt;style&gt;</code>.</p>\n<pre><code>&lt;template&gt;\n  &lt;div class=&quot;test-model&quot;&gt;\n    test\n  &lt;/div&gt;\n&lt;/template&gt;\n&lt;script&gt;\n  export default {\n    name: &quot;test&quot;,\n    data() {\n      return {}\n    },\n    props: {},\n    methods: {},\n    watch: {},\n    beforeCreate() {\n    },\n    created() {\n    },\n    beforeMount() {\n    },\n    mounted() {\n    },\n    beforeUpdate() {\n    },\n    updated() {\n    },\n    beforeDestroy() {\n    },\n    destroyed() {\n    },\n    computed: {},\n    components: {},\n  }\n&lt;/script&gt;\n\n&lt;style lang=&quot;scss&quot; rel=&quot;stylesheet/scss&quot;&gt;\n  .test-model {\n\n  }\n&lt;/style&gt;\n\n</code></pre>\n<h2>JavaScript specification</h2>\n<h5>1.var / let / const</h5>\n<p>It is recommended to no longer use var, but use let / const, prefer const. The use of any variable must be declared in advance, except that the function defined by function can be placed anywhere.</p>\n<h5>2.quotes</h5>\n<pre><code>const foo = 'after division'\nconst bar = `${foo}，ront-end engineer`\n</code></pre>\n<h5>3.function</h5>\n<p>Anonymous functions use the arrow function uniformly. When multiple parameters/return values are used, the object's structure assignment is used first.</p>\n<pre><code>function getPersonInfo ({name, sex}) {\n    // ...\n    return {name, gender}\n}\n</code></pre>\n<p>The function name is uniformly named with a camel name. The beginning of the capital letter is a constructor. The lowercase letters start with ordinary functions, and the new operator should not be used to operate ordinary functions.</p>\n<h5>4.object</h5>\n<pre><code>const foo = {a: 0, b: 1}\nconst bar = JSON.parse(JSON.stringify(foo))\n\nconst foo = {a: 0, b: 1}\nconst bar = {...foo, c: 2}\n\nconst foo = {a: 3}\nObject.assign(foo, {b: 4})\n\nconst myMap = new Map([])\nfor (let [key, value] of myMap.entries()) {\n    // ...\n}\n</code></pre>\n<h5>5.module</h5>\n<p>Unified management of project modules using import / export.</p>\n<pre><code>// lib.js\nexport default {}\n\n// app.js\nimport app from './lib'\n</code></pre>\n<p>Import is placed at the top of the file.</p>\n<p>If the module has only one output value, use <code>export default</code>，otherwise no.</p>\n<h2>HTML / CSS</h2>\n<h5>1.Label</h5>\n<p>Do not write the type attribute when referencing external CSS or JavaScript. The HTML5 default type is the text/css and text/javascript properties, so there is no need to specify them.</p>\n<pre><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;//www.test.com/css/test.css&quot;&gt;\n&lt;script src=&quot;//www.test.com/js/test.js&quot;&gt;&lt;/script&gt;\n</code></pre>\n<h5>2.Naming</h5>\n<p>The naming of Class and ID should be semantic, and you can see what you are doing by looking at the name; multiple words are connected by a link.</p>\n<pre><code>// positive example\n.test-header{\n    font-size: 20px;\n}\n</code></pre>\n<h5>3.Attribute abbreviation</h5>\n<p>CSS attributes use abbreviations as much as possible to improve the efficiency and ease of understanding of the code.</p>\n<pre><code>// counter example\nborder-width: 1px;\nborder-style: solid;\nborder-color: #ccc;\n\n// positive example\nborder: 1px solid #ccc;\n</code></pre>\n<h5>4.Document type</h5>\n<p>The HTML5 standard should always be used.</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n</code></pre>\n<h5>5.Notes</h5>\n<p>A block comment should be written to a module file.</p>\n<pre><code>/**\n* @module mazey/api\n* @author Mazey &lt;mazey@mazey.net&gt;\n* @description test.\n* */\n</code></pre>\n<h2>interface</h2>\n<h5>All interfaces are returned as Promise</h5>\n<p>Note that non-zero is wrong for catching catch</p>\n<pre><code>const test = () =&gt; {\n  return new Promise((resolve, reject) =&gt; {\n    resolve({\n      a:1\n    })\n  })\n}\n\n// transfer\ntest.then(res =&gt; {\n  console.log(res)\n  // {a:1}\n})\n</code></pre>\n<p>Normal return</p>\n<pre><code>{\n  code:0,\n  data:{}\n  msg:'success'\n}\n</code></pre>\n<p>错误返回</p>\n<pre><code>{\n  code:10000, \n  data:{}\n  msg:'failed'\n}\n</code></pre>\n<h5>Related interface path</h5>\n<p>dag related interface <code>src/js/conf/home/store/dag/actions.js</code></p>\n<p>Data Source Center Related Interfaces  <code>src/js/conf/home/store/datasource/actions.js</code></p>\n<p>Project Management Related Interfaces <code>src/js/conf/home/store/projects/actions.js</code></p>\n<p>Resource Center Related Interfaces <code>src/js/conf/home/store/resource/actions.js</code></p>\n<p>Security Center Related Interfaces <code>src/js/conf/home/store/security/actions.js</code></p>\n<p>User Center Related Interfaces <code>src/js/conf/home/store/user/actions.js</code></p>\n<h2>Extended development</h2>\n<h5>1.Add node</h5>\n<p>(1) First place the icon icon of the node in the <code>src/js/conf/home/pages/dag/img</code>folder, and note the English name of the node defined by the <code>toolbar_${in the background. For example: SHELL}.png</code></p>\n<p>(2)  Find the <code>tasksType</code> object in <code>src/js/conf/home/pages/dag/_source/config.js</code> and add it to it.</p>\n<pre><code>'DEPENDENT': {  //  The background definition node type English name is used as the key value\n  desc: 'DEPENDENT',  // tooltip desc\n  color: '#2FBFD8'  // The color represented is mainly used for tree and gantt\n}\n</code></pre>\n<p>(3)  Add a <code>${node type (lowercase)}</code>.vue file in <code>src/js/conf/home/pages/dag/_source/formModel/tasks</code>. The contents of the components related to the current node are written here. Must belong to a node component must have a function _verification () After the verification is successful, the relevant data of the current component is thrown to the parent component.</p>\n<pre><code>/**\n * Verification\n*/\n  _verification () {\n    // datasource subcomponent verification\n    if (!this.$refs.refDs._verifDatasource()) {\n      return false\n    }\n\n    // verification function\n    if (!this.method) {\n      this.$message.warning(`${i18n.$t('Please enter method')}`)\n      return false\n    }\n\n    // localParams subcomponent validation\n    if (!this.$refs.refLocalParams._verifProp()) {\n      return false\n    }\n    // store\n    this.$emit('on-params', {\n      type: this.type,\n      datasource: this.datasource,\n      method: this.method,\n      localParams: this.localParams\n    })\n    return true\n  }\n</code></pre>\n<p>(4) Common components used inside the node component are under<code>_source</code>, and <code>commcon.js</code> is used to configure public data.</p>\n<h5>2.Increase the status type</h5>\n<p>(1) Find the <code>tasksState</code> object in <code>src/js/conf/home/pages/dag/_source/config.js</code> and add it to it.</p>\n<pre><code> 'WAITTING_DEPEND': {  // 'WAITTING_DEPEND': {  //后端定义状态类型 前端用作key值\n  id: 11,  // front-end definition id is used as a sort\n  desc: `${i18n.$t('waiting for dependency')}`,  // tooltip desc\n  color: '#5101be',  // The color represented is mainly used for tree and gantt\n  icoUnicode: '&amp;#xe68c;',  // font icon\n  isSpin: false  // whether to rotate (requires code judgment)\n}\n</code></pre>\n<h5>3.Add the action bar tool</h5>\n<p>(1)  Find the <code>toolOper</code> object in <code>src/js/conf/home/pages/dag/_source/config.js</code> and add it to it.</p>\n<pre><code>{\n  code: 'pointer',  // tool identifier\n  icon: '&amp;#xe781;',  // tool icon\n  disable: disable,  // disable\n  desc: `${i18n.$t('Drag node and selected item')}`  // tooltip desc\n}\n</code></pre>\n<p>(2) Tool classes are returned as a constructor  <code>src/js/conf/home/pages/dag/_source/plugIn</code></p>\n<p><code>downChart.js</code>  =&gt;  dag image download processing</p>\n<p><code>dragZoom.js</code>  =&gt;  mouse zoom effect processing</p>\n<p><code>jsPlumbHandle.js</code>  =&gt;  drag and drop line processing</p>\n<p><code>util.js</code>  =&gt;   belongs to the <code>plugIn</code> tool class</p>\n<p>The operation is handled in the <code>src/js/conf/home/pages/dag/_source/dag.js</code> =&gt; <code>toolbarEvent</code> event.</p>\n<h5>3.Add a routing page</h5>\n<p>(1) First add a routing address<code>src/js/conf/home/router/index.js</code> in route management</p>\n<pre><code>routing address{\n  path: '/test',  // routing address\n  name: 'test',  // alias\n  component: resolve =&gt; require(['../pages/test/index'], resolve),  // route corresponding component entry file\n  meta: {\n    title: `${i18n.$t('test')} - EasyScheduler`  // title display\n  }\n},\n</code></pre>\n<p>(2)Create a <code>test</code> folder in <code>src/js/conf/home/pages</code> and create an <code>index.vue</code>entry file in the folder.</p>\n<pre><code>This will give you direct access to`http://localhost:8888/#/test`\n</code></pre>\n<h5>4.Increase the preset mailbox</h5>\n<p>Find the <code>src/lib/localData/email.js</code> startup and timed email address input to automatically pull down the match.</p>\n<pre><code>export default [&quot;test@analysys.com.cn&quot;,&quot;test1@analysys.com.cn&quot;,&quot;test3@analysys.com.cn&quot;]\n</code></pre>\n<h5>5.Authority management and disabled state processing</h5>\n<p>The permission gives the userType according to the backUser interface <code>getUserInfo</code> interface: <code>&quot;ADMIN_USER/GENERAL_USER&quot;</code>permission to control whether the page operation button is <code>disabled</code>.</p>\n<p>specific operation：<code>src/js/module/permissions/index.js</code></p>\n<p>disabled processing：<code>src/js/module/mixin/disabledState.js</code></p>\n",
  "link": "/en-us/docs/developer_guide/frontend-development.html",
  "meta": {}
}