{
  "filename": "development-environment-setup.md",
  "__html": "<h4>Preparation</h4>\n<ol>\n<li>\n<p>First, fork the <a href=\"https://github.com/apache/incubator-dolphinscheduler\">dolphinscheduler</a> code from the remote repository to your local repository.</p>\n</li>\n<li>\n<p>Install MySQL/PostgreSQL, JDK and MAVEN in your own software development environment.</p>\n</li>\n<li>\n<p>Clone your forked repository to the local file system.</p>\n</li>\n</ol>\n<pre><code>    git clone https://github.com/apache/incubator-dolphinscheduler.git`\n</code></pre>\n<ol start=\"4\">\n<li>After finished the clone, go into the project directory and execute the following commands:</li>\n</ol>\n<pre><code>    git branch -a  #check the branch\n    git checkout dev #switch to the dev branch\n    git pull #sychronize the branch with the remote branch\n    mvn -U clean package -Prelease -Dmaven.test.skip=true  #because the project uses gRPC, you need to compile the project to generate the required classes\n</code></pre>\n<h4>Install node</h4>\n<ol>\n<li>\n<p>Install nvm<br>\ncurl -o- <a href=\"https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh\">https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh</a></p>\n</li>\n<li>\n<p>Refresh the environment variables<br>\nsource ~/.bash_profile</p>\n</li>\n<li>\n<p>Install node<br>\nnvm install v12.12.0<br>\nnote:mac users could install npm through brew:brew install npm</p>\n</li>\n<li>\n<p>Validate the node installation<br>\nnode --version</p>\n</li>\n</ol>\n<h4>Install zookeeper</h4>\n<ol>\n<li>\n<p>Download zookeeper<br>\n<a href=\"http://apache.mirrors.hoobly.com/zookeeper/zookeeper-3.6.1/apache-zookeeper-3.6.1-bin.tar.gz\">http://apache.mirrors.hoobly.com/zookeeper/zookeeper-3.6.1/apache-zookeeper-3.6.1-bin.tar.gz</a></p>\n</li>\n<li>\n<p>Copy the zookeeper config file<br>\ncp conf/zoo_sample.cfg conf/zoo.cfg</p>\n</li>\n<li>\n<p>Modify zookepper cofig<br>\nvi conf/zoo.cfg<br>\ndataDir=./tmp/zookeeper</p>\n</li>\n<li>\n<p>Start/stop zookeeper<br>\n./bin/zkServer.sh start<br>\n./bin/zkServer.sh stop</p>\n</li>\n</ol>\n<h4>Create database</h4>\n<p>Create user, user name: ds_user, password: dolphinscheduler</p>\n<pre><code>    mysql&gt; CREATE DATABASE dolphinscheduler DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;\n    mysql&gt; GRANT ALL PRIVILEGES ON dolphinscheduler.* TO 'ds_user'@'%' IDENTIFIED BY 'dolphinscheduler';\n    mysql&gt; GRANT ALL PRIVILEGES ON dolphinscheduler.* TO 'ds_user'@'localhost' IDENTIFIED BY 'dolphinscheduler';\n    mysql&gt; flush privileges;\n</code></pre>\n<h4>Set up the front-end</h4>\n<ol>\n<li>\n<p>Enter the dolphinscheduler-ui directory<br>\ncd dolphinscheduler-ui</p>\n</li>\n<li>\n<p>Run npm install</p>\n</li>\n</ol>\n<h4>Set up the back-end</h4>\n<ol>\n<li>\n<p>Import the project to IDEA<br>\nfile--&gt;open</p>\n</li>\n<li>\n<p>Modify the database configuration in the datasource.properties file in the resource directory of the dao module</p>\n</li>\n</ol>\n<pre><code>    spring.datasource.driver-class-name=com.mysql.jdbc.Driver\n    spring.datasource.url=jdbc:mysql://localhost:3306/dolphinscheduler\n    spring.datasource.username=ds_user\n    spring.datasource.password=dolphinscheduler  \n</code></pre>\n<ol start=\"3\">\n<li>\n<p>Modify pom.xml in the root directory and modify the scope of mysql-connector-java to complie</p>\n</li>\n<li>\n<p>Refresh the dao module, run the main method of org.apache.dolphinscheduler.dao.upgrade.shell.CreateDolphinScheduler to automatically insert the tables and data required by the project.</p>\n</li>\n<li>\n<p>Modify the service module<br>\ntry to change the zookeeper.quorum part of the zookeeper.properties file\nzookeeper.quorum=localhost:2181</p>\n</li>\n<li>\n<p>Modify the .env file of the dolphinscheduler-ui module</p>\n</li>\n</ol>\n<pre><code>    API_BASE = http://localhost:12345\n    DEV_HOST = localhost\n</code></pre>\n<h4>Start the project</h4>\n<ol>\n<li>\n<p>Start zookeeper<br>\n./bin/zkServer.sh start</p>\n</li>\n<li>\n<p>Start MasterServer<br>\nrun the main method of org.apache.dolphinscheduler.server.master.MasterServer, you need to set the following VM options:</p>\n</li>\n</ol>\n<pre><code>    -Dlogging.config=classpath:logback-master.xml -Ddruid.mysql.usePingMethod=false\n</code></pre>\n<ol start=\"3\">\n<li>Start WorkerServer<br>\nrun the main method of org.apache.dolphinscheduler.server.worker.WorkerServer, you need to set the following VM options:</li>\n</ol>\n<pre><code>    -Dlogging.config=classpath:logback-worker.xml -Ddruid.mysql.usePingMethod=false\n</code></pre>\n<ol start=\"4\">\n<li>Start ApiApplicationServer<br>\nrun the main method of org.apache.dolphinscheduler.api.ApiApplicationServer, you need to set the following VM options:</li>\n</ol>\n<pre><code>    -Dlogging.config=classpath:logback-api.xml -Dspring.profiles.active=api\n</code></pre>\n<ol start=\"5\">\n<li>We are not going to start the other modules. if they are required to be started, check script/dolphinscheduler-daemon.sh and set them the same VM Options.</li>\n</ol>\n<pre><code>    if [ &quot;$command&quot; = &quot;api-server&quot; ]; then\n      LOG_FILE=&quot;-Dlogging.config=classpath:logback-api.xml -Dspring.profiles.active=api&quot;\n      CLASS=org.apache.dolphinscheduler.api.ApiApplicationServer\n    elif [ &quot;$command&quot; = &quot;master-server&quot; ]; then\n      LOG_FILE=&quot;-Dlogging.config=classpath:logback-master.xml -Ddruid.mysql.usePingMethod=false&quot;\n      CLASS=org.apache.dolphinscheduler.server.master.MasterServer\n    elif [ &quot;$command&quot; = &quot;worker-server&quot; ]; then\n      LOG_FILE=&quot;-Dlogging.config=classpath:logback-worker.xml -Ddruid.mysql.usePingMethod=false&quot;\n      CLASS=org.apache.dolphinscheduler.server.worker.WorkerServer\n    elif [ &quot;$command&quot; = &quot;alert-server&quot; ]; then\n      LOG_FILE=&quot;-Dlogback.configurationFile=conf/logback-alert.xml&quot;\n      CLASS=org.apache.dolphinscheduler.alert.AlertServer\n    elif [ &quot;$command&quot; = &quot;logger-server&quot; ]; then\n      CLASS=org.apache.dolphinscheduler.server.log.LoggerServer\n    else\n      echo &quot;Error: No command named \\`$command' was found.&quot;\n      exit 1\n    fi\n</code></pre>\n<ol start=\"6\">\n<li>cd dolphinscheduler-ui directory and run npm run start</li>\n</ol>\n<h4>Visit the project</h4>\n<ol>\n<li>\n<p>Visit <a href=\"http://localhost:8888\">http://localhost:8888</a></p>\n</li>\n<li>\n<p>Sign in with the administrator account\nusername: admin<br>\npassword: dolphinscheduler123</p>\n</li>\n</ol>\n",
  "link": "\\en-us\\docs\\development\\development-environment-setup.html",
  "meta": {}
}