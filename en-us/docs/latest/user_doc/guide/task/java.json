{
  "filename": "java.md",
  "__html": "<h1>Overview</h1>\n<p>This node is for executing java-type tasks and supports using files and jar packages as program entries.</p>\n<h1>Create Tasks</h1>\n<ul>\n<li>\n<p>Click on <code>Project Management</code> -&gt; <code>Project Name</code> -&gt; <code>Workflow Definition</code>, click on the “Create workflow” button, go to the DAG edit page:</p>\n</li>\n<li>\n<p>Drag the toolbar's Java task node to the palette.</p>\n</li>\n</ul>\n<h1>Task Parameters</h1>\n<table>\n<thead>\n<tr>\n<th><strong>Parameter</strong></th>\n<th><strong>Description</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Node Name</td>\n<td>The name of the set task. The node name in a workflow definition is unique.</td>\n</tr>\n<tr>\n<td>Run Flag</td>\n<td>Indicates whether the node is scheduled properly and turns on the kill switch, if not needed.</td>\n</tr>\n<tr>\n<td>Description</td>\n<td>Describes the functionality of the node.</td>\n</tr>\n<tr>\n<td>Task Priority</td>\n<td>When the number of worker threads is insufficient, the worker executes tasks according to the priority. When the priority is the same, the worker executes tasks by order.</td>\n</tr>\n<tr>\n<td>Worker Group</td>\n<td>The group of machines who execute the tasks. If selecting <code>Default</code>, DolphinScheduler will randomly choose a worker machine to execute the task.</td>\n</tr>\n<tr>\n<td>Environment Name</td>\n<td>Configure the environment in which the task runs.</td>\n</tr>\n<tr>\n<td>Number Of Failed Retries</td>\n<td>Number of resubmitted tasks that failed. You can choose the number in the drop-down menu or fill it manually.</td>\n</tr>\n<tr>\n<td>Failed Retry Interval</td>\n<td>the interval between the failure and resubmission of a task. You can choose the number in the drop-down menu or fill it manually.</td>\n</tr>\n<tr>\n<td>Delayed Execution Time</td>\n<td>the amount of time a task is delayed, in units.</td>\n</tr>\n<tr>\n<td>Timeout Alarm</td>\n<td>Check timeout warning, timeout failure, when the task exceeds the“Timeout length”, send a warning message and the task execution fails.</td>\n</tr>\n<tr>\n<td>Module Path</td>\n<td>pick Java 9 + 's modularity feature, put all resources into-module-path, and require that the JDK version in your worker supports modularity.</td>\n</tr>\n<tr>\n<td>Main Parameter</td>\n<td>Java program main method entry parameter.</td>\n</tr>\n<tr>\n<td>Java VM Parameters</td>\n<td>JVM startup parameters.</td>\n</tr>\n<tr>\n<td>Script</td>\n<td>You need to write Java code if you use the Java run type. The public class must exist in the code without writing a package statement.</td>\n</tr>\n<tr>\n<td>Resources</td>\n<td>External JAR packages or other resource files that are added to the classpath or module path and can be easily retrieved in your JAVA script.</td>\n</tr>\n<tr>\n<td>Custom parameter</td>\n<td>A user-defined parameter that is part of HTTP and replaces <code>${ variable }</code> in the script .</td>\n</tr>\n<tr>\n<td>Pre Tasks</td>\n<td>Selects a pre-task for the current task and sets the pre-task as the upstream of the current task.</td>\n</tr>\n</tbody>\n</table>\n<h2>Example</h2>\n<p>Java type tasks have two modes of execution, here is a demonstration of executing tasks in Java mode.</p>\n<p>The main configuration parameters are as follows:</p>\n<ul>\n<li>Run Type</li>\n<li>Module Path</li>\n<li>Main Parameters</li>\n<li>Java VM Parameters</li>\n<li>Script</li>\n</ul>\n<p><img src=\"/img/tasks/demo/java_task02.png\" alt=\"java_task\"></p>\n<h2>Note</h2>\n<p>When you run the task in JAVA execution mode, the public class must exist in the code, and you could omit writing a package statement.</p>\n",
  "link": "/dist/en-us/docs/3.1.0/user_doc/guide/task/java.html",
  "meta": {}
}