{
  "filename": "release.md",
  "__html": "<h1>Release Guide</h1>\n<h2>Preparation</h2>\n<p>This section is pre-release work, most of it is one-off, meaning <strong>it is only needed for your first release</strong>. If you have\nreleased before, then skip this section to the next.</p>\n<h3>Check Your Environment</h3>\n<p>To make sure you could successfully complete the release for DolphinScheduler, you should check your environment and make sure\nall conditions are met, if any or them are missing, you should install them and make sure them work.</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> JDK 1.8 above is requests</span>\njava -version\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> Maven requests</span>\nmvn -version\n</code></pre>\n<h3>GPG Settings</h3>\n<h4>Install GPG</h4>\n<p>Download installation package on <a href=\"https://www.gnupg.org/download/index.html\">official GnuPG website</a>.\nThe command of GnuPG 1.x version can differ a little from that of 2.x version.\nThe following instructions take <code>GnuPG-2.1.23</code> version for example.</p>\n<p>After the installation, execute the following command to check the version number.</p>\n<pre><code class=\"language-shell\">gpg --version\n</code></pre>\n<h4>Create Key</h4>\n<p>After the installation, execute the following command to create key.</p>\n<p>This command indicates <code>GnuPG-2.x</code> can be used:</p>\n<pre><code class=\"language-shell\">gpg --full-gen-key\n</code></pre>\n<p>This command indicates <code>GnuPG-1.x</code> can be used:</p>\n<pre><code class=\"language-shell\">gpg --gen-key\n</code></pre>\n<p>Finish the key creation according to instructions, <strong>Notice: Please use Apache mails and its password for key creation.</strong></p>\n<pre><code class=\"language-shell\">gpg (GnuPG) 2.0.12; Copyright (C) 2009 Free Software Foundation, Inc.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\nPlease select what kind of key you want:\n  (1) RSA and RSA (default)\n  (2) DSA and Elgamal\n  (3) DSA (sign only)\n  (4) RSA (sign only)\nYour selection? 1\nRSA keys may be between 1024 and 4096 bits long.\nWhat keysize do you want? (2048) 4096\nRequested keysize is 4096 bits\nPlease specify how long the key should be valid.\n        0 = key does not expire\n     &lt;n&gt;  = key expires in n days\n     &lt;n&gt;w = key expires in n weeks\n     &lt;n&gt;m = key expires in n months\n     &lt;n&gt;y = key expires in n years\nKey is valid for? (0)\nKey does not expire at all\nIs this correct? (y/N) y\n\nGnuPG needs to construct a user ID to identify your key.\n\nReal name: ${Input username}\nEmail address: ${Input email}\nComment: ${Input comment}\nYou selected this USER-ID:\n   &quot;${Inputed username} (${Inputed comment}) &lt;${Inputed email}&gt;&quot;\n\nChange (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O\nYou need a Passphrase to protect your secret key. # Input your Apache mail passwords\n</code></pre>\n<h4>Check Generated Key</h4>\n<pre><code class=\"language-shell\">gpg --list-keys\n</code></pre>\n<p>Execution Result:</p>\n<pre><code class=\"language-shell\">pub   4096R/85E11560 2019-11-15\nuid                  ${Username} (${Comment}) &lt;{Email}&gt;\nsub   4096R/A63BC462 2019-11-15\n</code></pre>\n<p>Among them, 85E11560 is public key ID.</p>\n<h4>Upload the Public Key to Key Server</h4>\n<p>The command is as follow:</p>\n<pre><code class=\"language-shell\">gpg --keyserver hkp://pool.sks-keyservers.net --send-key 85E11560\n</code></pre>\n<p><code>pool.sks-keyservers.net</code> is randomly chosen from <a href=\"https://sks-keyservers.net/status/\">public key server</a>.\nEach server will automatically synchronize with one another, so it would be okay to choose any one, a backup keys servers\nis <code>gpg --keyserver hkp://keyserver.ubuntu.com --send-key &lt;YOUR_KEY_ID&gt;</code></p>\n<h3>Configure Apache Maven Central Repository</h3>\n<h4>Set <code>settings-security.xml</code> and <code>settings.xml</code></h4>\n<p>In this section, we add Apache server maven configuration to prepare the release, we have to add <code>settings-security.xml</code> according\nto <a href=\"http://maven.apache.org/guides/mini/guide-encryption.html\">here</a> firstly and then change your <code>~/.m2/settings.xml</code> like below</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">settings</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servers</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">server</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>apache.snapshots.https<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">username</span>&gt;</span> <span class=\"hljs-comment\">&lt;!-- APACHE LDAP username --&gt;</span> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">username</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">password</span>&gt;</span> <span class=\"hljs-comment\">&lt;!-- APACHE LDAP encrypted password --&gt;</span> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">password</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">server</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">server</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>apache.releases.https<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">username</span>&gt;</span> <span class=\"hljs-comment\">&lt;!-- APACHE LDAP username --&gt;</span> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">username</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">password</span>&gt;</span> <span class=\"hljs-comment\">&lt;!-- APACHE LDAP encrypted password --&gt;</span> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">password</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">server</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servers</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">settings</span>&gt;</span>\n</code></pre>\n<h2>Releasing</h2>\n<h3>Check release-docs</h3>\n<p>Compared with the last release, the <code>release-docs</code> of the current release needs to be updated to the latest, if there are dependencies and versions changes</p>\n<ul>\n<li><code>dolphinscheduler-dist/release-docs/LICENSE</code></li>\n<li><code>dolphinscheduler-dist/release-docs/NOTICE</code></li>\n<li><code>dolphinscheduler-dist/release-docs/licenses</code></li>\n</ul>\n<h3>Set Release in Environment</h3>\n<p>We will use the release version, your github name and your Apache username below several times, so it is better to store\nit to bash variable for easier use.</p>\n<pre><code class=\"language-shell\">VERSION=&lt;THE-VERSION-YOU-RELEASE&gt;\nSOURCE_CODE_DIR=&lt;YOUR-SOURCE-CODE-ROOT-DIR&gt;  # the directory of your source code hold, the location of parent pom.xml instead of binary package \n\nGH_USERNAME=&lt;YOUR-GITHUB-USERNAME&gt;\nGH_REMOTE=&lt;GITHUB-REMOTE&gt;  # we use `upstream` or `origin` mostly base on your release environment \n\nA_USERNAME=&lt;YOUR-APACHE-USERNAME&gt;\nSVN_DIR=&lt;PATH-TO-SVN-ROOT&gt;  # to keep binary package checkout from SVN, the sub path end with `/dolphinscheduler/dev` and `/dolphinscheduler/release` will be create\n</code></pre>\n<blockquote>\n<p>Note: We can use the variable directly in you bash after we set environment, without changing anything. For example, we\ncan use command <code>git clone -b &quot;${VERSION}&quot;-prepare https://github.com/apache/dolphinscheduler.git</code> to clone the release branch\nand it can be successful by converting the <code>&quot;${VERSION}&quot;</code> to <code>&lt;THE-VERSION-YOU-RELEASE&gt;</code>. But you have to change <code>&lt;VERSION&gt;</code> manually in\nsome of not bash step like <a href=\"#vote-procedure\">vote mail</a>, we are using <code>&lt;VERSION&gt;</code> instead of <code>&quot;${VERSION}&quot;</code> to notice release\nmanager they have to change by hand.</p>\n</blockquote>\n<h3>Update Documentation or Code Version</h3>\n<p>We need to update some documentation before the Maven release. For example, to release version <code>VERSION</code>, the following updates are required:</p>\n<ul>\n<li>Version in the code:\n<ul>\n<li><code>sql</code>:\n<ul>\n<li><code>dolphinscheduler_mysql.sql</code>: <code>t_ds_version</code> needs to be updated to <code>VERSION</code></li>\n<li><code>dolphinscheduler_postgre.sql</code>: <code>t_ds_version</code> needs to be updated to <code>VERSION</code></li>\n<li><code>dolphinscheduler_h2.sql</code>: <code>t_ds_version</code> needs to be updated to <code>VERSION</code></li>\n<li><code>upgrade</code>: whether to add <code>VERSION_schema</code> if there are some upgrade DDL or DML, can skip this step if no any DDL or DML added.</li>\n<li><code>soft_version</code>: need to be updated to <code>VERSION</code></li>\n</ul>\n</li>\n<li><code>deploy/docker/.env</code>: <code>HUB</code> change to <code>apache</code>ï¼Œ<code>TAG</code> change to <code>VERSION</code></li>\n<li><code>deploy/kubernetes/dolphinscheduler</code>:\n<ul>\n<li><code>Chart.yaml</code>: <code>appVersion</code> and <code>version</code> needs to be updated to x.y.z</li>\n<li><code>values.yaml</code>: <code>image.tag</code> needs to be updated to x.y.z</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Version in the docs:\n<ul>\n<li>Change the placeholder <code>&lt;version&gt;</code>(except <code>pom</code>)  to the <code>x.y.z</code> in directory <code>docs</code></li>\n<li>Add new history version\n<ul>\n<li><code>docs/docs/en/history-versions.md</code> and <code>docs/docs/zh/history-versions.md</code>: Add the new version and link for <code>x.y.z</code></li>\n</ul>\n</li>\n<li><code>docs/configs/docsdev.js</code>: change <code>/dev/</code> to <code>/x.y.z/</code>, <strong>DO NOT</strong> change this filename, is will be auto change by website tools.</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>Note: <code>VERSION</code> is a place hold string, is same as the version we set in <code>VERSION=&lt;THE-VERSION-YOU-RELEASE&gt;</code>.</p>\n</blockquote>\n<h3>Maven Release</h3>\n<h4>Maven Release Check</h4>\n<p>Create release branch base on prepare branch.</p>\n<pre><code class=\"language-shell\">cd &quot;${SOURCE_CODE_DIR}&quot;\ngit checkout -b &quot;${VERSION}&quot;-release &quot;${VERSION}&quot;-prepare\ngit push &quot;${GH_REMOTE}&quot; &quot;${VERSION}&quot;-release\n</code></pre>\n<blockquote>\n<p>Note: If you release in remote host without source code, you should run <code>git clone -b &quot;${VERSION}&quot;-prepare https://github.com/apache/dolphinscheduler.git</code>\nfirst to clone the source code. And then make sure you set <code>GH_REMOTE=&quot;origin&quot;</code> to make all command work fine.</p>\n</blockquote>\n<pre><code class=\"language-shell\">mvn release:prepare -Prelease -Darguments=&quot;-Dmaven.test.skip=true -Dcheckstyle.skip=true -Dmaven.javadoc.skip=true -Dspotless.check.skip=true&quot; -DautoVersionSubmodules=true -DdryRun=true -Dusername=&quot;${GH_USERNAME}&quot;\n</code></pre>\n<ul>\n<li><code>-Prelease</code>: choose release profile, which will pack all the source codes, jar files and executable binary packages.</li>\n<li><code>-DautoVersionSubmodules=true</code>: it can make the version number is inputted only once and not for each sub-module.</li>\n<li><code>-DdryRun=true</code>: dry run which means not to generate or submit new version number and new tag.</li>\n</ul>\n<h4>Maven Release Check Prepare</h4>\n<p>First, clean local pre-release check information.</p>\n<pre><code class=\"language-shell\">mvn release:clean\n</code></pre>\n<p>Then, prepare to execute the release.</p>\n<pre><code class=\"language-shell\">mvn release:prepare -Prelease -Darguments=&quot;-Dmaven.test.skip=true -Dcheckstyle.skip=true -Dmaven.javadoc.skip=true -Dspotless.check.skip=true&quot; -DautoVersionSubmodules=true -DpushChanges=false -Dusername=&quot;${GH_USERNAME}&quot;\n</code></pre>\n<p>It is basically the same as the previous rehearsal command, but deleting <code>-DdryRun=true</code> parameter.</p>\n<ul>\n<li><code>-DpushChanges=false</code>: do not submit the edited version number and tag to GitHub automatically.</li>\n</ul>\n<blockquote>\n<p>Note: You have to config your git <code>user.name</code> and <code>user.password</code> by command <code>git config --global user.email &quot;you@example.com&quot;</code>\nand <code>git config --global user.name &quot;Your Name&quot;</code> if you meet some mistake like <strong>Please tell me who you are.</strong>\nfrom git.</p>\n</blockquote>\n<p>After making sure there is no mistake in local files, submit them to GitHub.</p>\n<pre><code class=\"language-shell\">git push -u &quot;${GH_REMOTE}&quot; &quot;${VERSION}&quot;-release\ngit push &quot;${GH_REMOTE}&quot; --tags\n</code></pre>\n<!-- markdown-link-check-disable -->\n<blockquote>\n<p>Note1: In this step, you should use github token for password because native password no longer supported, you can see\n<a href=\"https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token\">https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token</a> for more\ndetail about how to create token about it.</p>\n<p>Note2: After the command done, it will auto-created <code>release.properties</code> file and <code>*.Backup</code> files, their will be need\nin the following command and DO NOT DELETE THEM</p>\n</blockquote>\n<!-- markdown-link-check-enable -->\n<h4>Maven Release Deploy</h4>\n<pre><code class=\"language-shell\">mvn release:perform -Prelease -Darguments=&quot;-Dmaven.test.skip=true -Dcheckstyle.skip=true -Dmaven.javadoc.skip=true -Dspotless.check.skip=true&quot; -DautoVersionSubmodules=true -Dusername=&quot;${GH_USERNAME}&quot;\n</code></pre>\n<p>After that command is executed, the version to be released will be uploaded to Apache staging repository automatically.\nGo to <a href=\"https://repository.apache.org/#stagingRepositories\">apache staging repositories</a> and login by Apache LDAP. then you can see the uploaded version, the content of <code>Repository</code> column is the <code>${STAGING.REPOSITORY}</code>.\nClick <code>Close</code> to tell Nexus that the construction is finished, because only in this way, this version can be usable.\nIf there is any problem in gpg signature, <code>Close</code> will fail, but you can see the failure information through <code>Activity</code>.</p>\n<h3>SVN</h3>\n<h4>Checkout Dolphinscheduler Release Directory</h4>\n<p>We need too checkout Dolphinscheduler dev release directory to local, and</p>\n<pre><code class=\"language-shell\">SVN_DIR_DEV=&quot;${SVN_DIR}/dolphinscheduler/dev&quot;\nSVN_DIR_RELEASE=&quot;${SVN_DIR}/dolphinscheduler/release&quot;\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> Optional, only <span class=\"hljs-keyword\">if</span> the SVN root path not exists.</span>\nmkdir -p &quot;${SVN_DIR_DEV}&quot;\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> When you first time checkout from this path</span>\nsvn --username=&quot;${A_USERNAME}&quot; co https://dist.apache.org/repos/dist/dev/dolphinscheduler &quot;${SVN_DIR_DEV}&quot;\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> Or update when the svn directory exists, and you already checkout</span>\nsvn --username=&quot;${A_USERNAME}&quot; update &quot;${SVN_DIR_DEV}&quot;\n</code></pre>\n<blockquote>\n<p>NOTE: it may take a few minutes to sync to the mirror in your first time checkout, because it will download all the files</p>\n</blockquote>\n<h4>Export New GPG Key to KEYS(Optional)</h4>\n<p>Only if the first time you release with this gpg KEY, including it is you first release, or you change your KEY. You should\nchange working directory to another one because this step need checkout and change KEYS in release directory.</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> Optional, only <span class=\"hljs-keyword\">if</span> the SVN root path not exists.</span>\nmkdir -p &quot;${SVN_DIR_RELEASE}&quot;\n\ncd &quot;${SVN_DIR_RELEASE}&quot;\nsvn --username=&quot;${A_USERNAME}&quot; co https://dist.apache.org/repos/dist/release/dolphinscheduler\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> Change the placeholder &lt;YOUR-GPG-KEY-ID&gt; to your id</span>\ngpg -a --export &lt;YOUR-GPG-KEY-ID&gt; &gt;&gt; KEYS\nsvn add *\nsvn --username=&quot;${A_USERNAME}&quot; commit -m &quot;new key &lt;YOUR-GPG-KEY-ID&gt; add&quot;\n</code></pre>\n<h4>Add Release Content to SVN</h4>\n<p>Create folder by version number, and move the  source code packages, binary packages and executable binary packages to SVN working directory.</p>\n<pre><code class=\"language-shell\">mkdir -p &quot;${SVN_DIR_DEV}/${VERSION}&quot;\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> Add to SVN</span>\ncp -f &quot;${SOURCE_CODE_DIR}&quot;/dolphinscheduler-dist/target/*.tar.gz &quot;${SVN_DIR_DEV}/${VERSION}&quot;\ncp -f &quot;${SOURCE_CODE_DIR}&quot;/dolphinscheduler-dist/target/*.tar.gz.asc &quot;${SVN_DIR_DEV}/${VERSION}&quot;\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> Create sign</span>\ncd &quot;${SVN_DIR_DEV}&quot;\nshasum -a 512 apache-dolphinscheduler-&quot;${VERSION}&quot;-src.tar.gz &gt;&gt; apache-dolphinscheduler-&quot;${VERSION}&quot;-src.tar.gz.sha512\nshasum -b -a 512 apache-dolphinscheduler-&quot;${VERSION}&quot;-bin.tar.gz &gt;&gt; apache-dolphinscheduler-&quot;${VERSION}&quot;-bin.tar.gz.sha512\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> Check sha512</span>\nshasum -c apache-dolphinscheduler-&quot;${VERSION}&quot;-src.tar.gz.sha512\nshasum -c apache-dolphinscheduler-&quot;${VERSION}&quot;-bin.tar.gz.sha512\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> Check gpg signature</span>\ngpg --verify apache-dolphinscheduler-&quot;${VERSION}&quot;-src.tar.gz.asc\ngpg --verify apache-dolphinscheduler-&quot;${VERSION}&quot;-bin.tar.gz.asc\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> Commit to Apache SVN</span>\nsvn add *\nsvn --username=&quot;${A_USERNAME}&quot; commit -m &quot;release ${VERSION}&quot;\n</code></pre>\n<blockquote>\n<p>Note: You have to create gpg signature manually when you can not find your <code>asc</code> file, the command\n<code>gpg --armor --detach-sign --digest-algo=SHA512 apache-dolphinscheduler-&quot;${VERSION}&quot;-bin.tar.gz</code> and\n<code>gpg --armor --detach-sign --digest-algo=SHA512 apache-dolphinscheduler-&quot;${VERSION}&quot;-src.tar.gz</code> will create them</p>\n</blockquote>\n<h3>Check Released Files</h3>\n<h4>Check source package</h4>\n<p>Decompress <code>apache-dolphinscheduler-&lt;VERSION&gt;-src.tar.gz</code> then check the following items:</p>\n<ul>\n<li>Check whether source tarball is oversized for including nonessential files</li>\n<li><code>LICENSE</code> and <code>NOTICE</code> files exist</li>\n<li>Correct year in <code>NOTICE</code> file</li>\n<li>There is only text files but no binary files</li>\n<li>All source files have ASF headers</li>\n<li>Codes can be compiled and pass the unit tests (mvn install)</li>\n<li>The contents of the release match with what's tagged in version control (diff -r a verify_dir tag_dir)</li>\n<li>Check if there is any extra files or folders, empty folders for example</li>\n</ul>\n<h4>Check binary packages</h4>\n<p>Decompress <code>apache-dolphinscheduler-&lt;VERSION&gt;-src.tar.gz</code> to check the following items:</p>\n<ul>\n<li><code>LICENSE</code> and <code>NOTICE</code> files exist</li>\n<li>Correct year in <code>NOTICE</code> file</li>\n<li>Check the third party dependency license:\n<ul>\n<li>The software have a compatible license</li>\n<li>All software licenses mentioned in <code>LICENSE</code></li>\n<li>All the third party dependency licenses are under <code>licenses</code> folder</li>\n<li>If it depends on Apache license and has a <code>NOTICE</code> file, that <code>NOTICE</code> file need to be added to <code>NOTICE</code> file of the release</li>\n</ul>\n</li>\n</ul>\n<h2>VOTE</h2>\n<h3>Update Release Notes</h3>\n<p>You should create a release note in GitHub by <a href=\"https://github.com/apache/dolphinscheduler/releases/new\">new release note</a>.\nIt should be done before vote mail because we need the release note in the mail. You could use command\n<code>python release.py changelog</code> in directory <code>tools/release</code> to creat the changelog.</p>\n<blockquote>\n<p>NOTE: Or if you prefer to create manually, you can use command <code>git log --pretty=&quot;- %s&quot; &lt;PREVIOUS-RELEASE-SHA&gt;..&lt;CURRENT-RELEASE-SHA&gt; &gt; changelog.md</code>\n(some log maybe not correct, you should filter them by yourself) and classify them and paste them to GitHub release note page</p>\n</blockquote>\n<h3>Vote procedure</h3>\n<p>DolphinScheduler community vote: send the vote e-mail to <code>dev@dolphinscheduler.apache.org</code>.  PMC needs to check the\nrightness of the version according to the document before they vote. After at least 72 hours and with at least 3\n<code>+1 and no -1 PMC member</code> votes, it can come to the next stage of the vote.</p>\n<p>Announce the vote result: send the result vote e-mail to <code>dev@dolphinscheduler.apache.org</code>ã€‚</p>\n<h3>Templates</h3>\n<h4>Vote Template</h4>\n<p>Titleï¼š</p>\n<pre><code class=\"language-txt\">[VOTE] Release Apache DolphinScheduler &lt;VERSION&gt;\n</code></pre>\n<p>Bodyï¼š</p>\n<pre><code class=\"language-txt\">Hello DolphinScheduler Community,\n\nThis is a call for vote to release Apache DolphinScheduler version &lt;VERSION&gt;\n\nRelease notes: https://github.com/apache/dolphinscheduler/releases/tag/&lt;VERSION&gt;\n\nThe release candidates: https://dist.apache.org/repos/dist/dev/dolphinscheduler/&lt;VERSION&gt;/\n\nMaven 2 staging repository: https://repository.apache.org/content/repositories/&lt;STAGING.REPOSITORY&gt;/org/apache/dolphinscheduler/\n\nGit tag for the release: https://github.com/apache/dolphinscheduler/tree/&lt;VERSION&gt;\n\nRelease Commit ID: https://github.com/apache/dolphinscheduler/commit/&lt;SHA-VALUE&gt;\n\nKeys to verify the Release Candidate: https://downloads.apache.org/dolphinscheduler/KEYS\n\nLook at here for how to verify this release candidate: https://dolphinscheduler.apache.org/en-us/docs/latest/user_doc/contribute/release/release.html\n\nThe vote will be open for at least 72 hours or until necessary number of votes are reached.\n\nPlease vote accordingly:\n\n[ ] +1 approve\n[ ] +0 no opinion\n[ ] -1 disapprove with the reason\n\nChecklist for reference:\n\n[ ] Download links are valid.\n[ ] Checksums and PGP signatures are valid.\n[ ] Source code artifacts have correct names matching the current release.\n[ ] LICENSE and NOTICE files are correct for each DolphinScheduler repo.\n[ ] All files have license headers if necessary.\n[ ] No compiled archives bundled in source archive.\n</code></pre>\n<h4>Result Template</h4>\n<p>Titleï¼š</p>\n<pre><code class=\"language-txt\">[RESULT][VOTE] Release Apache DolphinScheduler &lt;VERSION&gt;\n</code></pre>\n<p>Bodyï¼š</p>\n<pre><code class=\"language-txt\">The vote to release Apache DolphinScheduler &lt;VERSION&gt; has passed.Here is the vote result,\n\n4 PMC member +1 votes:\n\nxxx\nxxx\nxxx\nxxx\n\n1 community +1 vote:\nxxx\n\nThanks everyone for taking time to check this release and help us.\n</code></pre>\n<h2>Announce</h2>\n<h3>Handle Release Tarball and Remove Release Branch</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> move to release directory</span>\nsvn mv -m &quot;release ${VERSION}&quot; https://dist.apache.org/repos/dist/dev/dolphinscheduler/&quot;${VERSION}&quot; https://dist.apache.org/repos/dist/release/dolphinscheduler/\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> remove old release directory</span>\nsvn delete -m &quot;remove old release&quot; https://dist.apache.org/repos/dist/release/dolphinscheduler/&lt;PREVIOUS-RELEASE-VERSION&gt;\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> Remove prepare branch</span> \ncd &quot;${SOURCE_CODE_DIR}&quot;\ngit push --delete &quot;${GH_REMOTE}&quot; &quot;${VERSION}-prepare&quot;\n</code></pre>\n<p>and then find DolphinScheduler in <a href=\"https://repository.apache.org/#stagingRepositories\">apache staging repositories</a> and click <code>Release</code></p>\n<h3>Update Document</h3>\n<p>Website should be present before you send the announce mail this section will tell you how to change the website. For example,\nthe release version is <code>&lt;VERSION&gt;</code>, the following updates are required(note it will take effect immediately when the PR is merged):</p>\n<ul>\n<li>Repository <strong>apache/dolphinscheduler-website</strong>:\n<ul>\n<li><code>download/en-us/download.md</code> and <code>download/zh-cn/download.md</code>: add the download of the <code>&lt;VERSION&gt;</code> release package</li>\n<li><code>scripts/conf.sh</code>: Add new release version <code>&lt;VERSION&gt;</code> key-value pair to variable <code>DEV_RELEASE_DOCS_VERSIONS</code></li>\n</ul>\n</li>\n<li>Repository <strong>apache/dolphinscheduler</strong> (dev branch):\n<ul>\n<li><code>docs/configs/site.js</code>:\n<ul>\n<li><code>docsLatest</code>: update to <code>&lt;VERSION&gt;</code></li>\n<li><code>docs0</code>: The <code>text</code> of two places of <code>en-us/zh-cn</code> needs to be updated to <code>latest(&lt;VERSION&gt;)</code></li>\n</ul>\n</li>\n<li><code>docs/configs/index.md.jsx</code>: Add <code>&lt;VERSION&gt;: docsxyzConfig</code> and add new <code>import</code> for the new <code>docsxyzConfig</code></li>\n<li><code>docs/docs/en/history-versions.md</code> and <code>docs/docs/zh/history-versions.md</code>: Add new <code>&lt;VERSION&gt;</code> release docs.</li>\n<li><code>.github/ISSUE_TEMPLATE/bug-report.yml</code>: DolphinScheduler's GitHub <a href=\"https://github.com/apache/dolphinscheduler/blob/dev/.github/ISSUE_TEMPLATE/bug-report.yml\">bug-report</a>\nissue template have <strong>Version</strong> selection bottom. So after released we should add the new <code>&lt;VERSION&gt;</code> to\nbug-report.yml</li>\n</ul>\n</li>\n</ul>\n<h3>Publish Docker Image</h3>\n<p>we already have the exists CI to publish the latest Docker image to GitHub container register with <a href=\"https://github.com/apache/dolphinscheduler/blob/d80cf21456265c9d84e642bdb4db4067c7577fc6/.github/workflows/publish-docker.yaml#L55-L63\">config</a>.\nWe could reuse the main command the CI run and publish our Docker images to Docker Hub by single command.</p>\n<p>It is highly recommended to build  and test docker images locally first before push to docker hub</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> Checkout and create to target tag</span>\ngit checkout -b &quot;${VERSION}&quot; &quot;${VERSION}&quot;\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> Build docker images locally</span>\n./mvnw -B clean package \\\n    -Dmaven.test.skip \\\n    -Dmaven.javadoc.skip \\\n    -Dmaven.checkstyle.skip \\\n    -Dmaven.deploy.skip \\\n    -Ddocker.tag=&quot;${VERSION}&quot; \\\n    -Pdocker,release\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> You should <span class=\"hljs-built_in\">test</span> whether the standalone-server images work or not</span>\ndocker run --name dolphinscheduler-standalone-server -p 12345:12345 -p 25333:25333 -d apache/dolphinscheduler-standalone-server:&quot;${DOLPHINSCHEDULER_VERSION}&quot;\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> If success, push to dockerhub</span>\ndocker push apache/dolphinscheduler-tools:&quot;${VERSION}&quot;\ndocker push apache/dolphinscheduler-standalone-server:&quot;${VERSION}&quot;\ndocker push apache/dolphinscheduler-master:&quot;${VERSION}&quot;\ndocker push apache/dolphinscheduler-worker:&quot;${VERSION}&quot;\ndocker push apache/dolphinscheduler-api:&quot;${VERSION}&quot;\ndocker push apache/dolphinscheduler-alert-server:&quot;${VERSION}&quot;\n</code></pre>\n<blockquote>\n<p>Note: To push to dockerhub, you must have Apache organization permission of dockerhub. If you donâ€™t you need to require\nfrom Apache infra Jira. You can refer to here to submit an application from <a href=\"https://issues.apache.org/jira/projects/INFRA/issues/INFRA-23314\">here</a></p>\n<p>You can also build and push docker by single command if you make sure the images work fine</p>\n<pre><code class=\"language-shell\">./mvnw -B clean deploy \\\n    -Dmaven.test.skip \\\n    -Dmaven.javadoc.skip \\\n    -Dmaven.checkstyle.skip \\\n    -Dmaven.deploy.skip \\\n    -Ddocker.tag=&quot;${VERSION}&quot; \\\n    -Ddocker.hub=apache \\\n    -Pdocker,release\n</code></pre>\n</blockquote>\n<h3>Send Announcement E-mail Community</h3>\n<p>You should send announcement E-mail after release process finished. The E-mail should send to <code>dev@dolphinscheduler.apache.org</code>\nand cc to <code>announce@apache.org</code>.</p>\n<p>Announcement e-mail template as belowï¼š</p>\n<p>Titleï¼š</p>\n<pre><code class=\"language-txt\">[ANNOUNCE] Release Apache DolphinScheduler &lt;VERSION&gt;\n</code></pre>\n<p>Bodyï¼š</p>\n<pre><code class=\"language-txt\">Hi all,\n\nWe are glad to announce the release of Apache DolphinScheduler &lt;VERSION&gt;. Once again I would like to express my thanks to your help.\n\nDolphin Scheduler is a distributed and easy-to-extend visual workflow scheduler system,\ndedicated to solving the complex task dependencies in data processing, making the scheduler system out of the box for data processing.\n\n\nDownload Links: https://dolphinscheduler.apache.org/en-us/download/download.html\n\nRelease Notes: https://github.com/apache/dolphinscheduler/releases/tag/&lt;VERSION&gt;\n\nWebsite: https://dolphinscheduler.apache.org/\n\nDolphinScheduler Resources:\n- Issue: https://github.com/apache/dolphinscheduler/issues/\n- Mailing list: dev@dolphinscheduler.apache.org\n- Documents: https://dolphinscheduler.apache.org/zh-cn/docs/&lt;VERSION&gt;/user_doc/about/introduction.html\n</code></pre>\n<h2>News</h2>\n<p>After all set, an article should be written and publish it to the community, it should include:</p>\n<ul>\n<li>What is the major purpose of the version, feature add, bugfix, or both</li>\n<li>Major new features and how to use it, better with picture or gif</li>\n<li>Major bugfix and make what different from previous version, better with picture or gif</li>\n<li>All contributors since previous release</li>\n</ul>\n<h3>Get All Contributors</h3>\n<p>You might need all contributors in current release when you want to publish the release news or announcement, you could\nuse command <code>python release.py contributor</code> in directory <code>tools/release</code> to auto generate contributor GitHub id.</p>\n",
  "link": "/dist/en-us/docs/dev/user_doc/contribute/release.html",
  "meta": {}
}