{
  "filename": "hive-cli.md",
  "__html": "<h1>Hive CLI</h1>\n<h2>Overview</h2>\n<p>Use <code>Hive Cli Task</code> to create a <code>Hive Cli</code> type task and execute hive SQL from scripts or files.\nThe workers run <code>hive -e</code> to execute hive sql from scripts or <code>hive -f</code> to execute from files in <code>Resource Center</code>.</p>\n<h2>Hive CLI Task vs SQL Task With Hive Datasource</h2>\n<p>In DolphinScheduler, we have both <code>Hive CLI Task</code> and <code>SQL Task With Hive Datasource</code> for different scenarios.\nYou could choose between these two based on your needs.</p>\n<ul>\n<li>The <code>Hive CLI</code> task plugin connects directly to <code>HDFS</code> and the <code>Hive Metastore</code> for hive task executions,\nwhich requires your workers to have access to those services, such as related <code>Hive</code> libs, <code>Hive</code> and <code>HDFS</code> configuration files.\nHowever, <code>Hive CLI Task</code> provides better stability for scheduling in production.</li>\n<li><code>SQL Task With Hive Datasource</code> does not require access to <code>Hive</code> libs, <code>Hive</code> and\n<code>HDFS</code> configuration files and supports <code>Kerberos</code> for authentication. However, you may encounter <code>HiveServer2</code> failures\nif your hive sql task scheduling puts significant pressure on it.</li>\n</ul>\n<h2>Create Task</h2>\n<ul>\n<li>Click <code>Project Management-Project Name-Workflow Definition</code>, and click the <code>Create Workflow</code> button to enter the DAG editing page.</li>\n<li>Drag <img src=\"/img/tasks/icons/hivecli.png\" width=\"15\"/> from the toolbar to the canvas.</li>\n</ul>\n<h2>Task Parameters</h2>\n<table>\n<thead>\n<tr>\n<th><strong>Parameter</strong></th>\n<th><strong>Description</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Node Name</td>\n<td>The name of the task. Node names within the same workflow must be unique.</td>\n</tr>\n<tr>\n<td>Run Flag</td>\n<td>Indicating whether to schedule the task. If you do not need to execute the task, you can turn on the <code>Prohibition execution</code> switch.</td>\n</tr>\n<tr>\n<td>Description</td>\n<td>Describing the function of this node.</td>\n</tr>\n<tr>\n<td>Task Priority</td>\n<td>When the number of the worker threads is insufficient, the worker executes task according to the priority. When two tasks have the same priority, the worker will execute them in <code>first come first served</code> fashion.</td>\n</tr>\n<tr>\n<td>Worker Group</td>\n<td>Machines which execute the tasks. If you choose <code>default</code>, scheduler will send the task to a random worker.</td>\n</tr>\n<tr>\n<td>Task Group Name</td>\n<td>Resource group of tasks. It will not take effect if not configured.</td>\n</tr>\n<tr>\n<td>Environment Name</td>\n<td>Environment to execute the task.</td>\n</tr>\n<tr>\n<td>Number of Failed Retries</td>\n<td>The number of task retries for failures. You could select it by drop-down menu or fill it manually.</td>\n</tr>\n<tr>\n<td>Failure Retry Interval</td>\n<td>Interval of task retries for failures. You could select it by drop-down menu or fill it manually.</td>\n</tr>\n<tr>\n<td>CPU Quota</td>\n<td>Assign the specified CPU time quota to the task executed. Takes a percentage value. Default -1 means unlimited. For example, the full CPU load of one core is 100%, and that of 16 cores is 1600%. You could configure it by <a href=\"../../architecture/configuration.md\">task.resource.limit.state</a>.</td>\n</tr>\n<tr>\n<td>Max Memory</td>\n<td>Assign the specified max memory to the task executed. Exceeding this limit will trigger oom to be killed and will not automatically retry. Takes an MB value. Default -1 means unlimited. You could configure it by <a href=\"../../architecture/configuration.md\">task.resource.limit.state</a>.</td>\n</tr>\n<tr>\n<td>Timeout Alarm</td>\n<td>Alarm for task timeout. When the task exceeds the &quot;timeout threshold&quot;, an alarm email will send.</td>\n</tr>\n<tr>\n<td>Hive Cli Task Execution Type</td>\n<td>The type of hive cli task execution, choose either <code>FROM_SCRIPT</code> or <code>FROM_FILE</code>.</td>\n</tr>\n<tr>\n<td>Hive SQL Script</td>\n<td>If you choose <code>FROM_SCRIPT</code> for <code>Hive Cli Task Execution Type</code>, you need to fill in your SQL script.</td>\n</tr>\n<tr>\n<td>Hive Cli Options</td>\n<td>Extra options for hive cli, such as <code>--verbose</code></td>\n</tr>\n<tr>\n<td>Resources</td>\n<td>If you choose <code>FROM_FILE</code> for <code>Hive Cli Task Execution Type</code>, you need to select your SQL file.</td>\n</tr>\n</tbody>\n</table>\n<h2>Task Example</h2>\n<h3>Hive Cli Task Example</h3>\n<p>This example below illustrates how to create a <code>Hive CLI</code> task node and execute hive SQL from script:</p>\n<p><img src=\"/img/tasks/demo/hive_cli_from_script.png\" alt=\"demo-hive-cli-from-script\"></p>\n<p>This example below illustrates how to create a <code>Hive CLI</code> task node and execute hive SQL from file:</p>\n<p><img src=\"/img/tasks/demo/hive_cli_from_file.png\" alt=\"demo-hive-cli-from-file\"></p>\n",
  "link": "/dist/en-us/docs/dev/user_doc/guide/task/hive-cli.html",
  "meta": {}
}