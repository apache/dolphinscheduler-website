{
  "filename": "pseudo-cluster.md",
  "__html": "<h1>Pseudo-Cluster Deployment</h1>\n<p>The purpose of pseudo-cluster deployment is to deploy the DolphinScheduler service on a single machine. In this mode, DolphinScheduler's master, worker, api server, and logger server are all on the same machine.</p>\n<p>If you are a green hand and want to experience DolphinScheduler, we recommended you install follow <a href=\"standalone.md\">Standalone</a>. If you want to experience more complete functions or schedule large tasks number, we recommended you install follow <a href=\"pseudo-cluster.md\">pseudo-cluster deployment</a>. If you want to using DolphinScheduler in production, we recommended you follow <a href=\"cluster.md\">cluster deployment</a> or <a href=\"kubernetes.md\">kubernetes</a></p>\n<h2>Prepare</h2>\n<p>Pseudo-cluster deployment of DolphinScheduler requires external software support</p>\n<ul>\n<li>JDK：Download <a href=\"https://www.oracle.com/technetwork/java/javase/downloads/index.html\">JDK</a> (1.8+), and configure <code>JAVA_HOME</code> to and <code>PATH</code> variable. You can skip this step, if it already exists in your environment.</li>\n<li>Binary package: Download the DolphinScheduler binary package at <a href=\"https://dolphinscheduler.apache.org/en-us/download/download.html\">download page</a></li>\n<li>Database: <a href=\"https://www.postgresql.org/download/\">PostgreSQL</a> (8.2.15+) or <a href=\"https://dev.mysql.com/downloads/mysql/\">MySQL</a> (5.7+), you can choose one of the two, such as MySQL requires JDBC Driver 8.0.16</li>\n<li>Registry Center: <a href=\"https://zookeeper.apache.org/releases.html\">ZooKeeper</a> (3.4.6+)，<a href=\"https://zookeeper.apache.org/releases.html\">download link</a></li>\n<li>Process tree analysis\n<ul>\n<li><code>pstree</code> for macOS</li>\n<li><code>psmisc</code> for Fedora/Red/Hat/CentOS/Ubuntu/Debian</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p><strong><em>Note:</em></strong> DolphinScheduler itself does not depend on Hadoop, Hive, Spark, but if you need to run tasks that depend on them, you need to have the corresponding environment support</p>\n</blockquote>\n<h2>DolphinScheduler startup environment</h2>\n<h3>Configure user exemption and permissions</h3>\n<p>Create a deployment user, and be sure to configure <code>sudo</code> without password. We here make a example for user dolphinscheduler.</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> To create a user, login as root</span>\nuseradd dolphinscheduler\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> Add password</span>\necho &quot;dolphinscheduler&quot; | passwd --stdin dolphinscheduler\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> Configure sudo without password</span>\nsed -i &#x27;$adolphinscheduler  ALL=(ALL)  NOPASSWD: NOPASSWD: ALL&#x27; /etc/sudoers\nsed -i &#x27;s/Defaults    requirett/#Defaults    requirett/g&#x27; /etc/sudoers\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> Modify directory permissions and grant permissions <span class=\"hljs-keyword\">for</span> user you created above</span>\nchown -R dolphinscheduler:dolphinscheduler apache-dolphinscheduler-*-bin\n</code></pre>\n<blockquote>\n<p><strong><em>NOTICE:</em></strong></p>\n<ul>\n<li>Because DolphinScheduler's multi-tenant task switch user by command <code>sudo -u {linux-user}</code>, the deployment user needs to have sudo privileges and is password-free. If novice learners don’t understand, you can ignore this point for the time being.</li>\n<li>If you find the line &quot;Defaults requirest&quot; in the <code>/etc/sudoers</code> file, please comment it</li>\n</ul>\n</blockquote>\n<h3>Configure machine SSH password-free login</h3>\n<p>Since resources need to be sent to different machines during installation, SSH password-free login is required between each machine. The steps to configure password-free login are as follows</p>\n<pre><code class=\"language-shell\">su dolphinscheduler\n\nssh-keygen -t rsa -P &#x27;&#x27; -f ~/.ssh/id_rsa\ncat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys\nchmod 600 ~/.ssh/authorized_keys\n</code></pre>\n<blockquote>\n<p><strong><em>Notice:</em></strong> After the configuration is complete, you can run the command <code>ssh localhost</code> to test if it work or not, if you can login with ssh without password.</p>\n</blockquote>\n<h3>Start zookeeper</h3>\n<p>Go to the zookeeper installation directory, copy configure file <code>zoo_sample.cfg</code> to <code>conf/zoo.cfg</code>, and change value of dataDir in <code>conf/zoo.cfg</code> to <code>dataDir=./tmp/zookeeper</code></p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> Start zookeeper</span>\n./bin/zkServer.sh start\n</code></pre>\n<h2>Modify configuration</h2>\n<p>After completing the preparation of the basic environment, you need to modify the configuration file according to your environment. The configuration file is in the path of <code>conf/config/install_config.conf</code>. Generally, you just needs to modify the <strong>INSTALL MACHINE, DolphinScheduler ENV, Database, Registry Server</strong> part to complete the deployment, the following describes the parameters that must be modified</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> ---------------------------------------------------------</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> INSTALL MACHINE</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> ---------------------------------------------------------</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> Because the master, worker, and API server are deployed on a single node, the IP of the server is the machine IP or localhost</span>\nips=&quot;localhost&quot;\nmasters=&quot;localhost&quot;\nworkers=&quot;localhost:default&quot;\nalertServer=&quot;localhost&quot;\napiServers=&quot;localhost&quot;\npythonGatewayServers=&quot;localhost&quot;\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> DolphinScheduler installation path, it will auto create <span class=\"hljs-keyword\">if</span> not exists</span>\ninstallPath=&quot;~/dolphinscheduler&quot;\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> Deploy user, use what you create <span class=\"hljs-keyword\">in</span> section **Configure machine SSH password-free login**</span>\ndeployUser=&quot;dolphinscheduler&quot;\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> ---------------------------------------------------------</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> DolphinScheduler ENV</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> ---------------------------------------------------------</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> The path of JAVA_HOME, <span class=\"hljs-built_in\">which</span> JDK install path <span class=\"hljs-keyword\">in</span> section **Prepare**</span>\njavaHome=&quot;/your/java/home/here&quot;\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> ---------------------------------------------------------</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> Database</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> ---------------------------------------------------------</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> Database <span class=\"hljs-built_in\">type</span>, username, password, IP, port, metadata. For now dbtype supports `mysql` and `postgresql`, `H2`</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> Please make sure that the value of configuration is quoted <span class=\"hljs-keyword\">in</span> double quotation marks, otherwise may not take effect</span>\nDATABASE_TYPE=&quot;mysql&quot;\nSPRING_DATASOURCE_URL=&quot;jdbc:mysql://ds1:3306/ds_201_doc?useUnicode=true&amp;characterEncoding=UTF-8&quot;\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> Have to modify <span class=\"hljs-keyword\">if</span> you are not using dolphinscheduler/dolphinscheduler as your username and password</span>\nSPRING_DATASOURCE_USERNAME=&quot;dolphinscheduler&quot;\nSPRING_DATASOURCE_PASSWORD=&quot;dolphinscheduler&quot;\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> ---------------------------------------------------------</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> Registry Server</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> ---------------------------------------------------------</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> Registration center address, the address of zookeeper service</span>\nregistryServers=&quot;localhost:2181&quot;\n</code></pre>\n<h2>Initialize the database</h2>\n<p>DolphinScheduler metadata is stored in relational database. Currently, PostgreSQL and MySQL are supported. If you use MySQL, you need to manually download <a href=\"https://downloads.MySQL.com/archives/c-j/\">mysql-connector-java driver</a> (8.0.16) and move it to the lib directory of DolphinScheduler. Let's take MySQL as an example for how to initialize the database</p>\n<pre><code class=\"language-shell\">mysql -uroot -p\n<span class=\"hljs-meta\">\nmysql&gt;</span><span class=\"bash\"> CREATE DATABASE dolphinscheduler DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;</span>\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> Change {user} and {password} by requests</span>\n<span class=\"hljs-meta\">mysql&gt;</span><span class=\"bash\"> GRANT ALL PRIVILEGES ON dolphinscheduler.* TO <span class=\"hljs-string\">&#x27;{user}&#x27;</span>@<span class=\"hljs-string\">&#x27;%&#x27;</span> IDENTIFIED BY <span class=\"hljs-string\">&#x27;{password}&#x27;</span>;</span>\n<span class=\"hljs-meta\">mysql&gt;</span><span class=\"bash\"> GRANT ALL PRIVILEGES ON dolphinscheduler.* TO <span class=\"hljs-string\">&#x27;{user}&#x27;</span>@<span class=\"hljs-string\">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class=\"hljs-string\">&#x27;{password}&#x27;</span>;</span>\n<span class=\"hljs-meta\">\nmysql&gt;</span><span class=\"bash\"> flush privileges;</span>\n</code></pre>\n<p>After above steps done you would create a new database for DolphinScheduler, then run shortcut Shell scripts to init database</p>\n<pre><code class=\"language-shell\">sh script/create-dolphinscheduler.sh\n</code></pre>\n<h2>Start DolphinScheduler</h2>\n<p>Use <strong>deployment user</strong> you created above, running the following command to complete the deployment, and the server log will be stored in the logs folder</p>\n<pre><code class=\"language-shell\">sh install.sh\n</code></pre>\n<blockquote>\n<p><strong><em>Note:</em></strong> For the first time deployment, there maybe occur five times of <code>sh: bin/dolphinscheduler-daemon.sh: No such file or directory</code> in terminal\n, this is non-important information and you can ignore it.</p>\n</blockquote>\n<h2>Login DolphinScheduler</h2>\n<p>The browser access address <a href=\"http://localhost:12345/dolphinscheduler\">http://localhost:12345/dolphinscheduler</a> can login DolphinScheduler UI. The default username and password are <strong>admin/dolphinscheduler123</strong></p>\n<h2>Start or stop server</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> Stop all DolphinScheduler server</span>\nsh ./bin/stop-all.sh\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> Start all DolphinScheduler server</span>\nsh ./bin/start-all.sh\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> Start or stop DolphinScheduler Master</span>\nsh ./bin/dolphinscheduler-daemon.sh stop master-server\nsh ./bin/dolphinscheduler-daemon.sh start master-server\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> Start or stop DolphinScheduler Worker</span>\nsh ./bin/dolphinscheduler-daemon.sh start worker-server\nsh ./bin/dolphinscheduler-daemon.sh stop worker-server\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> Start or stop DolphinScheduler Api</span>\nsh ./bin/dolphinscheduler-daemon.sh start api-server\nsh ./bin/dolphinscheduler-daemon.sh stop api-server\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> Start or stop Logger</span>\nsh ./bin/dolphinscheduler-daemon.sh start logger-server\nsh ./bin/dolphinscheduler-daemon.sh stop logger-server\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> Start or stop Alert</span>\nsh ./bin/dolphinscheduler-daemon.sh start alert-server\nsh ./bin/dolphinscheduler-daemon.sh stop alert-server\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> Start or stop Python Gateway Server</span>\nsh ./bin/dolphinscheduler-daemon.sh start python-gateway-server\nsh ./bin/dolphinscheduler-daemon.sh stop python-gateway-server\n</code></pre>\n<blockquote>\n<p><strong><em>Note:</em></strong>: Please refer to the section of &quot;System Architecture Design&quot; for service usage</p>\n</blockquote>\n",
  "link": "/dist/en-us/docs/2.0.5/user_doc/guide/installation/pseudo-cluster.html",
  "meta": {}
}